###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         24/Mar/2014  09:41:32 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Components\stack\sys\ZGlobals.c              #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\Source\znp #
#                          .cfg" (-DMAC_CFG_APP_PENDING_QUEUE=TRUE            #
#                          "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR   #
#                          | DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)"   #
#                          -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE -DZIGBEEPRO   #
#                          -DZIGBEE_FRAGMENTATION -DOSAL_CLOCK                #
#                          -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE -DNV_INIT   #
#                          -DNUM_DISC_ATTEMPTS=0) -f "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg #
#                          " (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0    #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00001000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Components\stack\sys\ZGlobals.c" -D         #
#                          xPOWER_SAVING -D NV_RESTORE -lC "C:\Documents and  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\CC2530-Debug\List\" -lA            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Lis #
#                          t\" --diag_suppress Pe001,Pa010 -o "C:\Documents   #
#                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Project #
#                          s\zstack\ZNP\CC253x\CC2530-Debug\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\" -I          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\Source\" -I      #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\Source\" -I   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\SE\Source\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\ZMain #
#                          \TI2530ZNP\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\hal\include #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\. #
#                          .\Components\hal\target\CC2530ZNP\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\mac\include\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\high_le #
#                          vel\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\single_chip\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mt\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\osal\include\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sa #
#                          ddr\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sd #
#                          ata\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\af\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\C #
#                          omponents\stack\nwk\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\.. #
#                          \Components\stack\sec\" -I "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\stack\zcl\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\zmac\" -I "C:\Documents and             #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"  #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\List #
#                          \ZGlobals.lst                                      #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ #
#                          ZGlobals.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2012-04-02 17:02:19 -0700 (Mon, 02 Apr 2012) $
      4            Revision:       $Revision: 29996 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          
     64          typedef struct zgItem
     65          {
     66            uint16 id;
     67            uint16 len;
     68            void *buf;
     69          } zgItem_t;
     70          
     71          /*********************************************************************
     72           * NWK GLOBAL VARIABLES
     73           */
     74          
     75          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     76          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     80          
     81          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     84          
     85          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     87          
     88          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     90          
     91          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
     96          
     97          // Security mode

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          
    100          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          uint8 zgSecurePermitJoin = true;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    102          
    103          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint16 zgTrustCenterAddr = ZG_TRUSTCENTER_ADDR;
   \                     zgTrustCenterAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          
    109          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    114          
    115          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    117          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    119          
    120          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          
    123          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    129          
    130          // Cleanup Child Table according to routing traffic

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 zgRouterOffAssocCleanup = FALSE;
   \                     zgRouterOffAssocCleanup:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          /*********************************************************************
    134           * APS GLOBAL VARIABLES
    135           */
    136          
    137          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    138          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    139          
    140          // The maximum number of seconds (milliseconds) to wait for an
    141          // acknowledgement to a transmitted frame.
    142          
    143          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    145          
    146          // This number is used by non-polled devices in the following formula:
    147          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    149          
    150          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    151          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    152          
    153          // The 64-big identifier of the network to join or form.
    154          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    156          
    157          // A boolean flag that indicates whether it is OK to use insecure join
    158          // on startup. Default set to true

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    160          
    161          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    163          
    164          /*********************************************************************
    165           * SECURITY GLOBAL VARIABLES
    166           */
    167          
    168          // If true, preConfigKey should be configured on all devices on the network
    169          // If false, it is configured only on the coordinator and sent to other
    170          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zgPreConfigKeys = FALSE;// TRUE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    172          
    173          // If true, defaultTCLinkKey should be configured on all devices on the
    174          // network. If false, individual trust center link key between each device and
    175          // the trust center should be manually configured via MT_WRITE_NV

   \                                 In  segment XDATA_I, align 1, keep-with-next
    176          uint8 zgUseDefaultTCLK = TRUE; // FALSE
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgUseDefaultTCLK>`
   \   000001                REQUIRE __INIT_XDATA_I
    177          
    178          /*********************************************************************
    179           * ZDO GLOBAL VARIABLES
    180           */
    181          
    182          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    183          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    184          
    185          // Device Logical Type

   \                                 In  segment XDATA_I, align 1, keep-with-next
    186          uint8 zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDeviceLogicalType>`
   \   000001                REQUIRE __INIT_XDATA_I
    187          
    188          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    189          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    190          
    191          #if !defined MT_TASK
    192          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint8 zgZdoDirectCB = FALSE;
   \                     zgZdoDirectCB:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          #endif
    195          
    196          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    197          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    198          
    199          /*********************************************************************
    200           * APPLICATION GLOBAL VARIABLES
    201           */
    202          
    203          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    204          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    205          
    206          /*********************************************************************
    207           * NON-STANDARD GLOBAL VARIABLES
    208           */
    209          
    210          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    211          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    212          
    213          /*********************************************************************
    214           * LOCAL VARIABLES
    215           */
    216          
    217          /*********************************************************************
    218           * ZGlobal Item Table
    219           */

   \                                 In  segment CODE_C, align 1
    220          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   8F00         DW 143
   \   000002   0100         DW 1
   \   000004   ....         DW zgZdoDirectCB
   \   000006   8700         DW 135
   \   000008   0100         DW 1
   \   00000A   ....         DW zgDeviceLogicalType
   \   00000C   2400         DW 36
   \   00000E   0200         DW 2
   \   000010   ....         DW zgPollRate
   \   000012   2500         DW 37
   \   000014   0200         DW 2
   \   000016   ....         DW zgQueuedPollRate
   \   000018   2600         DW 38
   \   00001A   0200         DW 2
   \   00001C   ....         DW zgResponsePollRate
   \   00001E   2700         DW 39
   \   000020   0200         DW 2
   \   000022   ....         DW zgRejoinPollRate
   \   000024   2800         DW 40
   \   000026   0100         DW 1
   \   000028   ....         DW zgMaxDataRetries
   \   00002A   2900         DW 41
   \   00002C   0100         DW 1
   \   00002E   ....         DW zgMaxPollFailureRetries
   \   000030   8400         DW 132
   \   000032   0400         DW 4
   \   000034   ....         DW zgDefaultChannelList
   \   000036   8600         DW 134
   \   000038   0100         DW 1
   \   00003A   ....         DW zgDefaultStartingScanDuration
   \   00003C   2A00         DW 42
   \   00003E   0100         DW 1
   \   000040   ....         DW zgStackProfile
   \   000042   2B00         DW 43
   \   000044   0100         DW 1
   \   000046   ....         DW zgIndirectMsgTimeout
   \   000048   2C00         DW 44
   \   00004A   0100         DW 1
   \   00004C   ....         DW zgRouteExpiryTime
   \   00004E   2D00         DW 45
   \   000050   0800         DW 8
   \   000052   ....         DW zgExtendedPANID
   \   000054   2E00         DW 46
   \   000056   0100         DW 1
   \   000058   ....         DW zgMaxBcastRetires
   \   00005A   2F00         DW 47
   \   00005C   0100         DW 1
   \   00005E   ....         DW zgPassiveAckTimeout
   \   000060   3000         DW 48
   \   000062   0100         DW 1
   \   000064   ....         DW zgBcastDeliveryTime
   \   000066   3100         DW 49
   \   000068   0100         DW 1
   \   00006A   ....         DW zgNwkMode
   \   00006C   3200         DW 50
   \   00006E   0100         DW 1
   \   000070   ....         DW zgConcentratorEnable
   \   000072   3300         DW 51
   \   000074   0100         DW 1
   \   000076   ....         DW zgConcentratorDiscoveryTime
   \   000078   3400         DW 52
   \   00007A   0100         DW 1
   \   00007C   ....         DW zgConcentratorRadius
   \   00007E   3600         DW 54
   \   000080   0100         DW 1
   \   000082   ....         DW zgConcentratorRC
   \   000084   3800         DW 56
   \   000086   0100         DW 1
   \   000088   ....         DW zgNwkSrcRtgExpiryTime
   \   00008A   3900         DW 57
   \   00008C   0100         DW 1
   \   00008E   ....         DW zgRouteDiscoveryTime
   \   000090   8300         DW 131
   \   000092   0200         DW 2
   \   000094   ....         DW zgConfigPANID
   \   000096   6300         DW 99
   \   000098   0100         DW 1
   \   00009A   ....         DW zgPreConfigKeys
   \   00009C   6400         DW 100
   \   00009E   0100         DW 1
   \   0000A0   ....         DW zgSecurityMode
   \   0000A2   6500         DW 101
   \   0000A4   0100         DW 1
   \   0000A6   ....         DW zgSecurePermitJoin
   \   0000A8   6D00         DW 109
   \   0000AA   0100         DW 1
   \   0000AC   ....         DW zgUseDefaultTCLK
   \   0000AE   6E00         DW 110
   \   0000B0   0200         DW 2
   \   0000B2   ....         DW zgTrustCenterAddr
   \   0000B4   4300         DW 67
   \   0000B6   0100         DW 1
   \   0000B8   ....         DW zgApscMaxFrameRetries
   \   0000BA   4400         DW 68
   \   0000BC   0200         DW 2
   \   0000BE   ....         DW zgApscAckWaitDurationPolled
   \   0000C0   4500         DW 69
   \   0000C2   0100         DW 1
   \   0000C4   ....         DW zgApsAckWaitMultiplier
   \   0000C6   4600         DW 70
   \   0000C8   0200         DW 2
   \   0000CA   ....         DW zgApsDefaultMaxBindingTime
   \   0000CC   4700         DW 71
   \   0000CE   0800         DW 8
   \   0000D0   ....         DW zgApsUseExtendedPANID
   \   0000D2   4800         DW 72
   \   0000D4   0100         DW 1
   \   0000D6   ....         DW zgApsUseInsecureJoin
   \   0000D8   4B00         DW 75
   \   0000DA   0100         DW 1
   \   0000DC   ....         DW zgApsNonMemberRadius
   \   0000DE   0400         DW 4
   \   0000E0   0100         DW 1
   \   0000E2   ....         DW zgStartDelay
   \   0000E4   A100         DW 161
   \   0000E6   0100         DW 1
   \   0000E8   ....         DW zgSapiEndpoint
   \   0000EA   3700         DW 55
   \   0000EC   0100         DW 1
   \   0000EE   ....         DW zgNwkMgrMode
   \   0000F0   8800         DW 136
   \   0000F2   0100         DW 1
   \   0000F4   ....         DW zgNwkMgrMinTransmissions
   \   0000F6   3C00         DW 60
   \   0000F8   0100         DW 1
   \   0000FA   ....         DW zgRouterOffAssocCleanup
   \   0000FC   0000         DW 0
   \   0000FE   0000         DW 0
   \   000100   0000         DW 0H
    221          {
    222          #if defined ( NV_INIT )
    223          #if !defined MT_TASK
    224            {
    225              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    226            },
    227          #endif
    228            {
    229              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    230            },
    231            {
    232              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    233            },
    234            {
    235              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    236            },
    237            {
    238              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    239            },
    240            {
    241              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    242            },
    243            {
    244              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    245            },
    246            {
    247              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    248            },
    249            {
    250              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    251            },
    252            {
    253              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    254            },
    255            {
    256              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    257            },
    258            {
    259              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    260            },
    261            {
    262              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    263            },
    264            {
    265              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    266            },
    267            {
    268              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    269            },
    270            {
    271              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    272            },
    273            {
    274              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    275            },
    276            {
    277              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    278            },
    279            {
    280              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    281            },
    282            {
    283              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    284            },
    285            {
    286              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    287            },
    288            {
    289              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    290            },
    291            {
    292              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    293            },
    294            {
    295              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    296            },
    297          #ifndef NONWK
    298            {
    299              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    300            },
    301            {
    302              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    303            },
    304            {
    305              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    306            },
    307            {
    308              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    309            },
    310            {
    311              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    312            },
    313            {
    314              ZCD_NV_TRUSTCENTER_ADDR, sizeof(zgTrustCenterAddr), &zgTrustCenterAddr
    315            },
    316          #endif // NONWK
    317            {
    318              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    319            },
    320            {
    321              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    322            },
    323            {
    324              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    325            },
    326            {
    327              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    328            },
    329            {
    330              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    331            },
    332            {
    333              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    334            },
    335            {
    336              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    337            },
    338            {
    339              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    340            },
    341            {
    342              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    343            },
    344            {
    345              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    346            },
    347            {
    348              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    349            },
    350            {
    351              ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
    352            },
    353          #endif // NV_INIT
    354            // Last item -- DO NOT MOVE IT!
    355            {
    356              0x00, 0, NULL
    357            }
    358          };
    359          
    360          /*********************************************************************
    361           * LOCAL FUNCTIONS
    362           */
    363          
    364          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    365          
    366          #ifndef NONWK
    367          //static uint8 zgPreconfigKeyInit( uint8 setDefault );
    368          uint8 zgPreconfigKeyInit( uint8 setDefault );
    369          #endif
    370          
    371          /*********************************************************************
    372           * @fn       zgItemInit()
    373           *
    374           * @brief
    375           *
    376           *   Initialize a global item. If the item doesn't exist in NV memory,
    377           *   write the system default (value passed in) into NV memory. But if
    378           *   it exists, set the item to the value stored in NV memory.
    379           *
    380           *   Also, if setDefault is TRUE and the item exists, we will write
    381           *   the default value to NV space.
    382           *
    383           * @param   id - item id
    384           * @param   len - item len
    385           * @param   buf - pointer to the item
    386           * @param   setDefault - TRUE to set default, not read
    387           *
    388           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    389           *          exist in NV, NV_OPER_FAILED if failure.
    390           */
    391          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    392          {
    393            uint8 status;
    394          
    395            // If the item doesn't exist in NV memory, create and initialize
    396            // it with the value passed in.
    397            status = osal_nv_item_init( id, len, buf );
    398            if ( status == ZSUCCESS )
    399            {
    400              if ( setDefault )
    401              {
    402                // Write the default value back to NV
    403                status = osal_nv_write( id, 0, len, buf );
    404              }
    405              else
    406              {
    407                // The item exists in NV memory, read it from NV memory
    408                status = osal_nv_read( id, 0, len, buf );
    409              }
    410            }
    411          
    412            return (status);
    413          }
    414          
    415          /*********************************************************************
    416           * API FUNCTIONS
    417           */
    418          
    419          /*********************************************************************
    420           * @fn          zgInit
    421           *
    422           * @brief
    423           *
    424           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    425           *   NV memory, write the system default into NV memory. But if
    426           *   it exists, set the item to the value stored in NV memory.
    427           *
    428           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    429           *       that the Config state items (zgItemTable) need to be
    430           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    431           *
    432           * @param       none
    433           *
    434           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    435           *              exist in NV, NV_OPER_FAILED if failure.
    436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    437          uint8 zgInit( void )
   \                     zgInit:
    438          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    439            uint8  setDefault = FALSE;
   \   000005   7E00         MOV     R6,#0x0
    440          
    441            // Do we want to default the Config state values
    442            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000D   5001         JNC     ??zgInit_0
    443            {
    444              setDefault = TRUE;
   \   00000F   0E           INC     R6
    445            }
    446          
    447          #if 0
    448            // Enable this section if you need to track the number of resets
    449            // This section is normally disabled to minimize "wear" on NV memory
    450            uint16 bootCnt = 0;
    451          
    452            // Update the Boot Counter
    453            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    454            {
    455              // Get the old value from NV memory
    456              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    457            }
    458          
    459            // Increment the Boot Counter and store it into NV memory
    460            if ( setDefault )
    461              bootCnt = 0;
    462            else
    463              bootCnt++;
    464            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    465          #endif
    466          
    467            // Initialize the Extended PAN ID as my own extended address
    468            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   000010                ; Setup parameters for call to function ZMacGetReq
   \   000010   7A..         MOV     R2,#zgExtendedPANID & 0xff
   \   000012   7B..         MOV     R3,#(zgExtendedPANID >> 8) & 0xff
   \   000014   79E2         MOV     R1,#-0x1e
   \   000016   12....       LCALL   ??ZMacGetReq?relay
    469          
    470            // Initialize the items table
    471            zgInitItems( setDefault );
   \   000019                ; Setup parameters for call to function zgInitItems
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??zgInitItems?relay
    472          
    473          #ifndef NONWK
    474            if ( ZG_SECURE_ENABLED )
    475            {
    476              // Initialize the Pre-Configured Key to the default key
    477              zgPreconfigKeyInit( setDefault );
    478          
    479              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    480              ZDSecMgrInitNVKeyTables( setDefault );
    481            }
    482          #endif // NONWK
    483          
    484            // Clear the Config State default
    485            if ( setDefault )
   \   00001E   EE           MOV     A,R6
   \   00001F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000021   5007         JNC     ??zgInit_1
    486            {
    487              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   000023                ; Setup parameters for call to function zgWriteStartupOptions
   \   000023   7A01         MOV     R2,#0x1
   \   000025   7900         MOV     R1,#0x0
   \   000027   12....       LCALL   ??zgWriteStartupOptions?relay
    488            }
    489          
    490            return ( ZSUCCESS );
   \                     ??zgInit_1:
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   7F01         MOV     R7,#0x1
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
    491          }
    492          
    493          /*********************************************************************
    494           * @fn          zgInitItems
    495           *
    496           * @brief       Initializes RAM variables from NV.  If NV items don't
    497           *              exist, then the NV is initialize with what is in RAM
    498           *              variables.
    499           *
    500           * @param       none
    501           *
    502           * @return      none
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    505          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 5,R1
    506            uint8  i = 0;
   \   000007   75..00       MOV     ?V0 + 4,#0x0
   \   00000A   801A         SJMP    ??zgInitItems_0
    507          
    508            while ( zgItemTable[i].id != 0x00 )
    509            {
   \                     ??zgInitItems_1:
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??osal_nv_read?relay
   \                     ??zgInitItems_2:
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    510              // Initialize the item
    511              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    512          
    513              // Move on to the next item
    514              i++;
   \                     ??zgInitItems_3:
   \   000024   05..         INC     ?V0 + 4
   \                     ??zgInitItems_0:
   \   000026   E5..         MOV     A,?V0 + 4
   \   000028   75F006       MOV     B,#0x6
   \   00002B   A4           MUL     AB
   \   00002C   F8           MOV     R0,A
   \   00002D   AAF0         MOV     R2,B
   \   00002F   EA           MOV     A,R2
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000034   607F         JZ      ??zgInitItems_4
   \   000036   E5..         MOV     A,?V0 + 4
   \   000038   75F006       MOV     B,#0x6
   \   00003B   A4           MUL     AB
   \   00003C   F8           MOV     R0,A
   \   00003D   EA           MOV     A,R2
   \   00003E   F9           MOV     R1,A
   \   00003F   74..         MOV     A,#zgItemTable & 0xff
   \   000041   28           ADD     A,R0
   \   000042   F8           MOV     R0,A
   \   000043   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   000045   39           ADDC    A,R1
   \   000046   F9           MOV     R1,A
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E4           CLR     A
   \   00004C   93           MOVC    A,@A+DPTR
   \   00004D   F5..         MOV     ?V0 + 2,A
   \   00004F   7401         MOV     A,#0x1
   \   000051   93           MOVC    A,@A+DPTR
   \   000052   F5..         MOV     ?V0 + 3,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E4           CLR     A
   \   00005B   93           MOVC    A,@A+DPTR
   \   00005C   C0E0         PUSH    A
   \   00005E   7401         MOV     A,#0x1
   \   000060   93           MOVC    A,@A+DPTR
   \   000061   F583         MOV     DPH,A
   \   000063   D082         POP     DPL
   \   000065   8582..       MOV     ?V0 + 0,DPL
   \   000068   8583..       MOV     ?V0 + 1,DPH
   \   00006B   8882         MOV     DPL,R0
   \   00006D   8983         MOV     DPH,R1
   \   00006F   E4           CLR     A
   \   000070   93           MOVC    A,@A+DPTR
   \   000071   C0E0         PUSH    A
   \   000073   7401         MOV     A,#0x1
   \   000075   93           MOVC    A,@A+DPTR
   \   000076   F583         MOV     DPH,A
   \   000078   D082         POP     DPL
   \   00007A   AE82         MOV     R6,DPL
   \   00007C   AF83         MOV     R7,DPH
   \   00007E                ; Setup parameters for call to function osal_nv_item_init
   \   00007E   78..         MOV     R0,#?V0 + 2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   AC..         MOV     R4,?V0 + 0
   \   000085   AD..         MOV     R5,?V0 + 1
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   ??osal_nv_item_init?relay
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   E9           MOV     A,R1
   \   000094   708E         JNZ     ??zgInitItems_3
   \   000096   E5..         MOV     A,?V0 + 5
   \   000098   78..         MOV     R0,#?V0 + 2
   \   00009A   7003         JNZ     $+5
   \   00009C   02....       LJMP    ??zgInitItems_1 & 0xFFFF
   \   00009F                ; Setup parameters for call to function osal_nv_write
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   7C00         MOV     R4,#0x0
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   EE           MOV     A,R6
   \   0000AC   FA           MOV     R2,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   FB           MOV     R3,A
   \   0000AF   12....       LCALL   ??osal_nv_write?relay
   \   0000B2   02....       LJMP    ??zgInitItems_2 & 0xFFFF
    515            }
    516          }
   \                     ??zgInitItems_4:
   \   0000B5   7F06         MOV     R7,#0x6
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   74..         MOV     A,#zgItemTable & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   000007   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000A   E8           MOV     A,R0
   \   00000B   49           ORL     A,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F8           MOV     R0,A
   \   000006   7401         MOV     A,#0x1
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    517          
    518          /*********************************************************************
    519           * @fn          zgReadStartupOptions
    520           *
    521           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    522           *
    523           * @param       none
    524           *
    525           * @return      the ZCD_NV_STARTUP_OPTION NV item
    526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    528          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    529            // Default to Use Config State and Use Network State
    530            uint8 startupOption = 0;
   \   00000A   12....       LCALL   ?Subroutine3 & 0xFFFF
    531          
    532            // This should have been done in ZMain.c, but just in case.
    533            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    534                                        sizeof(startupOption),
    535                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_4:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A03         MOV     R2,#0x3
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??osal_nv_item_init?relay
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   E9           MOV     A,R1
   \   000021   7020         JNZ     ??zgReadStartupOptions_0
    536            {
    537              // Read saved startup control
    538              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    539                            0,
    540                            sizeof( startupOption ),
    541                            &startupOption);
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..01       MOV     ?V0 + 0,#0x1
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV     R4,#0x0
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7A03         MOV     R2,#0x3
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   ??osal_nv_read?relay
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    542            }
    543            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0
    544          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine5_0
   \   000007                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   8582..       MOV     ?V0 + 0,DPL
   \   000004   8583..       MOV     ?V0 + 1,DPH
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET
    545          
    546          /*********************************************************************
    547           * @fn          zgWriteStartupOptions
    548           *
    549           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    550           *
    551           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    552           *               clear bit. The set bit is an OR operation, and the
    553           *               clear bit is an AND ~(bitOptions) operation.
    554           *
    555           * @param       bitOptions - which bits to perform action on:
    556           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    557           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    558           *
    559           * @return      ZSUCCESS if successful
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    562          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    563            uint8 status;
    564            uint8 startupOptions = 0;
   \   00000E   12....       LCALL   ?Subroutine3 & 0xFFFF
    565          
    566            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    567                          0,
    568                          sizeof( startupOptions ),
    569                          &startupOptions );
   \                     ??CrossCallReturnLabel_5:
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV     ?V0 + 0,#0x1
   \   000017   75..00       MOV     ?V0 + 1,#0x0
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV     R4,#0x0
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A03         MOV     R2,#0x3
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   ??osal_nv_read?relay
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
    570          
    571            if ( status == ZSUCCESS )
   \   000030   703C         JNZ     ??zgWriteStartupOptions_0
    572            {
    573              if ( action == ZG_STARTUP_SET )
   \   000032   74FF         MOV     A,#-0x1
   \   000034   6E           XRL     A,R6
   \   000035   700A         JNZ     ??zgWriteStartupOptions_1
    574              {
    575                // Set bits
    576                startupOptions |= bitOptions;
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   4F           ORL     A,R7
   \   00003F   800C         SJMP    ??zgWriteStartupOptions_2
    577              }
    578              else
    579              {
    580                // Clear bits
    581                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000041   74FF         MOV     A,#-0x1
   \   000043   6F           XRL     A,R7
   \   000044   F8           MOV     R0,A
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   58           ANL     A,R0
    582              }
    583          
    584              // Changed?
    585              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    586                           0,
    587                           sizeof( startupOptions ),
    588                           &startupOptions );
    589            }
   \                     ??zgWriteStartupOptions_2:
   \   00004D   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   75..01       MOV     ?V0 + 0,#0x1
   \   000056   75..00       MOV     ?V0 + 1,#0x0
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7C00         MOV     R4,#0x0
   \   000060   7D00         MOV     R5,#0x0
   \   000062   7A03         MOV     R2,#0x3
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   ??osal_nv_write?relay
   \   000069   7404         MOV     A,#0x4
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    590          
    591            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   00006E   02....       LJMP    ?Subroutine0 & 0xFFFF
    592          }
    593          
    594          /*********************************************************************
    595           * @fn          zgSetItem
    596           *
    597           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    598           *
    599           * @param       id - NV ID
    600           *              len - NV item length
    601           *              buf - pointer to the input buffer
    602           *
    603           * @return      none
    604           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    605          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    606          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   740B         MOV     A,#0xb
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
    607          
    608            uint8  i = 0;
   \   000011   7E00         MOV     R6,#0x0
   \   000013   8001         SJMP    ??zgSetItem_0
    609          
    610            // Look up the NV item table
    611            while ( zgItemTable[i].id != 0x00 )
    612            {
    613              if( zgItemTable[i].id == id )
    614              {
    615                if ( zgItemTable[i].len == len )
    616                {
    617                  osal_memcpy( zgItemTable[i].buf, buf, len );
    618                }
    619                break;
    620              }
    621              // Move on to the next item
    622              i++;
   \                     ??zgSetItem_1:
   \   000015   0E           INC     R6
   \                     ??zgSetItem_0:
   \   000016   EE           MOV     A,R6
   \   000017   75F006       MOV     B,#0x6
   \   00001A   A4           MUL     AB
   \   00001B   F8           MOV     R0,A
   \   00001C   A9F0         MOV     R1,B
   \   00001E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000021   6054         JZ      ??zgSetItem_2
   \   000023   E4           CLR     A
   \   000024   93           MOVC    A,@A+DPTR
   \   000025   F8           MOV     R0,A
   \   000026   7401         MOV     A,#0x1
   \   000028   93           MOVC    A,@A+DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   EA           MOV     A,R2
   \   00002B   68           XRL     A,R0
   \   00002C   7002         JNZ     ??zgSetItem_3
   \   00002E   EB           MOV     A,R3
   \   00002F   69           XRL     A,R1
   \                     ??zgSetItem_3:
   \   000030   70E3         JNZ     ??zgSetItem_1
   \   000032   EE           MOV     A,R6
   \   000033   75F006       MOV     B,#0x6
   \   000036   A4           MUL     AB
   \   000037   F8           MOV     R0,A
   \   000038   AAF0         MOV     R2,B
   \   00003A   EA           MOV     A,R2
   \   00003B   F9           MOV     R1,A
   \   00003C   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   00003E   28           ADD     A,R0
   \   00003F   F582         MOV     DPL,A
   \   000041   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   000043   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000046   EC           MOV     A,R4
   \   000047   68           XRL     A,R0
   \   000048   7002         JNZ     ??zgSetItem_4
   \   00004A   ED           MOV     A,R5
   \   00004B   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   00004C   7029         JNZ     ??zgSetItem_2
   \   00004E                ; Setup parameters for call to function osal_memcpy
   \   00004E   75..00       MOV     ?V0 + 2,#0x0
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   EE           MOV     A,R6
   \   000057   75F006       MOV     B,#0x6
   \   00005A   A4           MUL     AB
   \   00005B   F8           MOV     R0,A
   \   00005C   EA           MOV     A,R2
   \   00005D   F9           MOV     R1,A
   \   00005E   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   000060   28           ADD     A,R0
   \   000061   F582         MOV     DPL,A
   \   000063   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   000065   39           ADDC    A,R1
   \   000066   F583         MOV     DPH,A
   \   000068   E4           CLR     A
   \   000069   93           MOVC    A,@A+DPTR
   \   00006A   FA           MOV     R2,A
   \   00006B   7401         MOV     A,#0x1
   \   00006D   93           MOVC    A,@A+DPTR
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   ??osal_memcpy?relay
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
    623            }
    624          }
   \                     ??zgSetItem_2:
   \   000077                REQUIRE ?Subroutine1
   \   000077                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    625          
    626          #ifndef NONWK
    627          /*********************************************************************
    628           * @fn       zgPreconfigKeyInit()
    629           *
    630           * @brief
    631           *
    632           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    633           *   write the system default (value passed in) into NV memory. But if
    634           *   it exists do not overwrite it.
    635           *
    636           *   Also, if setDefault is TRUE and the item exists, we will write
    637           *   the default value to NV space.
    638           *
    639           * @param   setDefault - TRUE to set default
    640           *
    641           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    642           *          exist in NV, NV_OPER_FAILED if failure.
    643           */
    644          //static uint8 zgPreconfigKeyInit( uint8 setDefault )

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          uint8 zgPreconfigKeyInit( uint8 setDefault )
   \                     zgPreconfigKeyInit:
    646          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
    647            uint8 zgPreConfigKey[SEC_KEY_LEN];
    648            uint8 status;
    649          
    650            // Initialize the Pre-Configured Key to the default key
    651            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
   \   00000C                ; Setup parameters for call to function osal_memcpy
   \   00000C   75....       MOV     ?V0 + 0,#defaultKey & 0xff
   \   00000F   75....       MOV     ?V0 + 1,#(defaultKey >> 8) & 0xff
   \   000012   75..00       MOV     ?V0 + 2,#0x0
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001A   7C10         MOV     R4,#0x10
   \   00001C   7D00         MOV     R5,#0x0
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   \   000027   12....       LCALL   ??osal_memcpy?relay
   \   00002A   7403         MOV     A,#0x3
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    652          
    653            // If the item doesn't exist in NV memory, create and initialize it
    654            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
   \   00002F                ; Setup parameters for call to function osal_nv_item_init
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   8582..       MOV     ?V0 + 0,DPL
   \   000038   8583..       MOV     ?V0 + 1,DPH
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7C10         MOV     R4,#0x10
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7A62         MOV     R2,#0x62
   \   000046   7B00         MOV     R3,#0x0
   \   000048   12....       LCALL   ??osal_nv_item_init?relay
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   E9           MOV     A,R1
   \   000051   FE           MOV     R6,A
    655            if ( status == ZSUCCESS )
   \   000052   7025         JNZ     ??zgPreconfigKeyInit_0
    656            {
    657              if ( setDefault )
   \   000054   EF           MOV     A,R7
   \   000055   6022         JZ      ??zgPreconfigKeyInit_0
    658              {
    659                // Write the default value back to NV
    660                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
   \   000057                ; Setup parameters for call to function osal_nv_write
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   75..10       MOV     ?V0 + 0,#0x10
   \   00005F   75..00       MOV     ?V0 + 1,#0x0
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7C00         MOV     R4,#0x0
   \   000069   7D00         MOV     R5,#0x0
   \   00006B   7A62         MOV     R2,#0x62
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   12....       LCALL   ??osal_nv_write?relay
   \   000072   7404         MOV     A,#0x4
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   FE           MOV     R6,A
    661              }
    662            }
    663          
    664            // clear local copy of default key
    665            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \                     ??zgPreconfigKeyInit_0:
   \   000079                ; Setup parameters for call to function osal_memset
   \   000079   7C10         MOV     R4,#0x10
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   AA82         MOV     R2,DPL
   \   000087   AB83         MOV     R3,DPH
   \   000089   12....       LCALL   ??osal_memset?relay
    666          
    667            return (status);
   \   00008C   EE           MOV     A,R6
   \   00008D   F9           MOV     R1,A
   \   00008E   7410         MOV     A,#0x10
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   02....       LJMP    ?Subroutine1 & 0xFFFF
    668          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00100000     DD 4096

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgUseDefaultTCLK>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   FFFF         DW 65535

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDeviceLogicalType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgInitItems?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgReadStartupOptions?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgWriteStartupOptions?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgSetItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgPreconfigKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgPreconfigKeyInit
    669          #endif
    670          
    671          /*********************************************************************
    672          *********************************************************************/

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     zgInit                         0      0      9
       -> zgReadStartupOptions      0      0     18
       -> ZMacGetReq                0      0     18
       -> zgInitItems               0      0     18
       -> zgWriteStartupOptions     0      0     18
     zgInitItems                    0      0     27
       -> osal_nv_read              0      0     36
       -> osal_nv_item_init         0      0     32
       -> osal_nv_write             0      0     36
     zgPreconfigKeyInit             0      0     31
       -> osal_memcpy               0      0     60
       -> osal_nv_item_init         0      0     58
       -> osal_nv_write             0      0     62
       -> osal_memset               0      0     54
     zgReadStartupOptions           0      0     24
       -> osal_nv_item_init         0      0     26
       -> osal_nv_read              0      0     30
     zgSetItem                      0      0     16
       -> osal_memcpy               0      0     28
     zgWriteStartupOptions          0      0     24
       -> osal_nv_read              0      0     30
       -> osal_nv_write             0      0     30


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     zgPollRate                                        2
     zgQueuedPollRate                                  2
     zgResponsePollRate                                2
     zgRejoinPollRate                                  2
     zgMaxDataRetries                                  1
     zgMaxPollFailureRetries                           1
     zgDefaultChannelList                              4
     zgDefaultStartingScanDuration                     1
     zgStackProfile                                    1
     zgIndirectMsgTimeout                              1
     zgSecurityMode                                    1
     zgSecurePermitJoin                                1
     zgTrustCenterAddr                                 2
     zgRouteDiscoveryTime                              1
     zgRouteExpiryTime                                 1
     zgExtendedPANID                                   8
     zgMaxBcastRetires                                 1
     zgPassiveAckTimeout                               1
     zgBcastDeliveryTime                               1
     zgNwkMode                                         1
     zgConcentratorEnable                              1
     zgConcentratorDiscoveryTime                       1
     zgConcentratorRadius                              1
     zgConcentratorRC                                  1
     zgNwkSrcRtgExpiryTime                             1
     zgRouterOffAssocCleanup                           1
     zgApscMaxFrameRetries                             1
     zgApscAckWaitDurationPolled                       2
     zgApsAckWaitMultiplier                            1
     zgApsDefaultMaxBindingTime                        2
     zgApsUseExtendedPANID                             8
     zgApsUseInsecureJoin                              1
     zgApsNonMemberRadius                              1
     zgPreConfigKeys                                   1
     zgUseDefaultTCLK                                  1
     zgConfigPANID                                     2
     zgDeviceLogicalType                               1
     zgStartDelay                                      1
     zgZdoDirectCB                                     1
     zgNwkMgrMinTransmissions                          1
     zgNwkMgrMode                                      1
     zgSapiEndpoint                                    1
     zgItemTable                                     258
     zgInit                                           49
     zgInitItems                                     186
     ?Subroutine2                                     13
     ?Subroutine4                                     11
     zgReadStartupOptions                             75
     ?Subroutine0                                     10
     ?Subroutine3                                      7
     ??Subroutine5_0                                  10
     zgWriteStartupOptions                           113
     zgSetItem                                       119
     ?Subroutine1                                      5
     zgPreconfigKeyInit                              150
     ?<Initializer for zgPollRate>                     2
     ?<Initializer for zgQueuedPollRate>               2
     ?<Initializer for zgResponsePollRate>             2
     ?<Initializer for zgRejoinPollRate>               2
     ?<Initializer for zgMaxDataRetries>               1
     ?<Initializer for zgMaxPollFailureRetries>        1
     ?<Initializer for zgDefaultChannelList>           4
     ?<Initializer for zgDefaultStartingScanDuratio    1
     ?<Initializer for zgStackProfile>                 1
     ?<Initializer for zgIndirectMsgTimeout>           1
     ?<Initializer for zgSecurePermitJoin>             1
     ?<Initializer for zgRouteDiscoveryTime>           1
     ?<Initializer for zgRouteExpiryTime>              1
     ?<Initializer for zgMaxBcastRetires>              1
     ?<Initializer for zgPassiveAckTimeout>            1
     ?<Initializer for zgBcastDeliveryTime>            1
     ?<Initializer for zgNwkMode>                      1
     ?<Initializer for zgConcentratorRadius>           1
     ?<Initializer for zgNwkSrcRtgExpiryTime>          1
     ?<Initializer for zgApscMaxFrameRetries>          1
     ?<Initializer for zgApscAckWaitDurationPolled>    2
     ?<Initializer for zgApsAckWaitMultiplier>         1
     ?<Initializer for zgApsDefaultMaxBindingTime>     2
     ?<Initializer for zgApsUseInsecureJoin>           1
     ?<Initializer for zgApsNonMemberRadius>           1
     ?<Initializer for zgUseDefaultTCLK>               1
     ?<Initializer for zgConfigPANID>                  2
     ?<Initializer for zgDeviceLogicalType>            1
     ?<Initializer for zgStartDelay>                   1
     ?<Initializer for zgNwkMgrMinTransmissions>       1
     ?<Initializer for zgNwkMgrMode>                   1
     ?<Initializer for zgSapiEndpoint>                 1
     ??zgInit?relay                                    6
     ??zgInitItems?relay                               6
     ??zgReadStartupOptions?relay                      6
     ??zgWriteStartupOptions?relay                     6
     ??zgSetItem?relay                                 6
     ??zgPreconfigKeyInit?relay                        6

 
 748 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
 258 bytes in segment CODE_C
  42 bytes in segment XDATA_I
  42 bytes in segment XDATA_ID
  25 bytes in segment XDATA_Z
 
 1 084 bytes of CODE  memory
    67 bytes of XDATA memory

Errors: none
Warnings: none
