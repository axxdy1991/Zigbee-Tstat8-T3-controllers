###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         24/Mar/2014  09:41:32 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\Source\temcoDevice.c     #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\Source\znp #
#                          .cfg" (-DMAC_CFG_APP_PENDING_QUEUE=TRUE            #
#                          "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR   #
#                          | DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)"   #
#                          -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE -DZIGBEEPRO   #
#                          -DZIGBEE_FRAGMENTATION -DOSAL_CLOCK                #
#                          -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE -DNV_INIT   #
#                          -DNUM_DISC_ATTEMPTS=0) -f "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg #
#                          " (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0    #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00001000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\Source\temcoDevice.c"   #
#                          -D xPOWER_SAVING -D NV_RESTORE -lC "C:\Documents   #
#                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Project #
#                          s\zstack\ZNP\CC253x\CC2530-Debug\List\" -lA        #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Lis #
#                          t\" --diag_suppress Pe001,Pa010 -o "C:\Documents   #
#                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Project #
#                          s\zstack\ZNP\CC253x\CC2530-Debug\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\" -I          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\Source\" -I      #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\Source\" -I   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\SE\Source\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\ZMain #
#                          \TI2530ZNP\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\hal\include #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\. #
#                          .\Components\hal\target\CC2530ZNP\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\mac\include\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\high_le #
#                          vel\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\single_chip\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mt\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\osal\include\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sa #
#                          ddr\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sd #
#                          ata\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\af\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\C #
#                          omponents\stack\nwk\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\.. #
#                          \Components\stack\sec\" -I "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\stack\zcl\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\zmac\" -I "C:\Documents and             #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"  #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\List #
#                          \temcoDevice.lst                                   #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ #
#                          temcoDevice.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zstack\ZNP\Source\temcoDevice.c
      1          
      2          
      3          /* ------------------------------------------------------------------------------------------------
      4           *                                          Includes
      5           * ------------------------------------------------------------------------------------------------
      6           */
      7          #include "ZGlobals.h"
      8          #include "OSAL.h"
      9          #include "MT_UART.h"
     10          #include "temcoDevice.h"
     11          #include "modbus.h"
     12          #include "temcoAPI.h"
     13          
     14          /* ------------------------------------------------------------------------------------------------
     15           *                                           Local Functions
     16           * ------------------------------------------------------------------------------------------------
     17           */
     18          static void temcoInit(void);
     19          static void temcoUartCback(uint8 port, uint8 event);
     20          
     21          /* ------------------------------------------------------------------------------------------------
     22           *                                           Local Variables
     23           * ------------------------------------------------------------------------------------------------
     24           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     25          uint8 stateTemco;
   \                     stateTemco:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     26          
     27          //uint8 *pMsgTemco = NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     28          uint8 pMsgTemco[MT_UART_DEFAULT_MAX_RX_BUFF];
   \                     pMsgTemco:
   \   000000                DS 254
   \   0000FE                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     29          uint8 head, cmd;
   \                     head:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     cmd:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          uint8 tempDataLenTemco;
   \                     tempDataLenTemco:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     31          uint8 cmdLen;
   \                     cmdLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     32          static bool isAlloc = FALSE;
   \                     isAlloc:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     33          static bool haveMsg = FALSE;
   \                     haveMsg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     34          /**************************************************************************************************
     35           * CONSTANT
     36           */
     37          #define HEAD_STATE    0x00
     38          #define CMD_STATE     0x01
     39          #define DATA_STATE    0x02
     40          #define LEN_STATE     0x03
     41          #define ID_HI_STATE   0x04
     42          #define ID_LO_STATE   0x05
     43          #define LEN_HI_STATE  0x06
     44          
     45          /* ------------------------------------------------------------------------------------------------
     46           *                                           Global Variables
     47           * ------------------------------------------------------------------------------------------------
     48           */
     49          
     50          /**************************************************************************************************
     51           * @fn          temcoTaskInit
     52           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     53          void temcoTaskInit(uint8 taskId)
   \                     temcoTaskInit:
     54          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
     55            temcoTaskId = taskId;
   \   000006   90....       MOV     DPTR,#MT_TaskID
   \   000009   F0           MOVX    @DPTR,A
     56            osal_set_event(taskId, ZNP_SECONDARY_INIT_EVENT);
   \   00000A                ; Setup parameters for call to function osal_set_event
   \   00000A   7A10         MOV     R2,#0x10
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   ??osal_set_event?relay
     57            osal_set_event(temcoTaskId, RESET_STATE);
   \   000011                ; Setup parameters for call to function osal_set_event
   \   000011   7A20         MOV     R2,#0x20
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#MT_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??osal_set_event?relay
     58          }
   \   00001D                REQUIRE ?Subroutine0
   \   00001D                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     59          
     60          /**************************************************************************************************
     61           * @fn          temcoEventLoop
     62           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     63          uint16 temcoEventLoop( uint8 taskId, uint16 events)
   \                     temcoEventLoop:
     64          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     65            if (events & SYS_EVENT_MSG)
   \   000009   5480         ANL     A,#0x80
   \   00000B   6006         JZ      ??temcoEventLoop_0
     66            {
     67              
     68              events ^= SYS_EVENT_MSG;
   \   00000D   7480         MOV     A,#-0x80
   \   00000F   6F           XRL     A,R7
   \   000010   FF           MOV     R7,A
   \   000011   8046         SJMP    ??temcoEventLoop_1
     69            }
     70            else if(events & ZNP_SECONDARY_INIT_EVENT)
   \                     ??temcoEventLoop_0:
   \   000013   EE           MOV     A,R6
   \   000014   5410         ANL     A,#0x10
   \   000016   6009         JZ      ??temcoEventLoop_2
     71            {
     72              temcoInit();
   \   000018                ; Setup parameters for call to function temcoInit
   \   000018   12....       LCALL   ??temcoInit?relay
     73              events ^= ZNP_SECONDARY_INIT_EVENT;
   \   00001B   7410         MOV     A,#0x10
   \   00001D   6E           XRL     A,R6
   \   00001E   FE           MOV     R6,A
   \   00001F   8038         SJMP    ??temcoEventLoop_1
     74            }
     75            else if( events & RESET_STATE)
   \                     ??temcoEventLoop_2:
   \   000021   EE           MOV     A,R6
   \   000022   5420         ANL     A,#0x20
   \   000024   602F         JZ      ??temcoEventLoop_3
     76            {
     77              if( haveMsg )
   \   000026   90....       MOV     DPTR,#haveMsg
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6013         JZ      ??temcoEventLoop_4
     78              {
     79                haveMsg = FALSE;
   \   00002C   E4           CLR     A
   \   00002D   12....       LCALL   ??Subroutine13_0 & 0xFFFF
     80                if( stateTemco != HEAD_STATE)
   \                     ??CrossCallReturnLabel_24:
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6002         JZ      ??temcoEventLoop_5
     81                {
     82                  stateTemco = HEAD_STATE;
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
     83                }
     84                if( isAlloc == TRUE)
   \                     ??temcoEventLoop_5:
   \   000035   90....       MOV     DPTR,#isAlloc
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6401         XRL     A,#0x1
   \   00003B   7002         JNZ     ??temcoEventLoop_4
     85                {
     86                  isAlloc = FALSE;
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
     87               //   osal_mem_free( pMsgTemco);
     88                }
     89              }
     90              events ^= RESET_STATE;
   \                     ??temcoEventLoop_4:
   \   00003F   7420         MOV     A,#0x20
   \   000041   6E           XRL     A,R6
   \   000042   FE           MOV     R6,A
     91              osal_start_timerEx( temcoTaskId, RESET_STATE, 100);
   \   000043                ; Setup parameters for call to function osal_start_timerEx
   \   000043   7C64         MOV     R4,#0x64
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7A20         MOV     R2,#0x20
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   90....       MOV     DPTR,#MT_TaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??osal_start_timerEx?relay
   \   000053   8004         SJMP    ??temcoEventLoop_1
     92            }
     93            else
     94            {
     95              events = 0;
   \                     ??temcoEventLoop_3:
   \   000055   7E00         MOV     R6,#0x0
   \   000057   7F00         MOV     R7,#0x0
     96            }
     97            
     98            return events;
   \                     ??temcoEventLoop_1:
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   80..         SJMP    ?Subroutine0
     99          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#stateTemco
   \   000004   22           RET
    100          
    101          /***************************************************************************************************
    102           * @fn           temcoInit
    103           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          static void temcoInit(void)
   \                     temcoInit:
    105          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    106            halUARTCfg_t uartConfig;
    107          
    108            uartConfig.configured           = TRUE;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    109            if(zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR)
   \   000012   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000015   E0           MOVX    A,@DPTR
   \   000016   7008         JNZ     ??temcoInit_0
    110              uartConfig.baudRate = HAL_UART_BR_9600;
   \   000018   7401         MOV     A,#0x1
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E4           CLR     A
   \   00001E   8007         SJMP    ??temcoInit_1
    111            else
    112              uartConfig.baudRate             = HAL_UART_BR_19200;
   \                     ??temcoInit_0:
   \   000020   7401         MOV     A,#0x1
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7401         MOV     A,#0x1
   \                     ??temcoInit_1:
   \   000027   F0           MOVX    @DPTR,A
    113            uartConfig.flowControl          = FALSE;
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
    114            uartConfig.flowControlThreshold = HAL_UART_FLOW_THRESHOLD;
   \   00002F   7403         MOV     A,#0x3
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
    115            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   000038   740A         MOV     A,#0xa
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   74FE         MOV     A,#-0x2
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    116            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000043   7412         MOV     A,#0x12
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   74FE         MOV     A,#-0x2
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
    117            uartConfig.idleTimeout          = HAL_UART_IDLE_TIMEOUT;
   \   00004E   7405         MOV     A,#0x5
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
    118            uartConfig.intEnable            = TRUE;
   \   000055   7416         MOV     A,#0x16
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
    119            uartConfig.callBackFunc         = temcoUartCback;
   \   00005D   741B         MOV     A,#0x1b
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   74..         MOV     A,#??temcoUartCback?relay & 0xff
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#(??temcoUartCback?relay >> 8) & 0xff
   \   000068   F0           MOVX    @DPTR,A
    120            HalUARTOpen(HAL_UART_PORT, &uartConfig);
   \   000069                ; Setup parameters for call to function HalUARTOpen
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   AA82         MOV     R2,DPL
   \   000071   AB83         MOV     R3,DPH
   \   000073   7900         MOV     R1,#0x0
   \   000075   12....       LCALL   ??HalUARTOpen?relay
    121            MT_UartRegisterTaskID(temcoTaskId);
   \   000078                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000078   90....       MOV     DPTR,#MT_TaskID
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   12....       LCALL   ??MT_UartRegisterTaskID?relay
    122            
    123            stateTemco = HEAD_STATE;
   \   000080   90....       MOV     DPTR,#stateTemco
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    124            MT_Init();
   \   000085                ; Setup parameters for call to function MT_Init
   \   000085   12....       LCALL   ??MT_Init?relay
    125          }
   \   000088   741D         MOV     A,#0x1d
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   D083         POP     DPH
   \   00008F   D082         POP     DPL
   \   000091   02....       LJMP    ?BRET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint8 modbusId_hi,modbusId_lo,len_hi,len_lo;
   \                     modbusId_hi:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     modbusId_lo:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     len_hi:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     len_lo:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    127          /**************************************************************************************************
    128           * @fn          temcoUartCback
    129           */
    130          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          static void temcoUartCback(uint8 port, uint8 event)
   \                     temcoUartCback:
    132          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    133            uint8 ch;
    134            uint8 bytesInRxBuffer;
    135            
    136            (void)event;  // Intentionally unreferenced parameter
   \   00000C   800A         SJMP    ??temcoUartCback_0
    137            uint8 headLen;
    138            
    139            while (Hal_UART_RxBufLen(port))
    140            {
    141              HalUARTRead( port, &ch, 1);
    142              
    143              if(zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR)
    144              {
    145                switch(stateTemco)
    146                {
    147                  case HEAD_STATE:
    148                    head = ch;
   \                     ??temcoUartCback_1:
   \   00000E   12....       LCALL   ?Subroutine3 & 0xFFFF
    149                    stateTemco = CMD_STATE;
   \                     ??CrossCallReturnLabel_22:
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
    150                    haveMsg = TRUE;
   \   000014   90....       MOV     DPTR,#haveMsg
   \                     ??temcoUartCback_2:
   \   000017   F0           MOVX    @DPTR,A
    151                  //  osal_start_timerEx( temcoTaskId, RESET_STATE, RESET_STATE_TIMEOUT);
    152                    break;
   \                     ??temcoUartCback_0:
   \   000018                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000018   EE           MOV     A,R6
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00001D   8B..         MOV     ?V0 + 1,R3
   \   00001F   EA           MOV     A,R2
   \   000020   45..         ORL     A,?V0 + 1
   \   000022   7003         JNZ     $+5
   \   000024   02....       LJMP    ??temcoUartCback_3 & 0xFFFF
   \   000027                ; Setup parameters for call to function HalUARTRead
   \   000027   7C01         MOV     R4,#0x1
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   EE           MOV     A,R6
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   ??HalUARTRead?relay
   \   00003A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   90....       MOV     DPTR,#stateTemco
   \   000041   6003         JZ      $+5
   \   000043   02....       LJMP    ??temcoUartCback_4 & 0xFFFF
   \   000046   E0           MOVX    A,@DPTR
   \   000047   60C5         JZ      ??temcoUartCback_1
   \   000049   14           DEC     A
   \   00004A   6014         JZ      ??temcoUartCback_5
   \   00004C   14           DEC     A
   \   00004D   7003         JNZ     $+5
   \   00004F   02....       LJMP    ??temcoUartCback_6 & 0xFFFF
   \   000052   14           DEC     A
   \   000053   6071         JZ      ??temcoUartCback_7
   \   000055   14           DEC     A
   \   000056   6037         JZ      ??temcoUartCback_8
   \   000058   14           DEC     A
   \   000059   6046         JZ      ??temcoUartCback_9
   \   00005B   14           DEC     A
   \   00005C   6055         JZ      ??temcoUartCback_10
   \   00005E   80B8         SJMP    ??temcoUartCback_0
    153                    
    154                  case CMD_STATE:
    155                    cmd = ch;
   \                     ??temcoUartCback_5:
   \   000060   12....       LCALL   ?Subroutine9 & 0xFFFF
    156                    tempDataLenTemco = 0;
    157                    if( cmd == MODBUS_MULTI_WRITE)
   \                     ??CrossCallReturnLabel_14:
   \   000063   90....       MOV     DPTR,#cmd
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6410         XRL     A,#0x10
   \   000069   7007         JNZ     ??temcoUartCback_11
    158                    {
    159                      stateTemco = ID_HI_STATE;
   \   00006B   90....       MOV     DPTR,#stateTemco
   \   00006E   7404         MOV     A,#0x4
   \   000070   80A5         SJMP    ??temcoUartCback_2
    160                    }
    161                    else
    162                    {
    163                      if( (head == 0xff) && (cmd == MODBUS_SCAN_CMD))
   \                     ??temcoUartCback_11:
   \   000072   90....       MOV     DPTR,#head
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F4           CPL     A
   \   000077   6003         JZ      $+5
   \   000079   02....       LJMP    ??temcoUartCback_12 & 0xFFFF
   \   00007C   90....       MOV     DPTR,#cmd
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6419         XRL     A,#0x19
   \   000082   6003         JZ      $+5
   \   000084   02....       LJMP    ??temcoUartCback_12 & 0xFFFF
    164                        cmdLen = 4;
   \   000087   90....       MOV     DPTR,#cmdLen
   \   00008A   7404         MOV     A,#0x4
   \   00008C   02....       LJMP    ??temcoUartCback_13 & 0xFFFF
    165                      else if( (cmd == MODBUS_SINGLE_READ ) || ( cmd == MODBUS_SINGLE_WRITE))
    166                        cmdLen = 6;
    167                      else
    168                        cmdLen = 6;
    169                    //  pMsgTemco = osal_mem_alloc(cmdLen + 2);
    170                      isAlloc = TRUE;
    171                    //  if(pMsgTemco)
    172                      {
    173                        pMsgTemco[0] = head;
    174                        pMsgTemco[1] = cmd;
    175                      }
    176                      stateTemco = DATA_STATE;
    177                    }
    178                    break;
    179                    
    180                  case ID_HI_STATE:
    181                    modbusId_hi = ch;
   \                     ??temcoUartCback_8:
   \   00008F   85..82       MOV     DPL,?XSP + 0
   \   000092   85..83       MOV     DPH,?XSP + 1
   \   000095   E0           MOVX    A,@DPTR
   \   000096   90....       MOV     DPTR,#modbusId_hi
   \   000099   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    182                    stateTemco = ID_LO_STATE;
   \                     ??CrossCallReturnLabel_25:
   \   00009C   7405         MOV     A,#0x5
   \   00009E   02....       LJMP    ??temcoUartCback_2 & 0xFFFF
    183                    break;
    184                    
    185                  case ID_LO_STATE:
    186                    modbusId_lo = ch;
   \                     ??temcoUartCback_9:
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   90....       MOV     DPTR,#modbusId_lo
   \   0000AB   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    187                    stateTemco = LEN_HI_STATE;
   \                     ??CrossCallReturnLabel_26:
   \   0000AE   7406         MOV     A,#0x6
   \   0000B0   02....       LJMP    ??temcoUartCback_2 & 0xFFFF
    188                    break;
    189                    
    190                  case LEN_HI_STATE:
    191                    len_hi = ch;
   \                     ??temcoUartCback_10:
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   90....       MOV     DPTR,#len_hi
   \   0000BD   F0           MOVX    @DPTR,A
    192                    stateTemco = LEN_STATE;
   \                     ??temcoUartCback_14:
   \   0000BE   90....       MOV     DPTR,#stateTemco
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   02....       LJMP    ??temcoUartCback_2 & 0xFFFF
    193                    break;
    194                    
    195                  case LEN_STATE:
    196                    len_lo = ch;
   \                     ??temcoUartCback_7:
   \   0000C6   85..82       MOV     DPL,?XSP + 0
   \   0000C9   85..83       MOV     DPH,?XSP + 1
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   90....       MOV     DPTR,#len_lo
   \   0000D0   F0           MOVX    @DPTR,A
    197                    cmdLen = len_lo*2+3;
   \   0000D1   C3           CLR     C
   \   0000D2   33           RLC     A
   \   0000D3   2403         ADD     A,#0x3
   \   0000D5   12....       LCALL   ?Subroutine2 & 0xFFFF
    198                  //  pMsgTemco = osal_mem_alloc(cmdLen+6);
    199                    isAlloc = TRUE;
    200                 //   if(pMsgTemco)
    201                    {
    202                      pMsgTemco[0] = head;
    203                      pMsgTemco[1] = cmd;
    204                      pMsgTemco[2] = modbusId_hi;
   \                     ??CrossCallReturnLabel_2:
   \   0000D8   90....       MOV     DPTR,#modbusId_hi
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   90....       MOV     DPTR,#pMsgTemco + 2
   \   0000DF   F0           MOVX    @DPTR,A
    205                      pMsgTemco[3] = modbusId_lo;
   \   0000E0   90....       MOV     DPTR,#modbusId_lo
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   90....       MOV     DPTR,#pMsgTemco + 3
   \   0000E7   F0           MOVX    @DPTR,A
    206                      pMsgTemco[4] = len_hi;
   \   0000E8   90....       MOV     DPTR,#len_hi
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   90....       MOV     DPTR,#pMsgTemco + 4
   \   0000EF   F0           MOVX    @DPTR,A
    207                      pMsgTemco[5] = len_lo;
   \   0000F0   90....       MOV     DPTR,#len_lo
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   90....       MOV     DPTR,#pMsgTemco + 5
    208                    }
   \                     ??temcoUartCback_15:
   \   0000F7   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    209                    stateTemco = DATA_STATE;
   \                     ??CrossCallReturnLabel_27:
   \   0000FA   7402         MOV     A,#0x2
   \   0000FC   02....       LJMP    ??temcoUartCback_2 & 0xFFFF
    210                    break;
    211                  
    212                  case DATA_STATE:
    213                    if(cmd == MODBUS_MULTI_WRITE)
   \                     ??temcoUartCback_6:
   \   0000FF   90....       MOV     DPTR,#cmd
   \   000102   E0           MOVX    A,@DPTR
   \   000103   6410         XRL     A,#0x10
   \   000105   7004         JNZ     ??temcoUartCback_16
    214                      headLen = 6;
   \   000107   7F06         MOV     R7,#0x6
   \   000109   8002         SJMP    ??temcoUartCback_17
    215                    else
    216                      headLen = 2;
   \                     ??temcoUartCback_16:
   \   00010B   7F02         MOV     R7,#0x2
    217                    pMsgTemco[headLen+tempDataLenTemco++] = ch;
   \                     ??temcoUartCback_17:
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C0E0         PUSH    A
   \   000116   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000119   D0E0         POP     A
   \   00011B   12....       LCALL   ?Subroutine1 & 0xFFFF
    218                    bytesInRxBuffer = Hal_UART_RxBufLen(port);
    219                    if(bytesInRxBuffer <= cmdLen - tempDataLenTemco)
   \                     ??CrossCallReturnLabel_0:
   \   00011E   4005         JC      ??temcoUartCback_18
    220                    {
    221                      HalUARTRead(port, &pMsgTemco[headLen+tempDataLenTemco], bytesInRxBuffer);
   \   000120                ; Setup parameters for call to function HalUARTRead
   \   000120   12....       LCALL   ?Subroutine6 & 0xFFFF
    222                      tempDataLenTemco += bytesInRxBuffer;
    223                    }
   \                     ??CrossCallReturnLabel_8:
   \   000123   8003         SJMP    ??CrossCallReturnLabel_6
    224                    else
    225                    {
    226                      HalUARTRead(port, &pMsgTemco[headLen+tempDataLenTemco], cmdLen - tempDataLenTemco);
   \                     ??temcoUartCback_18:
   \   000125   12....       LCALL   ?Subroutine5 & 0xFFFF
    227                      tempDataLenTemco += (cmdLen - tempDataLenTemco);
    228                    }
   \                     ??CrossCallReturnLabel_6:
   \   000128   12....       LCALL   ?Subroutine4 & 0xFFFF
    229                    
    230                    if( tempDataLenTemco == cmdLen)
   \                     ??CrossCallReturnLabel_4:
   \   00012B   6003         JZ      $+5
   \   00012D   02....       LJMP    ??temcoUartCback_0 & 0xFFFF
    231                    {
    232                      stateTemco = HEAD_STATE;
   \   000130   90....       MOV     DPTR,#stateTemco
   \   000133   E4           CLR     A
   \   000134   F0           MOVX    @DPTR,A
    233                      modbus_uart_data_process( pMsgTemco, cmdLen+headLen);
   \   000135                ; Setup parameters for call to function modbus_uart_data_process
   \   000135   12....       LCALL   ?Subroutine8 & 0xFFFF
    234                 //     osal_mem_free(pMsgTemco);
    235                      haveMsg = FALSE;
   \                     ??CrossCallReturnLabel_12:
   \   000138   90....       MOV     DPTR,#haveMsg
   \                     ??temcoUartCback_19:
   \   00013B   E4           CLR     A
   \   00013C   02....       LJMP    ??temcoUartCback_2 & 0xFFFF
    236                    }
    237                    break;
    238                    
    239                  default:
    240                    break;
    241                }
    242              }
    243              else  // Router type device
    244              {
    245                uint16 coord_addr = 0; // Coordinater address
    246                switch(stateTemco)
   \                     ??temcoUartCback_4:
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   600F         JZ      ??temcoUartCback_20
   \   000142   14           DEC     A
   \   000143   6014         JZ      ??temcoUartCback_21
   \   000145   14           DEC     A
   \   000146   6058         JZ      ??temcoUartCback_22
   \   000148   14           DEC     A
   \   000149   7003         JNZ     $+5
   \   00014B   02....       LJMP    ??temcoUartCback_23 & 0xFFFF
   \   00014E   02....       LJMP    ??temcoUartCback_0 & 0xFFFF
    247                {
    248                  case HEAD_STATE:
    249                    head = ch;
   \                     ??temcoUartCback_20:
   \   000151   12....       LCALL   ?Subroutine3 & 0xFFFF
    250                    stateTemco = CMD_STATE;
   \                     ??CrossCallReturnLabel_23:
   \   000154   7401         MOV     A,#0x1
   \   000156   02....       LJMP    ??temcoUartCback_2 & 0xFFFF
    251                //    haveMsg = TRUE;
    252               //     osal_start_timerEx( temcoTaskId, RESET_STATE, RESET_STATE_TIMEOUT);
    253                    break;
    254                    
    255                  case CMD_STATE:
    256                    cmd = ch;
   \                     ??temcoUartCback_21:
   \   000159   12....       LCALL   ?Subroutine9 & 0xFFFF
    257                    tempDataLenTemco = 0;
    258                    if( head == modbus_id) // for itself
   \                     ??CrossCallReturnLabel_15:
   \   00015C   90....       MOV     DPTR,#head
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F8           MOV     R0,A
   \   000161   90....       MOV     DPTR,#modbus_id
   \   000164   E0           MOVX    A,@DPTR
   \   000165   68           XRL     A,R0
   \   000166   7007         JNZ     ??temcoUartCback_24
    259                    {
    260                      cmdLen = 6;
   \   000168   90....       MOV     DPTR,#cmdLen
   \   00016B   7406         MOV     A,#0x6
   \   00016D   8088         SJMP    ??temcoUartCback_15
    261                      stateTemco = DATA_STATE;
    262                    }
    263                    else
    264                    {
    265                      if( cmd == MODBUS_SINGLE_READ )
   \                     ??temcoUartCback_24:
   \   00016F   90....       MOV     DPTR,#cmd
   \   000172   E0           MOVX    A,@DPTR
   \   000173   6403         XRL     A,#0x3
   \   000175   7003         JNZ     $+5
   \   000177   02....       LJMP    ??temcoUartCback_14 & 0xFFFF
    266                      {
    267                        stateTemco = LEN_STATE;
    268                      }
    269                      else if( (cmd == MODBUS_SCAN_CMD) || (cmd == MODBUS_SINGLE_WRITE) || (cmd == MODBUS_MULTI_WRITE))
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   6419         XRL     A,#0x19
   \   00017D   6015         JZ      ??temcoUartCback_25
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   6406         XRL     A,#0x6
   \   000182   6005         JZ      ??temcoUartCback_12
   \   000184   E0           MOVX    A,@DPTR
   \   000185   6410         XRL     A,#0x10
   \   000187   7012         JNZ     ??temcoUartCback_26
   \                     ??temcoUartCback_12:
   \   000189   90....       MOV     DPTR,#cmdLen
   \   00018C   7406         MOV     A,#0x6
   \                     ??temcoUartCback_13:
   \   00018E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000191   02....       LJMP    ??temcoUartCback_15 & 0xFFFF
    270                      {
    271                        if( cmd == MODBUS_SCAN_CMD)
    272                          cmdLen = 7;
   \                     ??temcoUartCback_25:
   \   000194   90....       MOV     DPTR,#cmdLen
   \   000197   7407         MOV     A,#0x7
   \   000199   80F3         SJMP    ??temcoUartCback_13
    273                        else if( (cmd == MODBUS_SINGLE_WRITE) || (cmd == MODBUS_MULTI_WRITE))
    274                          cmdLen = 6;
    275                     //   pMsgTemco = osal_mem_alloc(cmdLen + 2);
    276                        isAlloc = TRUE;
    277                     //   if(pMsgTemco)
    278                        {
    279                          pMsgTemco[0] = head;
    280                          pMsgTemco[1] = cmd;
    281                        }
    282                        stateTemco = DATA_STATE;
    283                      }
    284                      else
    285                        stateTemco = HEAD_STATE;
   \                     ??temcoUartCback_26:
   \   00019B   90....       MOV     DPTR,#stateTemco
   \   00019E   809B         SJMP    ??temcoUartCback_19
    286                    }
    287                    break;
    288                    
    289                  case DATA_STATE:
    290                    if(cmd == MODBUS_SINGLE_READ)
   \                     ??temcoUartCback_22:
   \   0001A0   90....       MOV     DPTR,#cmd
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   6403         XRL     A,#0x3
   \   0001A6   7004         JNZ     ??temcoUartCback_27
    291                      headLen = 3;
   \   0001A8   7F03         MOV     R7,#0x3
   \   0001AA   8002         SJMP    ??temcoUartCback_28
    292                    else
    293                      headLen = 2;
   \                     ??temcoUartCback_27:
   \   0001AC   7F02         MOV     R7,#0x2
    294                    pMsgTemco[headLen+tempDataLenTemco++] = ch;
   \                     ??temcoUartCback_28:
   \   0001AE   85..82       MOV     DPL,?XSP + 0
   \   0001B1   85..83       MOV     DPH,?XSP + 1
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   C0E0         PUSH    A
   \   0001B7   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001BA   D0E0         POP     A
   \   0001BC   12....       LCALL   ?Subroutine1 & 0xFFFF
    295                    bytesInRxBuffer = Hal_UART_RxBufLen(port);
    296                    if(bytesInRxBuffer <= cmdLen - tempDataLenTemco)
   \                     ??CrossCallReturnLabel_1:
   \   0001BF   4005         JC      ??temcoUartCback_29
    297                    {
    298                      HalUARTRead(port, &pMsgTemco[headLen+tempDataLenTemco], bytesInRxBuffer);
   \   0001C1                ; Setup parameters for call to function HalUARTRead
   \   0001C1   12....       LCALL   ?Subroutine6 & 0xFFFF
    299                      tempDataLenTemco += bytesInRxBuffer;
    300                    }
   \                     ??CrossCallReturnLabel_9:
   \   0001C4   8003         SJMP    ??CrossCallReturnLabel_7
    301                    else
    302                    {
    303                      HalUARTRead(port, &pMsgTemco[headLen+tempDataLenTemco], cmdLen - tempDataLenTemco);
   \                     ??temcoUartCback_29:
   \   0001C6   12....       LCALL   ?Subroutine5 & 0xFFFF
    304                      tempDataLenTemco += (cmdLen - tempDataLenTemco);
    305                    }
   \                     ??CrossCallReturnLabel_7:
   \   0001C9   12....       LCALL   ?Subroutine4 & 0xFFFF
    306                    
    307                    if( tempDataLenTemco == cmdLen)
   \                     ??CrossCallReturnLabel_5:
   \   0001CC   6003         JZ      $+5
   \   0001CE   02....       LJMP    ??temcoUartCback_0 & 0xFFFF
    308                    {
    309                      stateTemco = HEAD_STATE;
   \   0001D1   90....       MOV     DPTR,#stateTemco
   \   0001D4   E4           CLR     A
   \   0001D5   F0           MOVX    @DPTR,A
    310                      if( (head == 0xff) && (cmd == 0x03) && (cmdLen == 0x06))  // Use while asking TSTAT ID
   \   0001D6   90....       MOV     DPTR,#head
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   F4           CPL     A
   \   0001DB   7022         JNZ     ??temcoUartCback_30
   \   0001DD   90....       MOV     DPTR,#cmd
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   6403         XRL     A,#0x3
   \   0001E3   7024         JNZ     ??temcoUartCback_31
   \   0001E5   90....       MOV     DPTR,#cmdLen
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   6406         XRL     A,#0x6
   \   0001EB   701C         JNZ     ??temcoUartCback_31
    311                      {
    312                        // store the tstat id
    313                        tstat_id = pMsgTemco[4];
   \   0001ED   90....       MOV     DPTR,#pMsgTemco + 4
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   90....       MOV     DPTR,#tstat_id
   \   0001F4   F0           MOVX    @DPTR,A
    314                        product_id = pMsgTemco[6];
   \   0001F5   90....       MOV     DPTR,#pMsgTemco + 6
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   90....       MOV     DPTR,#product_id
   \   0001FC   F0           MOVX    @DPTR,A
   \   0001FD   8058         SJMP    ??temcoUartCback_32
    315                      }
    316                      else
    317                      {
    318                        if( head == 23)
   \                     ??temcoUartCback_30:
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   6417         XRL     A,#0x17
   \   000202   7005         JNZ     ??temcoUartCback_31
    319                          modbus_uart_data_process(pMsgTemco, cmdLen+headLen);
   \   000204                ; Setup parameters for call to function modbus_uart_data_process
   \   000204   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000207   804E         SJMP    ??temcoUartCback_32
    320                        else
    321                        {
    322                          if(modbusDataLength>0)
   \                     ??temcoUartCback_31:
   \   000209   90....       MOV     DPTR,#modbusDataLength
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   600F         JZ      ??temcoUartCback_33
    323                            modbus_insert_msg(pMsgTemco, cmdLen+headLen);
   \   00020F                ; Setup parameters for call to function modbus_insert_msg
   \   00020F   90....       MOV     DPTR,#cmdLen
   \   000212   E0           MOVX    A,@DPTR
   \   000213   2F           ADD     A,R7
   \   000214   F9           MOV     R1,A
   \   000215   7A..         MOV     R2,#pMsgTemco & 0xff
   \   000217   7B..         MOV     R3,#(pMsgTemco >> 8) & 0xff
   \   000219   12....       LCALL   ??modbus_insert_msg?relay
   \   00021C   8039         SJMP    ??temcoUartCback_32
    324                          else
    325                            zb_SendDataRequest( coord_addr, TEMCO_CLUSTERID, cmdLen+headLen, pMsgTemco,
    326                                              0, AF_ACK_REQUEST, 0);
   \                     ??temcoUartCback_33:
   \   00021E                ; Setup parameters for call to function zb_SendDataRequest
   \   00021E   75..00       MOV     ?V0 + 0,#0x0
   \   000221   78..         MOV     R0,#?V0 + 0
   \   000223   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000226   75..10       MOV     ?V0 + 0,#0x10
   \   000229   78..         MOV     R0,#?V0 + 0
   \   00022B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022E   75..00       MOV     ?V0 + 0,#0x0
   \   000231   78..         MOV     R0,#?V0 + 0
   \   000233   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000236   75....       MOV     ?V0 + 0,#pMsgTemco & 0xff
   \   000239   75....       MOV     ?V0 + 1,#(pMsgTemco >> 8) & 0xff
   \   00023C   78..         MOV     R0,#?V0 + 0
   \   00023E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000241   90....       MOV     DPTR,#cmdLen
   \   000244   E0           MOVX    A,@DPTR
   \   000245   2F           ADD     A,R7
   \   000246   F9           MOV     R1,A
   \   000247   7C02         MOV     R4,#0x2
   \   000249   7D00         MOV     R5,#0x0
   \   00024B   7A00         MOV     R2,#0x0
   \   00024D   7B00         MOV     R3,#0x0
   \   00024F   12....       LCALL   ??zb_SendDataRequest?relay
   \   000252   7405         MOV     A,#0x5
   \   000254   12....       LCALL   ?DEALLOC_XSTACK8
    327                        }
    328                      }
    329                      haveMsg = FALSE;
   \                     ??temcoUartCback_32:
   \   000257   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    330                   //   osal_mem_free(pMsgTemco);
    331                    }
    332                    break;
    333                    
    334                  case LEN_STATE:
    335                    cmdLen = ch +2;
   \                     ??temcoUartCback_23:
   \   00025A   85..82       MOV     DPL,?XSP + 0
   \   00025D   85..83       MOV     DPH,?XSP + 1
   \   000260   E0           MOVX    A,@DPTR
   \   000261   2402         ADD     A,#0x2
   \   000263   12....       LCALL   ?Subroutine2 & 0xFFFF
    336                 //   pMsgTemco = osal_mem_alloc(cmdLen + 3);
    337                    isAlloc = TRUE;
    338                 //   if(pMsgTemco)
    339                    {
    340                      pMsgTemco[0] = head;
    341                      pMsgTemco[1] = cmd;
    342                      pMsgTemco[2] = ch;
   \                     ??CrossCallReturnLabel_3:
   \   000266   85..82       MOV     DPL,?XSP + 0
   \   000269   85..83       MOV     DPH,?XSP + 1
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   90....       MOV     DPTR,#pMsgTemco + 2
   \   000270   02....       LJMP    ??temcoUartCback_15 & 0xFFFF
    343                    }
    344                    stateTemco = DATA_STATE;
    345                    break;
    346                    
    347                  default:
    348                    break;
    349                }
    350              }
    351            }
    352            
    353            
    354          }
   \                     ??temcoUartCback_3:
   \   000273   7401         MOV     A,#0x1
   \   000275   12....       LCALL   ?DEALLOC_XSTACK8
   \   000278   7F04         MOV     R7,#0x4
   \   00027A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   90....       MOV     DPTR,#cmd
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   90....       MOV     DPTR,#tempDataLenTemco
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#cmdLen
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2F           ADD     A,R7
   \   000005   F9           MOV     R1,A
   \   000006   7A..         MOV     R2,#pMsgTemco & 0xff
   \   000008   7B..         MOV     R3,#(pMsgTemco >> 8) & 0xff
   \   00000A   12....       LCALL   ??modbus_uart_data_process?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8F..         MOV     ?V0 + 0,R7
   \   000002   90....       MOV     DPTR,#tempDataLenTemco
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F8           MOV     R0,A
   \   000007   E5..         MOV     A,?V0 + 0
   \   000009   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00000C   F582         MOV     DPL,A
   \   00000E   74..         MOV     A,#(pMsgTemco >> 8) & 0xff
   \   000010   39           ADDC    A,R1
   \   000011   F583         MOV     DPH,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AC..         MOV     R4,?V0 + 2
   \   000002   7D00         MOV     R5,#0x0
   \   000004   8F..         MOV     ?V0 + 2,R7
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   E5..         MOV     A,?V0 + 2
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00000D   90....       MOV     DPTR,#tempDataLenTemco
   \   000010   E0           MOVX    A,@DPTR
   \   000011   25..         ADD     A,?V0 + 0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                ; Setup parameters for call to function HalUARTRead
   \   000002                ; Setup parameters for call to function HalUARTRead
   \   000002   90....       MOV     DPTR,#cmdLen
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C3           CLR     C
   \   000007   98           SUBB    A,R0
   \   000008   FC           MOV     R4,A
   \   000009   95E0         SUBB    A,0xE0 /* A   */
   \   00000B   FD           MOV     R5,A
   \   00000C   8F..         MOV     ?V0 + 0,R7
   \   00000E   E5..         MOV     A,?V0 + 0
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000013   90....       MOV     DPTR,#cmdLen
   \   000016   E0           MOVX    A,@DPTR
   \   000017   90....       MOV     DPTR,#tempDataLenTemco
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   FA           MOV     R2,A
   \   000004   74..         MOV     A,#(pMsgTemco >> 8) & 0xff
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   EE           MOV     A,R6
   \   000009   F9           MOV     R1,A
   \   00000A   12....       LCALL   ??HalUARTRead?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   28           ADD     A,R0
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#pMsgTemco & 0xff
   \   000008   28           ADD     A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   90....       MOV     DPTR,#cmdLen
   \   000006   E0           MOVX    A,@DPTR
   \   000007   68           XRL     A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   90....       MOV     DPTR,#head
   \   00000A                REQUIRE ??Subroutine13_0
   \   00000A                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#cmdLen
   \   000003   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#isAlloc
   \   000004   7401         MOV     A,#0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   90....       MOV     DPTR,#head
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   90....       MOV     DPTR,#pMsgTemco
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   90....       MOV     DPTR,#cmd
   \   000012   E0           MOVX    A,@DPTR
   \   000013   90....       MOV     DPTR,#pMsgTemco + 1
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#tempDataLenTemco
   \   000004   E0           MOVX    A,@DPTR
   \   000005   04           INC     A
   \   000006   F0           MOVX    @DPTR,A
   \   000007                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000007                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00000C   EA           MOV     A,R2
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   90....       MOV     DPTR,#cmdLen
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   90....       MOV     DPTR,#tempDataLenTemco
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FA           MOV     R2,A
   \   000019   E8           MOV     A,R0
   \   00001A   C3           CLR     C
   \   00001B   9A           SUBB    A,R2
   \   00001C   F8           MOV     R0,A
   \   00001D   95E0         SUBB    A,0xE0 /* A   */
   \   00001F   F9           MOV     R1,A
   \   000020   85....       MOV     ?V0 + 2,?V0 + 0
   \   000023   C3           CLR     C
   \   000024   E8           MOV     A,R0
   \   000025   95..         SUBB    A,?V0 + 2
   \   000027   E9           MOV     A,R1
   \   000028   9400         SUBB    A,#0x0
   \   00002A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002C   65D0         XRL     A,PSW
   \   00002E   33           RLC     A
   \   00002F   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??temcoTaskInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    temcoTaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??temcoEventLoop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    temcoEventLoop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??temcoInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    temcoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??temcoUartCback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    temcoUartCback

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     temcoEventLoop                    0      0      9
       -> temcoInit                    0      0     18
       -> osal_start_timerEx           0      0     18
     temcoInit                         2      0     38
       -> HalUARTOpen                  4      0     58
       -> MT_UartRegisterTaskID        4      0     58
       -> MT_Init                      4      0     58
     temcoTaskInit                     0      0      9
       -> osal_set_event               0      0     18
       -> osal_set_event               0      0     18
     temcoUartCback                    1      0     18
       -> Hal_UART_RxBufLen            0      0     26
       -> HalUARTRead                  0      0     26
       -> Hal_UART_RxBufLen            0      0     26
       -> HalUARTRead                  0      0     26
       -> HalUARTRead                  0      0     26
       -> modbus_uart_data_process     0      0     26
       -> Hal_UART_RxBufLen            0      0     26
       -> HalUARTRead                  0      0     26
       -> HalUARTRead                  0      0     26
       -> modbus_uart_data_process     0      0     26
       -> modbus_insert_msg            0      0     26
       -> zb_SendDataRequest           0      0     36


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     stateTemco                1
     pMsgTemco               254
     head                      1
     cmd                       1
     tempDataLenTemco          1
     cmdLen                    1
     isAlloc                   1
     haveMsg                   1
     temcoTaskInit            29
     ?Subroutine0              5
     temcoEventLoop           95
     ??Subroutine13_0          5
     temcoInit               148
     modbusId_hi               1
     modbusId_lo               1
     len_hi                    1
     len_lo                    1
     temcoUartCback          637
     ?Subroutine9             17
     ?Subroutine8             14
     ?Subroutine7             20
     ?Subroutine6             20
     ?Subroutine5             27
     ?Subroutine11            14
     ?Subroutine12            10
     ?Subroutine4              9
     ?Subroutine3             10
     ?Subroutine2              8
     ?Subroutine10            23
     ?Subroutine1             48
     ??temcoTaskInit?relay     6
     ??temcoEventLoop?relay    6
     ??temcoInit?relay         6
     ??temcoUartCback?relay    6

 
 1 139 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
   265 bytes in segment XDATA_Z
 
 1 163 bytes of CODE  memory
   265 bytes of XDATA memory

Errors: none
Warnings: none
