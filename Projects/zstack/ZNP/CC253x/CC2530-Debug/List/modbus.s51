///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        25/Mar/2014  17:38:00 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Te /
//                          mcoZNP\Projects\zstack\ZNP\Source\modbus.c        /
//    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\Source\z /
//                          np.cfg" (-DMAC_CFG_APP_PENDING_QUEUE=TRUE         /
//                          "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR  /
//                          | DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)"  /
//                          -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE -DZIGBEEPRO  /
//                          -DZIGBEE_FRAGMENTATION -DOSAL_CLOCK               /
//                          -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE -DNV_INIT  /
//                          -DNUM_DISC_ATTEMPTS=0) -f "C:\Documents and       /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg" (-DZIGBEEPRO -DSECURE=0                       /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00001000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "C:\Documents and      /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" /
//                           "C:\Documents and Settings\Administrator\×ÀÃæ\1\ /
//                          TemcoZNP\Projects\zstack\ZNP\Source\modbus.c" -D  /
//                          xPOWER_SAVING -D NV_RESTORE -lC "C:\Documents     /
//                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projec /
//                          ts\zstack\ZNP\CC253x\CC2530-Debug\List\" -lA      /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\T /
//                          emcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\L /
//                          ist\" --diag_suppress Pe001,Pa010 -o              /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\T /
//                          emcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\O /
//                          bj\" -e --no_code_motion --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\" -I "C:\Documents and           /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\Source\" -I "C:\Documents and    /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\Source\" -I "C:\Documents     /
//                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projec /
//                          ts\zstack\ZNP\CC253x\..\..\SE\Source\" -I         /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\T /
//                          emcoZNP\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI /
//                          2530ZNP\" -I "C:\Documents and                    /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\hal\inclu /
//                          de\" -I "C:\Documents and                         /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\hal\targe /
//                          t\CC2530ZNP\" -I "C:\Documents and                /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\mac\inclu /
//                          de\" -I "C:\Documents and                         /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\mac\high_ /
//                          level\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\mac\low_l /
//                          evel\srf04\" -I "C:\Documents and                 /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\mac\low_l /
//                          evel\srf04\single_chip\" -I "C:\Documents and     /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\mt\" -I   /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\T /
//                          emcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Co /
//                          mponents\osal\include\" -I "C:\Documents and      /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\services\ /
//                          saddr\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\services\ /
//                          sdata\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\stack\af\ /
//                          " -I "C:\Documents and Settings\Administrator\×ÀÃ /
//                          æ\1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\ /
//                          ..\Components\stack\nwk\" -I "C:\Documents and    /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\stack\sap /
//                          i\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\stack\sec /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\stack\sys /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\stack\zcl /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\stack\zdo /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\z /
//                          stack\ZNP\CC253x\..\..\..\..\Components\zmac\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\.. /
//                          \Components\zmac\f8w\" -Ohz --require_prototypes  /
//    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Te /
//                          mcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Li /
//                          st\modbus.s51                                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME modbus

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CRC16_byte?relay
        FUNCTION ??CRC16_byte?relay,0203H
        PUBLIC ??initCRC16?relay
        FUNCTION ??initCRC16?relay,0203H
        PUBLIC ??modbus_insert_msg?relay
        FUNCTION ??modbus_insert_msg?relay,0203H
        PUBLIC ??modbus_multi_write?relay
        FUNCTION ??modbus_multi_write?relay,0203H
        FUNCTION ??modbus_process_msg?relay,0203H
        FUNCTION ??modbus_send_byte?relay,0203H
        PUBLIC ??modbus_single_write?relay
        FUNCTION ??modbus_single_write?relay,0203H
        PUBLIC ??modbus_uart_data_process?relay
        FUNCTION ??modbus_uart_data_process?relay,0203H
        PUBLIC CRC16_byte
        FUNCTION CRC16_byte,0203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        PUBLIC CRChi
        PUBLIC CRClo
        PUBLIC auchCRCHi
        PUBLIC auchCRCLo
        PUBLIC firstAddr
        PUBLIC initCRC16
        FUNCTION initCRC16,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC modbusDataLength
        PUBLIC modbusStartAddr
        PUBLIC modbus_id
        PUBLIC modbus_insert_msg
        FUNCTION modbus_insert_msg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC modbus_multi_write
        FUNCTION modbus_multi_write,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION modbus_process_msg,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 37, STACK
        FUNCTION modbus_send_byte,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC modbus_single_write
        FUNCTION modbus_single_write,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC modbus_uart_data_process
        FUNCTION modbus_uart_data_process,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC restroe_factory_setting
        PUBLIC ttt
        PUBLIC zSoftwareRev
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTWrite        SYMBOL "HalUARTWrite"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_nv_write       SYMBOL "osal_nv_write"
restore_factory_setting SYMBOL "restore_factory_setting"
zgPreconfigKeyInit  SYMBOL "zgPreconfigKeyInit"
ZDSecMgrInitNVKeyTables SYMBOL "ZDSecMgrInitNVKeyTables"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??ZDSecMgrInitNVKeyTables?relay SYMBOL "?relay", ZDSecMgrInitNVKeyTables
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??restore_factory_setting?relay SYMBOL "?relay", restore_factory_setting
??zgPreconfigKeyInit?relay SYMBOL "?relay", zgPreconfigKeyInit
CRC16_byte          SYMBOL "CRC16_byte"
??CRC16_byte?relay  SYMBOL "?relay", CRC16_byte
initCRC16           SYMBOL "initCRC16"
??initCRC16?relay   SYMBOL "?relay", initCRC16
modbus_insert_msg   SYMBOL "modbus_insert_msg"
??modbus_insert_msg?relay SYMBOL "?relay", modbus_insert_msg
modbus_multi_write  SYMBOL "modbus_multi_write"
??modbus_multi_write?relay SYMBOL "?relay", modbus_multi_write
modbus_single_write SYMBOL "modbus_single_write"
??modbus_single_write?relay SYMBOL "?relay", modbus_single_write
modbus_uart_data_process SYMBOL "modbus_uart_data_process"
??modbus_uart_data_process?relay SYMBOL "?relay", modbus_uart_data_process

        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN restore_factory_setting
        FUNCTION restore_factory_setting,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPreconfigKeyInit
        FUNCTION zgPreconfigKeyInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInitNVKeyTables
        FUNCTION ZDSecMgrInitNVKeyTables,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??ZDSecMgrInitNVKeyTables?relay
        FUNCTION ??ZDSecMgrInitNVKeyTables?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??restore_factory_setting?relay
        FUNCTION ??restore_factory_setting?relay,00H
        EXTERN ??zgPreconfigKeyInit?relay
        FUNCTION ??zgPreconfigKeyInit?relay,00H
        EXTERN _NIB
        EXTERN aExtendedAddress
        EXTERN defaultKey
        EXTERN numSignalStren
        EXTERN pSignalStren
        EXTERN temcoApp_TransID
        EXTERN temco_epDesc
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDeviceLogicalType

// C:\Documents and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zstack\ZNP\Source\modbus.c
//    1 /*********************************************************************
//    2  * INCLUDE
//    3  */
//    4 #include "modbus.h"
//    5 #include "hal_defs.h"
//    6 #include "hal_uart.h"
//    7 #include "AF.h"
//    8 #include "OnBoard.h"
//    9 #include "OSAL_Clock.h"
//   10 #include "OSAL_Nv.h"
//   11 
//   12 #include "temcoAPI.h"
//   13 /*********************************************************************
//   14  * LOCAL VARIABLES
//   15  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//   16 uint8 ttt[6] = {11, 22, 33, 44, 55, 66};
ttt:
        DATA8
        DS 6
        REQUIRE `?<Initializer for ttt>`
        REQUIRE __INIT_XDATA_I
//   17 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   18 uint8 const auchCRCHi[256] = {
auchCRCHi:
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
        DB 1
        DB 192
        DB 128
        DB 65
        DB 1
        DB 192
        DB 128
        DB 65
        DB 0
        DB 193
        DB 129
        DB 64
//   19 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//   20 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   21 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   22 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//   23 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   24 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//   25 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//   26 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   27 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   28 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//   29 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//   30 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   31 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//   32 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   33 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//   34 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
//   35 } ;	
//   36 	/* Table of CRC values for high Corder byte */
//   37 
//   38 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   39 uint8 const auchCRCLo[256] = {
auchCRCLo:
        DB 0
        DB 192
        DB 193
        DB 1
        DB 195
        DB 3
        DB 2
        DB 194
        DB 198
        DB 6
        DB 7
        DB 199
        DB 5
        DB 197
        DB 196
        DB 4
        DB 204
        DB 12
        DB 13
        DB 205
        DB 15
        DB 207
        DB 206
        DB 14
        DB 10
        DB 202
        DB 203
        DB 11
        DB 201
        DB 9
        DB 8
        DB 200
        DB 216
        DB 24
        DB 25
        DB 217
        DB 27
        DB 219
        DB 218
        DB 26
        DB 30
        DB 222
        DB 223
        DB 31
        DB 221
        DB 29
        DB 28
        DB 220
        DB 20
        DB 212
        DB 213
        DB 21
        DB 215
        DB 23
        DB 22
        DB 214
        DB 210
        DB 18
        DB 19
        DB 211
        DB 17
        DB 209
        DB 208
        DB 16
        DB 240
        DB 48
        DB 49
        DB 241
        DB 51
        DB 243
        DB 242
        DB 50
        DB 54
        DB 246
        DB 247
        DB 55
        DB 245
        DB 53
        DB 52
        DB 244
        DB 60
        DB 252
        DB 253
        DB 61
        DB 255
        DB 63
        DB 62
        DB 254
        DB 250
        DB 58
        DB 59
        DB 251
        DB 57
        DB 249
        DB 248
        DB 56
        DB 40
        DB 232
        DB 233
        DB 41
        DB 235
        DB 43
        DB 42
        DB 234
        DB 238
        DB 46
        DB 47
        DB 239
        DB 45
        DB 237
        DB 236
        DB 44
        DB 228
        DB 36
        DB 37
        DB 229
        DB 39
        DB 231
        DB 230
        DB 38
        DB 34
        DB 226
        DB 227
        DB 35
        DB 225
        DB 33
        DB 32
        DB 224
        DB 160
        DB 96
        DB 97
        DB 161
        DB 99
        DB 163
        DB 162
        DB 98
        DB 102
        DB 166
        DB 167
        DB 103
        DB 165
        DB 101
        DB 100
        DB 164
        DB 108
        DB 172
        DB 173
        DB 109
        DB 175
        DB 111
        DB 110
        DB 174
        DB 170
        DB 106
        DB 107
        DB 171
        DB 105
        DB 169
        DB 168
        DB 104
        DB 120
        DB 184
        DB 185
        DB 121
        DB 187
        DB 123
        DB 122
        DB 186
        DB 190
        DB 126
        DB 127
        DB 191
        DB 125
        DB 189
        DB 188
        DB 124
        DB 180
        DB 116
        DB 117
        DB 181
        DB 119
        DB 183
        DB 182
        DB 118
        DB 114
        DB 178
        DB 179
        DB 115
        DB 177
        DB 113
        DB 112
        DB 176
        DB 80
        DB 144
        DB 145
        DB 81
        DB 147
        DB 83
        DB 82
        DB 146
        DB 150
        DB 86
        DB 87
        DB 151
        DB 85
        DB 149
        DB 148
        DB 84
        DB 156
        DB 92
        DB 93
        DB 157
        DB 95
        DB 159
        DB 158
        DB 94
        DB 90
        DB 154
        DB 155
        DB 91
        DB 153
        DB 89
        DB 88
        DB 152
        DB 136
        DB 72
        DB 73
        DB 137
        DB 75
        DB 139
        DB 138
        DB 74
        DB 78
        DB 142
        DB 143
        DB 79
        DB 141
        DB 77
        DB 76
        DB 140
        DB 68
        DB 132
        DB 133
        DB 69
        DB 135
        DB 71
        DB 70
        DB 134
        DB 130
        DB 66
        DB 67
        DB 131
        DB 65
        DB 129
        DB 128
        DB 64
//   40 
//   41 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
//   42 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
//   43 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
//   44 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
//   45 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
//   46 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
//   47 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
//   48 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
//   49 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
//   50 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
//   51 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
//   52 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
//   53 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
//   54 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
//   55 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
//   56 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
//   57 
//   58 } ;
//   59 
//   60 /*********************************************************************
//   61  * GLOBAL VARIABLES
//   62  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   63 uint8 CRClo, CRChi;
CRClo:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
CRChi:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   64 #if defined ( RFID_SUPPLY)
//   65 uint8 modbus_id = 254;
//   66 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//   67 uint8 modbus_id = 23;
modbus_id:
        DATA8
        DS 1
        REQUIRE `?<Initializer for modbus_id>`
        REQUIRE __INIT_XDATA_I
//   68 #endif

        RSEG XDATA_I:XDATA:NOROOT(0)
//   69 uint8 zSoftwareRev = 10;
zSoftwareRev:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zSoftwareRev>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   70 uint8 modbusDataLength = 0;
modbusDataLength:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   71 uint8 modbusStartAddr = 0;
modbusStartAddr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   72 uint8 firstAddr;
firstAddr:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   73 
//   74 #if defined ( RSSI_DISPLAY)
//   75   bool panId_send = FALSE;
//   76   uint8 rssi_send_hi, rssi_send_lo;
//   77   int8 modbus_rssi;
//   78 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   79 bool restroe_factory_setting = FALSE;
restroe_factory_setting:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   80 
//   81 /*********************************************************************
//   82  * LOCAL FUNCTIONS
//   83  */
//   84 // static uint16 CRC16( uint8 *puchMsg , uint8 usDataLen);
//   85 static void modbus_send_byte( uint8 byte, uint8 crc);
//   86 static bool check_data( uint8 *buf_com, uint8 len);
//   87 static void modbus_process_msg( uint8 *data_buffer, uint8 len);
//   88 
//   89 /*********************************************************************
//   90  * PUBLIC FUNCTIONS
//   91  */
//   92 void modbus_uart_data_process( uint8 *data_buffer, uint8 len);
//   93 
//   94 extern byte temcoApp_TransID;
//   95 extern endPointDesc_t temco_epDesc;
//   96 extern uint8 zgPreconfigKeyInit( uint8 setDefault );
//   97 extern void ZDSecMgrInitNVKeyTables(uint8 setDefault);
//   98 /*********************************************************************
//   99  * MAIN PROGRAM
//  100  */
//  101 
//  102 /******************************************************************************
//  103  * @fn      initCRC16
//  104  * 
//  105  * @brief   Initialize the 16 bit CRC variables
//  106  * 
//  107  * @param   none
//  108  * 
//  109  * @return  none
//  110  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  111 void initCRC16( void)
initCRC16:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function initCRC16
        CODE
//  112 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  113   CRClo = 0xff;
        MOV     DPTR,#CRClo
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  114   CRChi = 0xff;
        MOV     DPTR,#CRChi
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  115 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  116 /*
//  117 static uint16 CRC16( uint8 *puchMsg , uint8 usDataLen)
//  118 {
//  119   uint16 uchCRCHi = 0xff;
//  120   uint8 uchCRCLo = 0xff;
//  121   uint8 uIndex;
//  122   
//  123   while( usDataLen--)
//  124   {
//  125     uIndex = uchCRCHi ^ *puchMsg++ ; 
//  126     uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
//  127     uchCRCLo = auchCRCLo[uIndex] ;
//  128   }  
//  129   return ( uchCRCHi << 8 | uchCRCLo);
//  130 }
//  131 */
//  132 
//  133 /******************************************************************************
//  134  * @fn      CRC16_byte
//  135  * 
//  136  * @brief   Calculate the 16 bit CRC variables
//  137  * 
//  138  * @param   uint8 - the byte wanted to be calc
//  139  * 
//  140  * @return  none
//  141  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  142 void CRC16_byte( uint8 ch)
CRC16_byte:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function CRC16_byte
        CODE
//  143 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  144   uint8 uIndex;
//  145   
//  146   uIndex = CRChi ^ ch;
        MOV     DPTR,#CRChi
        MOVX    A,@DPTR
        XRL     A,R1
        MOV     R0,A
//  147   CRChi = CRClo ^ auchCRCHi[uIndex];
        MOV     DPL,R0
        MOV     R2,DPL
        MOV     A,#auchCRCHi & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(auchCRCHi >> 8) & 0xff
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_59:
        PUSH    DPL
        CFI CFA_SP SP+-6
        PUSH    DPH
        CFI CFA_SP SP+-7
        MOV     DPTR,#CRClo
        MOVX    A,@DPTR
        POP     DPH
        CFI CFA_SP SP+-6
        POP     DPL
        CFI CFA_SP SP+-5
        MOV     R0,A
        MOVX    A,@DPTR
        XRL     A,R0
        MOV     DPTR,#CRChi
        MOVX    @DPTR,A
//  148   CRClo = auchCRCLo[uIndex];
        MOV     A,#auchCRCLo & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(auchCRCLo >> 8) & 0xff
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX    A,@DPTR
        MOV     DPTR,#CRClo
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock2
//  149 }
//  150 
//  151 #if defined ( RSSI_DISPLAY)
//  152 void calcCRC16( uint8* data, uint8 len)
//  153 {
//  154   uint8 *pData = osal_mem_alloc( len);
//  155   if( pData)
//  156     osal_memcpy( pData, data, len);
//  157 
//  158   pData[rssi_send_hi] = 255;
//  159   pData[rssi_send_lo] = modbus_rssi;
//  160   initCRC16();
//  161   for( uint8 i = 0; i<(len-2); i++)
//  162   {
//  163     CRC16_byte(pData[i]);
//  164   }
//  165   pData[len-2] = CRChi;
//  166   pData[len-1] = CRClo;
//  167 
//  168   HalUARTWrite( 0, pData, len);
//  169   osal_mem_free( pData);
//  170 }
//  171 #endif
//  172 /******************************************************************************
//  173  * @fn      modbus_send_byte
//  174  * 
//  175  * @brief   Send one byte and calculate the crc byte
//  176  * 
//  177  * @param   uint8 - the byte wanted to be sent
//  178  *          uint8 - the crc flag, need to calculate or not
//  179  * 
//  180  * @return  none
//  181  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  182 static void modbus_send_byte( uint8 byte, uint8 crc)
modbus_send_byte:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function modbus_send_byte
        CODE
//  183 {
        FUNCALL modbus_send_byte, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_send_byte, CRC16_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     R6,A
//  184   HalUARTWrite( 0, &byte, 1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  185   if ( crc == CRC_NO)
        MOV     A,R6
        JNZ     ??modbus_send_byte_0
//  186     CRC16_byte(byte);
        ; Setup parameters for call to function CRC16_byte
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??CRC16_byte?relay
//  187 }
??modbus_send_byte_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  188 
//  189 /******************************************************************************
//  190  * @fn      modbus_uart_data_process
//  191  * 
//  192  * @brief   Process the message from UART
//  193  * 
//  194  * @param   uint8 - the pointer the buffer that to be process
//  195  *          uint8 - length
//  196  * 
//  197  * @return  none
//  198  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 void modbus_uart_data_process( uint8 *data_buffer, uint8 len)
modbus_uart_data_process:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function modbus_uart_data_process
        CODE
//  200 {
        FUNCALL modbus_uart_data_process, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_uart_data_process, modbus_process_msg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R6,A
//  201   afAddrType_t destAddr;
//  202   destAddr.addrMode = afAddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  203   destAddr.addr.shortAddr = 0xffff;                
//  204   destAddr.endPoint = 10;
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  205 
//  206   if( TRUE == check_data( data_buffer, len))
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??modbus_uart_data_process_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??modbus_uart_data_process_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      ??modbus_uart_data_process_0
//  207   {
//  208     initCRC16();
//  209     modbus_process_msg( data_buffer, len);
//  210   }
//  211   else
//  212   {
//  213     AF_DataRequest( &destAddr, &temco_epDesc,
//  214                      TEMCO_CLUSTERID,
//  215                      len,
//  216                      data_buffer,
//  217                      &temcoApp_TransID,
//  218                      AF_DISCV_ROUTE,
//  219                      AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#temcoApp_TransID & 0xff
        MOV     ?V0 + 1,#(temcoApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#temco_epDesc & 0xff
        MOV     R5,#(temco_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??modbus_uart_data_process_1
//  220   }
??modbus_uart_data_process_0:
        MOV     DPTR,#CRClo
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     DPTR,#CRChi
        MOVX    @DPTR,A
        ; Setup parameters for call to function modbus_process_msg
        LCALL   ??modbus_process_msg?relay
//  221 }
??modbus_uart_data_process_1:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  222 
//  223 /******************************************************************************
//  224  * @fn      check_data
//  225  * 
//  226  * @brief   Check message to confirm it's a modbus message
//  227  * 
//  228  * @param   uint8 - the pointer the buffer that to be checked
//  229  *          uint8 - length
//  230  * 
//  231  * @return  bool
//  232  */
//  233 
//  234 static bool check_data( uint8 *buf_com, uint8 len)
//  235 {
//  236   
//  237   if( ( buf_com[1] != MODBUS_SINGLE_READ) && (buf_com[1] != MODBUS_SINGLE_WRITE) && ( buf_com[1] != MODBUS_MULTI_WRITE))
//  238     return FALSE;
//  239   
//  240   return TRUE;
//  241 }
//  242 
//  243 /******************************************************************************
//  244  * @fn      modbus_setUtcTime
//  245  * 
//  246  * @brief   Set UTC Time
//  247  * 
//  248  * @param   uint8 - the pointer the buffer
//  249  * 
//  250  * @return  none
//  251  */
//  252 
//  253 
//  254 static void modbus_setUtcTime( uint8 *pBuf)
//  255 {
//  256   UTCTime utcSecs = 0;
//  257   UTCTimeStruct utc;
//  258   
//  259   utc.hour = pBuf[1];
//  260   utc.minutes = pBuf[3];
//  261   utc.seconds = pBuf[5];
//  262   utc.month = pBuf[7] - 1;
//  263   utc.day = pBuf[9] - 1;
//  264   utc.year = BUILD_UINT16( pBuf[11], pBuf[10]);
//  265   
//  266   if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
//  267         (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
//  268   {
//  269     if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
//  270     {
//  271       utcSecs = osal_ConvertUTCSecs( &utc );
//  272     }
//  273   }
//  274   
//  275   if( utcSecs)
//  276   {
//  277     osal_setClock( utcSecs );
//  278   }
//  279 }
//  280 
//  281 /******************************************************************************
//  282  * @fn      modbus_single_write
//  283  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  284 void modbus_single_write( uint8 *data_buffer, uint8 len)
modbus_single_write:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function modbus_single_write
        CODE
//  285 {
        FUNCALL modbus_single_write, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_single_write, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_single_write, restore_factory_setting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_single_write, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_single_write, restore_factory_setting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  286   uint8 address;
//  287   
//  288   address = BUILD_UINT16( data_buffer[3], data_buffer[2]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
//  289   
//  290   if( address == MODBUS_PANID)
        MOV     A,#0x15
        XRL     A,R0
        JNZ     ??modbus_single_write_0
//  291   {
//  292     zgConfigPANID = BUILD_UINT16( data_buffer[5], data_buffer[4]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     DPTR,#zgConfigPANID
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  293     osal_nv_write( ZCD_NV_PANID, 0, sizeof(zgConfigPANID), &zgConfigPANID);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#zgConfigPANID & 0xff
        MOV     ?V0 + 1,#(zgConfigPANID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7d
??modbus_single_write_1:
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ??modbus_single_write_2 & 0xFFFF
//  294   }
//  295   else if( address == MODBUS_DEVICE_TYPE)
??modbus_single_write_0:
        MOV     A,#0x16
        XRL     A,R0
        JNZ     ??modbus_single_write_3
//  296   {
//  297     zgDeviceLogicalType = data_buffer[5];
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine5 & 0xFFFF
//  298     osal_nv_write( ZCD_NV_LOGICAL_TYPE, 0, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType);
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x79
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  299     restore_factory_setting();
        ; Setup parameters for call to function restore_factory_setting
        SJMP    ??modbus_single_write_4
//  300   }
//  301   else if( address == MODBUS_CHANNEL_LIST_HI)
??modbus_single_write_3:
        MOV     A,#0x17
        XRL     A,R0
        JNZ     ??modbus_single_write_5
//  302   {
//  303     zgDefaultChannelList = BUILD_UINT32( 0, 0, data_buffer[5], data_buffer[4]);
        LCALL   ?Subroutine15 & 0xFFFF
//  304   }
??CrossCallReturnLabel_26:
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        SJMP    ??modbus_single_write_2
//  305   else if( address == MODBUS_CHANNEL_LIST_LO)
??modbus_single_write_5:
        MOV     A,#0x18
        XRL     A,R0
        JNZ     ??modbus_single_write_6
//  306   {
//  307     zgDefaultChannelList = BUILD_UINT32( data_buffer[5], data_buffer[4], 0, 0 );
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  308     osal_nv_write( ZCD_NV_CHANLIST, 0, sizeof(zgDefaultChannelList), &zgDefaultChannelList);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#zgDefaultChannelList & 0xff
        MOV     ?V0 + 1,#(zgDefaultChannelList >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7c
        LJMP    ??modbus_single_write_1 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 16)
//  309   }
//  310   else if( address == MODBUS_FACTORY_RESTORE)
??modbus_single_write_6:
        MOV     A,#0x22
        XRL     A,R0
        JNZ     ??modbus_single_write_2
//  311   {
//  312     if(data_buffer[5] == 1)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??modbus_single_write_2
//  313     {
//  314       restore_factory_setting();
        ; Setup parameters for call to function restore_factory_setting
??modbus_single_write_4:
        LCALL   ??restore_factory_setting?relay
//  315     }
//  316   }
//  317 }
??modbus_single_write_2:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  318 /******************************************************************************
//  319  * @fn      modbus_multi_write
//  320  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  321 void modbus_multi_write( uint8 *data_buffer, uint8 len)
modbus_multi_write:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function modbus_multi_write
        CODE
//  322 {
        FUNCALL modbus_multi_write, zgPreconfigKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_multi_write, ZDSecMgrInitNVKeyTables
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  323   uint8 address;
//  324   
//  325   address = BUILD_UINT16( data_buffer[3], data_buffer[2]);
//  326   
//  327   if( address == MODBUS_SECURITY_KEY_START)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x23
        JNZ     ??modbus_multi_write_0
//  328   {
//  329     if(data_buffer[6]>=32)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x20
        JC      ??modbus_multi_write_0
//  330     {
//  331       for(uint8 i=0; i<16; i++)
        MOV     ?V0 + 0,#0x0
//  332       {
//  333       //  osal_memcpy(defaultKey, data_buffer[7+i*2], 1);
//  334         defaultKey[i] = data_buffer[7+i*2];
??modbus_multi_write_1:
        MOV     DPL,?V0 + 0
        MOV     R2,DPL
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#defaultKey & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(defaultKey >> 8) & 0xff
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_61:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  335         zgPreconfigKeyInit( TRUE );
        ; Setup parameters for call to function zgPreconfigKeyInit
        MOV     R1,#0x1
        LCALL   ??zgPreconfigKeyInit?relay
//  336 
//  337         // Initialize NV items for all Keys: NWK, APS, TCLK and Master
//  338         ZDSecMgrInitNVKeyTables( TRUE );
        ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
        MOV     R1,#0x1
        LCALL   ??ZDSecMgrInitNVKeyTables?relay
//  339       }
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x10
        JC      ??modbus_multi_write_1
//  340     }
//  341   }
//  342 }
??modbus_multi_write_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock13
//  343 /******************************************************************************
//  344  * @fn      modbus_insert_msg
//  345  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+-1
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+-1
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+-1
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     ?V0 + 0,R1
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+-1
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+-1
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+-1
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+-1
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+-1
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+-1
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+-1
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+-1
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+-1
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  346 void modbus_insert_msg( uint8 *pBuf, uint8 len)
modbus_insert_msg:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function modbus_insert_msg
        CODE
//  347 {
        FUNCALL modbus_insert_msg, CRC16_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_insert_msg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 4,R1
//  348   uint8 index = 0;
//  349   afAddrType_t destAddr;
//  350   destAddr.addrMode = afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  351   destAddr.addr.shortAddr = 0;                
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  352   destAddr.endPoint = 10;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  353   signalStrength_t* pSigStren;
//  354     
//  355   initCRC16();
        MOV     DPTR,#CRClo
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     DPTR,#CRChi
        MOVX    @DPTR,A
//  356 //  uint8 *pInsertBuf = osal_mem_alloc( modbusDataLength*2);
//  357   if( firstAddr < 21)
        MOV     DPTR,#firstAddr
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x15
        JNC     ??modbus_insert_msg_0
//  358     index = 45 - 2*firstAddr;
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,#0x2d
        CLR     C
        SUBB    A,R0
        MOV     R1,A
        SJMP    ??modbus_insert_msg_1
//  359   else
//  360     //index = (modbusStartAddr-20)*2 + 1;
//  361     index = 3;
??modbus_insert_msg_0:
        MOV     R1,#0x3
//  362   
//  363   for (uint8 i=0; i<modbusDataLength; i++)
??modbus_insert_msg_1:
        MOV     R2,#0x0
        SJMP    ??modbus_insert_msg_2
//  364   {
//  365     if( i+modbusStartAddr == MODBUS_PANID)
//  366     {
//  367       pBuf[index++] = HI_UINT16( _NIB.nwkPanId);
??modbus_insert_msg_3:
        MOV     DPTR,#_NIB + 34
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_63:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R1
//  368       pBuf[index++] = LO_UINT16( _NIB.nwkPanId);
        MOV     DPTR,#_NIB + 33
??modbus_insert_msg_4:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
//  369     }
??modbus_insert_msg_5:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_64:
        POP     A
        CFI CFA_SP SP+0
??modbus_insert_msg_6:
        MOVX    @DPTR,A
        INC     R1
        INC     R2
??modbus_insert_msg_2:
        MOV     DPTR,#modbusDataLength
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??modbus_insert_msg_7 & 0xFFFF
        MOV     ?V0 + 0,R2
        MOV     DPTR,#modbusStartAddr
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x15
        XRL     A,R4
        JNZ     ??modbus_insert_msg_8
        MOV     A,R5
??modbus_insert_msg_8:
        JZ      ??modbus_insert_msg_3
//  370     else if( i + modbusStartAddr == MODBUS_DEVICE_TYPE)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,#0x16
        XRL     A,R4
        JNZ     ??modbus_insert_msg_9
        MOV     A,R5
??modbus_insert_msg_9:
        JNZ     ??modbus_insert_msg_10
//  371     {
//  372       pBuf[index++] = ZERO;
        LCALL   ?Subroutine19 & 0xFFFF
//  373       pBuf[index++] = zgDeviceLogicalType;
??CrossCallReturnLabel_34:
        MOV     DPTR,#zgDeviceLogicalType
        SJMP    ??modbus_insert_msg_4
//  374     }
//  375     else if( i + modbusStartAddr == MODBUS_CHANNEL_LIST_HI)
??modbus_insert_msg_10:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#0x17
        XRL     A,R4
        JNZ     ??modbus_insert_msg_11
        MOV     A,R5
??modbus_insert_msg_11:
        JNZ     ??modbus_insert_msg_12
//  376     {
//  377       pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 3);
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        PUSH    ?V0 + 0
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_65:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R1
//  378       pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 2);
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
??modbus_insert_msg_13:
        PUSH    ?V0 + 0
        CFI CFA_SP SP+-1
        SJMP    ??modbus_insert_msg_5
        CFI CFA_SP SP+0
//  379     }
//  380     else if( i + modbusStartAddr == MODBUS_CHANNEL_LIST_LO)
??modbus_insert_msg_12:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#0x18
        XRL     A,R4
        JNZ     ??modbus_insert_msg_14
        MOV     A,R5
??modbus_insert_msg_14:
        JNZ     ??modbus_insert_msg_15
//  381     {
//  382       pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 1);
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        PUSH    ?V0 + 0
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_66:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R1
//  383       pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 0);
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        SJMP    ??modbus_insert_msg_13
//  384     }
//  385     else if( i + modbusStartAddr == MODBUS_SOFTWARE_REV)
??modbus_insert_msg_15:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,#0x19
        XRL     A,R4
        JNZ     ??modbus_insert_msg_16
        MOV     A,R5
??modbus_insert_msg_16:
        JNZ     ??modbus_insert_msg_17
//  386     {
//  387       pBuf[index++] = ZERO;
        LCALL   ?Subroutine19 & 0xFFFF
//  388       pBuf[index++] = ZIG_SOFTWARE_VER;
??CrossCallReturnLabel_35:
        LCALL   ?Subroutine20 & 0xFFFF
//  389     }
??CrossCallReturnLabel_67:
        MOV     A,#0xa
        LJMP    ??modbus_insert_msg_6 & 0xFFFF
//  390     else if( (i + modbusStartAddr >= MODBUS_EXTENDED_ADDR_HI) && (i + modbusStartAddr <= MODBUS_EXTENDED_ADDR_LO))
??modbus_insert_msg_17:
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,?V0 + 0
        ADD     A,R4
        ADD     A,#-0x1a
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        CLR     C
        MOV     A,R4
        SUBB    A,#0x8
        MOV     A,R5
        SUBB    A,#0x0
        JNC     ??modbus_insert_msg_18
//  391     {
//  392       pBuf[index++] = ZERO;
        LCALL   ?Subroutine3 & 0xFFFF
//  393       pBuf[index++] = aExtendedAddress[ i+modbusStartAddr-MODBUS_EXTENDED_ADDR_HI];
//  394     }
??CrossCallReturnLabel_0:
        MOV     A,#(aExtendedAddress + 230) & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#((aExtendedAddress - 26) >> 8) & 0xff
??modbus_insert_msg_19:
        ADDC    A,R5
        MOV     DPH,A
        LJMP    ??modbus_insert_msg_4 & 0xFFFF
//  395     else if( (i + modbusStartAddr >= MODBUS_SECURITY_KEY_START) && (i + modbusStartAddr <= MODBUS_SECURITY_KEY_END))
??modbus_insert_msg_18:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,R4
        ADD     A,#-0x23
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        CLR     C
        MOV     A,R4
        SUBB    A,#0x10
        MOV     A,R5
        SUBB    A,#0x0
        JNC     ??modbus_insert_msg_20
//  396     {
//  397       pBuf[index++] = ZERO;
        LCALL   ?Subroutine3 & 0xFFFF
//  398       pBuf[index++] = defaultKey[ i+modbusStartAddr-MODBUS_SECURITY_KEY_START];
//  399     }
??CrossCallReturnLabel_1:
        MOV     A,#(defaultKey + 221) & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#((defaultKey - 35) >> 8) & 0xff
        SJMP    ??modbus_insert_msg_19
//  400     else if( i + modbusStartAddr == MODBUS_TSTAT_NUM)
??modbus_insert_msg_20:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,#0x33
        XRL     A,R4
        JNZ     ??modbus_insert_msg_21
        MOV     A,R5
??modbus_insert_msg_21:
        JNZ     ??modbus_insert_msg_22
//  401     {
//  402       pBuf[index++] = ZERO;
        LCALL   ?Subroutine19 & 0xFFFF
//  403       pBuf[index++] = numSignalStren;
??CrossCallReturnLabel_36:
        MOV     DPTR,#numSignalStren
        LJMP    ??modbus_insert_msg_4 & 0xFFFF
//  404     }
//  405     else if( (i + modbusStartAddr >= MODBUS_FIRST_TSTAT_ID) && ( i+ modbusStartAddr <= MODBUS_LAST_TSTAT_ID))
??modbus_insert_msg_22:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        CLR     A
        ADDC    A,#0x0
        MOV     A,R4
        SUBB    A,#0x34
        MOV     A,R5
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??modbus_insert_msg_23
        MOV     DPTR,#numSignalStren
        MOVX    A,@DPTR
        ADD     A,#0x33
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??modbus_insert_msg_23
//  406     {
//  407       if( i + modbusStartAddr == MODBUS_FIRST_TSTAT_ID)
        MOV     ?V0 + 0,R2
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,#0x34
        XRL     A,R4
        JNZ     ??modbus_insert_msg_24
        MOV     A,R5
??modbus_insert_msg_24:
        MOV     DPTR,#pSignalStren
        JNZ     ??modbus_insert_msg_25
//  408       {
//  409         pSigStren = pSignalStren;
        LCALL   ??Subroutine30_0 & 0xFFFF
//  410       }
??CrossCallReturnLabel_69:
        SJMP    ??modbus_insert_msg_26
//  411       else
//  412       {
//  413         pSigStren = pSignalStren;
??modbus_insert_msg_25:
        LCALL   ??Subroutine30_0 & 0xFFFF
//  414         for( uint8 j=0; j<((i+modbusStartAddr)-MODBUS_FIRST_TSTAT_ID); j++)
??CrossCallReturnLabel_70:
        MOV     R0,#0x0
        SJMP    ??modbus_insert_msg_27
//  415         {
//  416           if(pSigStren)
??modbus_insert_msg_28:
        MOV     A,R4
        ORL     A,R5
        JZ      ??CrossCallReturnLabel_73
//  417             pSigStren = pSigStren->next;
        LCALL   ?Subroutine12 & 0xFFFF
//  418         }
??CrossCallReturnLabel_73:
        INC     R0
??modbus_insert_msg_27:
        LCALL   ?Subroutine11 & 0xFFFF
//  419       }
??CrossCallReturnLabel_19:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_38:
        JC      ??modbus_insert_msg_28
//  420       pBuf[index++] = ZERO;
??modbus_insert_msg_26:
        LCALL   ?Subroutine18 & 0xFFFF
//  421       if(pSigStren != NULL)
??CrossCallReturnLabel_32:
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_37 & 0xFFFF
//  422       {
//  423         pBuf[index++] = pSigStren->modbus_id;
        MOV     DPL,R4
        MOV     DPH,R5
??modbus_insert_msg_29:
        INC     DPTR
        INC     DPTR
        LJMP    ??modbus_insert_msg_4 & 0xFFFF
//  424       }
//  425       else
//  426         pBuf[index++] = ZERO;
//  427     }
//  428     else if( (i + modbusStartAddr >= MODBUS_FIRST_SIG_STREN) && ( i+ modbusStartAddr <= MODBUS_LAST_SIG_STREN))
??modbus_insert_msg_23:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,R4
        SUBB    A,?V0 + 0
        MOV     A,R5
        SUBB    A,?V0 + 1
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??modbus_insert_msg_30
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R4
        ADD     A,#0x34
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        MOV     ?V0 + 0,R2
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??modbus_insert_msg_30
//  429     {
//  430       if( i + modbusStartAddr == MODBUS_FIRST_SIG_STREN)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,?V0 + 0
        XRL     A,R4
        JNZ     ??modbus_insert_msg_31
        MOV     A,?V0 + 1
        XRL     A,R5
??modbus_insert_msg_31:
        MOV     DPTR,#pSignalStren
        JNZ     ??modbus_insert_msg_32
//  431       {
//  432         pSigStren = pSignalStren;
        LCALL   ??Subroutine30_0 & 0xFFFF
//  433       }
??CrossCallReturnLabel_71:
        SJMP    ??modbus_insert_msg_33
//  434       else
//  435       {
//  436         pSigStren = pSignalStren;
??modbus_insert_msg_32:
        LCALL   ??Subroutine30_0 & 0xFFFF
//  437         for( uint8 j=0; j<((i+modbusStartAddr)-MODBUS_FIRST_SIG_STREN); j++)
??CrossCallReturnLabel_72:
        MOV     R0,#0x0
        SJMP    ??modbus_insert_msg_34
//  438         {
//  439           if(pSigStren)
??modbus_insert_msg_35:
        MOV     A,R4
        ORL     A,R5
        JZ      ??CrossCallReturnLabel_74
//  440             pSigStren = pSigStren->next;
        LCALL   ?Subroutine12 & 0xFFFF
//  441         }
??CrossCallReturnLabel_74:
        INC     R0
??modbus_insert_msg_34:
        LCALL   ?Subroutine11 & 0xFFFF
//  442       }
??CrossCallReturnLabel_20:
        MOV     DPTR,#numSignalStren
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 6
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     ?V0 + 1,A
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_39:
        JC      ??modbus_insert_msg_35
//  443       pBuf[index++] = ZERO;
??modbus_insert_msg_33:
        LCALL   ?Subroutine18 & 0xFFFF
//  444       if(pSigStren != NULL)
??CrossCallReturnLabel_33:
        JZ      ??CrossCallReturnLabel_37
//  445       {
//  446         pBuf[index++] = pSigStren->rssi;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        SJMP    ??modbus_insert_msg_29
//  447       }
//  448       else
//  449         pBuf[index++] = ZERO;
//  450     }
//  451     else
//  452     {
//  453       pBuf[index++] = ZERO;
??modbus_insert_msg_30:
        LCALL   ?Subroutine19 & 0xFFFF
//  454       pBuf[index++] = ZERO;
//  455     }
??CrossCallReturnLabel_37:
        LCALL   ?Subroutine20 & 0xFFFF
//  456   }
??CrossCallReturnLabel_68:
        CLR     A
        LJMP    ??modbus_insert_msg_6 & 0xFFFF
//  457   
//  458   for( uint8 i=0; i<len-2; i++)
??modbus_insert_msg_7:
        MOV     ?V0 + 5,#0x0
        SJMP    ??modbus_insert_msg_36
//  459     CRC16_byte(pBuf[i]);
??modbus_insert_msg_37:
        ; Setup parameters for call to function CRC16_byte
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??CRC16_byte?relay
        INC     ?V0 + 5
??modbus_insert_msg_36:
        MOV     ?V0 + 0,?V0 + 5
        MOV     ?V0 + 2,?V0 + 4
        MOV     A,?V0 + 2
        ADD     A,#-0x2
        MOV     R0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??modbus_insert_msg_37
        MOV     ?V0 + 0,?V0 + 4
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#CRChi
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  460   
//  461   pBuf[len-2] = CRChi;
//  462   pBuf[len-1] = CRClo;
        MOV     DPTR,#CRClo
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  463   
//  464   AF_DataRequest( &destAddr, &temco_epDesc,
//  465                      TEMCO_CLUSTERID,
//  466                      len,
//  467                      pBuf,
//  468                      &temcoApp_TransID,
//  469                      AF_DISCV_ROUTE,
//  470                      AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#temcoApp_TransID & 0xff
        MOV     ?V0 + 1,#(temcoApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x20
        MOV     R4,#temco_epDesc & 0xff
        MOV     R5,#(temco_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  471   
//  472   modbusStartAddr = 0;
        MOV     DPTR,#modbusStartAddr
        CLR     A
        MOVX    @DPTR,A
//  473   modbusDataLength = 0;
        MOV     DPTR,#modbusDataLength
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock40
//  474 }
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock41
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOV     A,?V0 + 0
        ADD     A,#-0x34
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 0
        CLR     A
        SUBB    A,?V0 + 1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_58:
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_35
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_36
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_37
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_32
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_33
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_0
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_1
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     ?V0 + 0,R1
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     R1
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,R4
        ORL     A,R5
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOV     DPL,R4
        MOV     DPH,R5
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 0,R2
        MOV     DPTR,#modbusStartAddr
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 0
        ADD     A,?V0 + 6
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,?V0 + 0
        ADD     A,R4
        MOV     R4,A
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     DPTR,#modbusStartAddr
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R4
        SUBB    A,?V0 + 0
        MOV     A,R5
        SUBB    A,?V0 + 1
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_52:
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOV     ?V0 + 0,R2
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     DPTR,#numSignalStren
        MOVX    A,@DPTR
        ADD     A,#0x34
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     ?V0 + 0,R2
        MOV     DPTR,#modbusStartAddr
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_50:
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_9
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_10
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_11
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_6
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_7
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,?V0 + 0
        ADD     A,R4
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104
//  475 
//  476 /******************************************************************************
//  477  * @fn      modbus_process_msg
//  478  * 
//  479  * @brief   Process modbus message
//  480  * 
//  481  * @param   uint8 - the pointer the buffer
//  482  *          uint8 - length 
//  483  * 
//  484  * @return  none
//  485  */
//  486 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  487 static void modbus_process_msg( uint8 *data_buffer, uint8 len)
modbus_process_msg:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI Function modbus_process_msg
        CODE
//  488 {
        FUNCALL modbus_process_msg, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, restore_factory_setting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, restore_factory_setting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, modbus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL modbus_process_msg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 4,R1
//  489   uint8 num, tempByte;
//  490   uint8 zero = 0;
//  491   uint16 i;
//  492   uint16 address;
//  493   signalStrength_t* pSigStren;
//  494   
//  495   afAddrType_t destAddr;
//  496   destAddr.addrMode = afAddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  497   destAddr.addr.shortAddr = 0xffff;                
//  498   destAddr.endPoint = 10;
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  499   
//  500   address = BUILD_UINT16( data_buffer[3], data_buffer[2]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  501   
//  502   if( data_buffer[0] == modbus_id)
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#modbus_id
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??modbus_process_msg_0 & 0xFFFF
//  503   {
//  504     if(data_buffer[1] == MODBUS_SINGLE_WRITE)
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??modbus_process_msg_1
//  505     {
//  506       HalUARTWrite( 0, data_buffer, len);
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 2,?V0 + 4
        MOV     R4,?V0 + 2
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  507       if (address == MODBUS_DEVICE_TYPE)
        MOV     A,#0x16
        XRL     A,R6
        JNZ     ??modbus_process_msg_2
        MOV     A,R7
??modbus_process_msg_2:
        JNZ     ??modbus_process_msg_3
//  508       {
//  509         zgDeviceLogicalType = data_buffer[5];
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine5 & 0xFFFF
//  510         osal_nv_write( ZCD_NV_LOGICAL_TYPE, 0, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType);
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x79
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  511         restore_factory_setting();
        ; Setup parameters for call to function restore_factory_setting
??modbus_process_msg_4:
        LCALL   ??restore_factory_setting?relay
        LJMP    ??modbus_process_msg_5 & 0xFFFF
//  512       }
//  513       else if( address == MODBUS_FACTORY_RESTORE)
??modbus_process_msg_3:
        MOV     A,#0x22
        XRL     A,R6
        JNZ     ??modbus_process_msg_6
        MOV     A,R7
??modbus_process_msg_6:
        JZ      $+5
        LJMP    ??modbus_process_msg_5 & 0xFFFF
//  514       {
//  515         if( address == MODBUS_FACTORY_RESTORE)
//  516         {
//  517           if(data_buffer[5] == 1)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??modbus_process_msg_5 & 0xFFFF
//  518           {
//  519             restore_factory_setting();
        ; Setup parameters for call to function restore_factory_setting
        SJMP    ??modbus_process_msg_4
//  520           }
//  521         }
//  522       }
//  523     }
//  524     else if(data_buffer[1] == MODBUS_MULTI_WRITE)
??modbus_process_msg_1:
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x10
        JNZ     $+5
        LJMP    ??modbus_process_msg_5 & 0xFFFF
//  525     {
//  526       
//  527     }
//  528     else if( data_buffer[1] == MODBUS_SINGLE_READ)
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??modbus_process_msg_5 & 0xFFFF
//  529     {
//  530       num = data_buffer[5];
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  531       modbus_send_byte( data_buffer[0], CRC_NO);
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        LCALL   ?Subroutine13 & 0xFFFF
//  532       modbus_send_byte( data_buffer[1], CRC_NO);
??CrossCallReturnLabel_21:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
//  533       modbus_send_byte( num*2, CRC_NO);
??CrossCallReturnLabel_22:
        MOV     A,?V0 + 5
        CLR     C
        RLC     A
        MOV     R1,A
        LCALL   ??modbus_send_byte?relay
//  534       
//  535       for( i = 0; i < num; i++)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??modbus_process_msg_7
//  536       {
//  537         if( i + address == MODBUS_PANID)
//  538         {
//  539           tempByte = HI_UINT16( _NIB.nwkPanId);
//  540           modbus_send_byte( tempByte, CRC_NO);
//  541           tempByte = LO_UINT16( _NIB.nwkPanId);
//  542           modbus_send_byte( tempByte, CRC_NO);
//  543         }
//  544         else if( i + address == MODBUS_DEVICE_TYPE)
//  545         {
//  546           modbus_send_byte( zero, CRC_NO);
//  547           modbus_send_byte( zgDeviceLogicalType, CRC_NO);
//  548         }
//  549         else if( i + address == MODBUS_CHANNEL_LIST_HI)
//  550         {
//  551           tempByte = HI_UINT16(zgConfigPANID);
//  552           modbus_send_byte( zero, CRC_NO);
//  553           tempByte = LO_UINT16(zgConfigPANID);
//  554           modbus_send_byte( zero, CRC_NO);
//  555         }
//  556         else if( i + address == MODBUS_CHANNEL_LIST_LO)
//  557         {
//  558           tempByte = HI_UINT16(zgConfigPANID);
//  559           modbus_send_byte( zero, CRC_NO);
//  560           tempByte = LO_UINT16(zgConfigPANID);
//  561           modbus_send_byte( zero, CRC_NO);
//  562         }
//  563         else if( i + address == MODBUS_SOFTWARE_REV)
//  564         {
//  565           modbus_send_byte( zero, CRC_NO);
//  566           modbus_send_byte( zSoftwareRev, CRC_NO);
//  567         }
//  568         else if( (i + address >= MODBUS_EXTENDED_ADDR_HI) && (i + address <= MODBUS_EXTENDED_ADDR_LO))
//  569         {
//  570           modbus_send_byte( zero, CRC_NO);
//  571           modbus_send_byte( aExtendedAddress[ i+modbusStartAddr-MODBUS_EXTENDED_ADDR_HI], CRC_NO);
//  572         }
//  573         else if( (i + address >= MODBUS_SECURITY_KEY_START) && (i + address <= MODBUS_SECURITY_KEY_END))
//  574         {
//  575           modbus_send_byte( zero, CRC_NO);
//  576           modbus_send_byte( defaultKey[ i+modbusStartAddr-MODBUS_SECURITY_KEY_START], CRC_NO);
//  577         }
//  578         else if( i + address == MODBUS_TSTAT_NUM)
//  579         {
//  580           modbus_send_byte( zero, CRC_NO);
//  581           modbus_send_byte( numSignalStren, CRC_NO);
//  582         }
//  583         else if( (i + address >= MODBUS_FIRST_TSTAT_ID) && ( i+ address <= MODBUS_LAST_TSTAT_ID))
//  584         {
//  585           if( i + address == MODBUS_FIRST_TSTAT_ID)
//  586           {
//  587             pSigStren = pSignalStren;
//  588           }
//  589           else
//  590           {
//  591             pSigStren = pSignalStren;
//  592             for( uint8 j=0; j<((i+address)-MODBUS_FIRST_TSTAT_ID); j++)
//  593             {
//  594               if(pSigStren)
//  595                 pSigStren = pSigStren->next;
//  596             }
//  597           }
//  598           modbus_send_byte( zero, CRC_NO);
//  599           if(pSigStren != NULL)
//  600           {
//  601             modbus_send_byte( pSigStren->modbus_id, CRC_NO);
//  602           }
//  603           else
//  604             modbus_send_byte( zero, CRC_NO);
//  605         }
//  606         else if( (i + address >= MODBUS_FIRST_SIG_STREN) && ( i+ address <= MODBUS_LAST_SIG_STREN))
//  607         {
//  608           if( i + address == MODBUS_FIRST_SIG_STREN)
//  609           {
//  610             pSigStren = pSignalStren;
//  611           }
//  612           else
//  613           {
//  614             pSigStren = pSignalStren;
//  615             for( uint8 j=0; j<((i+address)-MODBUS_FIRST_SIG_STREN); j++)
//  616             {
//  617               if(pSigStren)
//  618                 pSigStren = pSigStren->next;
//  619             }
//  620           }
//  621           modbus_send_byte( zero, CRC_NO);
//  622           if(pSigStren != NULL)
//  623           {
//  624             modbus_send_byte( pSigStren->rssi, CRC_NO);
//  625           }
//  626           else
//  627             modbus_send_byte( zero, CRC_NO);
//  628         }
//  629         
//  630         else
//  631         {
//  632           modbus_send_byte( 0, CRC_NO);
??modbus_process_msg_8:
        ; Setup parameters for call to function modbus_send_byte
        LCALL   ?Subroutine23 & 0xFFFF
//  633           modbus_send_byte( 1, CRC_NO);
//  634         }
??CrossCallReturnLabel_46:
        MOV     R1,#0x1
??modbus_process_msg_9:
        LCALL   ??modbus_send_byte?relay
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??modbus_process_msg_7:
        MOV     ?V0 + 2,?V0 + 5
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 2
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        JC      $+5
        LJMP    ??modbus_process_msg_10 & 0xFFFF
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,#0x15
        XRL     A,R0
        JNZ     ??modbus_process_msg_11
        MOV     A,R1
??modbus_process_msg_11:
        JNZ     ??modbus_process_msg_12
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     DPTR,#_NIB + 34
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPTR,#_NIB + 33
??modbus_process_msg_13:
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??modbus_process_msg_9
??modbus_process_msg_12:
        MOV     A,#0x16
        XRL     A,R0
        JNZ     ??modbus_process_msg_14
        MOV     A,R1
??modbus_process_msg_14:
        JNZ     ??modbus_process_msg_15
        ; Setup parameters for call to function modbus_send_byte
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     DPTR,#zgDeviceLogicalType
        SJMP    ??modbus_process_msg_13
??modbus_process_msg_15:
        MOV     A,#0x17
        XRL     A,R0
        JNZ     ??modbus_process_msg_16
        MOV     A,R1
??modbus_process_msg_16:
        JNZ     ??modbus_process_msg_17
??modbus_process_msg_18:
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??modbus_send_byte?relay
??modbus_process_msg_19:
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     R1,#0x0
        SJMP    ??modbus_process_msg_9
??modbus_process_msg_17:
        MOV     A,#0x18
        XRL     A,R0
        JNZ     ??modbus_process_msg_20
        MOV     A,R1
??modbus_process_msg_20:
        JZ      ??modbus_process_msg_18
        MOV     A,#0x19
        XRL     A,R0
        JNZ     ??modbus_process_msg_21
        MOV     A,R1
??modbus_process_msg_21:
        JNZ     ??modbus_process_msg_22
        ; Setup parameters for call to function modbus_send_byte
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     DPTR,#zSoftwareRev
        SJMP    ??modbus_process_msg_13
??modbus_process_msg_22:
        MOV     A,R0
        ADD     A,#-0x1a
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x8
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??modbus_process_msg_23
        ; Setup parameters for call to function modbus_send_byte
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,#(aExtendedAddress + 230) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((aExtendedAddress - 26) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
??modbus_process_msg_24:
        SJMP    ??modbus_process_msg_13
??modbus_process_msg_23:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     A,R0
        ADD     A,#-0x23
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x10
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??modbus_process_msg_25
        ; Setup parameters for call to function modbus_send_byte
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,#(defaultKey + 221) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((defaultKey - 35) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LJMP    ??modbus_process_msg_13 & 0xFFFF
??modbus_process_msg_25:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     A,#0x33
        XRL     A,R0
        JNZ     ??modbus_process_msg_26
        MOV     A,R1
??modbus_process_msg_26:
        JNZ     ??modbus_process_msg_27
        ; Setup parameters for call to function modbus_send_byte
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     DPTR,#numSignalStren
        SJMP    ??modbus_process_msg_24
??modbus_process_msg_27:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x34
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??modbus_process_msg_28
        MOV     DPTR,#numSignalStren
        MOVX    A,@DPTR
        ADD     A,#0x33
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JC      ??modbus_process_msg_28
        MOV     A,#0x34
        XRL     A,R0
        JNZ     ??modbus_process_msg_29
        MOV     A,R1
??modbus_process_msg_29:
        MOV     DPTR,#pSignalStren
        JNZ     ??modbus_process_msg_30
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_75:
        SJMP    ??modbus_process_msg_31
??modbus_process_msg_30:
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_76:
        MOV     R2,#0x0
        SJMP    ??modbus_process_msg_32
??modbus_process_msg_33:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??CrossCallReturnLabel_79
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_79:
        INC     R2
??modbus_process_msg_32:
        MOV     ?V0 + 6,R2
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,R0
        ADD     A,#-0x34
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        JC      ??modbus_process_msg_33
??modbus_process_msg_31:
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??modbus_send_byte?relay
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??modbus_process_msg_19 & 0xFFFF
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
??modbus_process_msg_34:
        INC     DPTR
        INC     DPTR
        LJMP    ??modbus_process_msg_13 & 0xFFFF
??modbus_process_msg_28:
        MOV     DPTR,#numSignalStren
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JNC     $+5
        LJMP    ??modbus_process_msg_8 & 0xFFFF
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x34
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_44:
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JNC     $+5
        LJMP    ??modbus_process_msg_8 & 0xFFFF
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     A,R2
        XRL     A,R0
        JNZ     ??modbus_process_msg_35
        MOV     A,R3
        XRL     A,R1
??modbus_process_msg_35:
        MOV     DPTR,#pSignalStren
        JNZ     ??modbus_process_msg_36
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_77:
        SJMP    ??modbus_process_msg_37
??modbus_process_msg_36:
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     R4,#0x0
        SJMP    ??modbus_process_msg_38
??modbus_process_msg_39:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??CrossCallReturnLabel_80
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_80:
        INC     R4
??modbus_process_msg_38:
        MOV     ?V0 + 6,R4
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     DPTR,#numSignalStren
        MOVX    A,@DPTR
        ADD     A,#0x34
        CLR     A
        ADDC    A,#0x0
        MOV     A,R0
        SUBB    A,R2
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R3
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        JC      ??modbus_process_msg_39
??modbus_process_msg_37:
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??modbus_send_byte?relay
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??modbus_process_msg_19 & 0xFFFF
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        LJMP    ??modbus_process_msg_34 & 0xFFFF
//  635       }
//  636       modbus_send_byte( CRChi, CRC_YES);
??modbus_process_msg_10:
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x1
        MOV     DPTR,#CRChi
        LCALL   ?Subroutine25 & 0xFFFF
//  637       modbus_send_byte( CRClo, CRC_YES);
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x1
        MOV     DPTR,#CRClo
        LCALL   ?Subroutine25 & 0xFFFF
//  638     }
//  639   }
??CrossCallReturnLabel_54:
        SJMP    ??modbus_process_msg_5
//  640 
//  641   else
//  642   {
//  643     AF_DataRequest( &destAddr, &temco_epDesc,
//  644                      TEMCO_CLUSTERID,
//  645                      len,
//  646                      data_buffer,
//  647                      &temcoApp_TransID,
//  648                      AF_DISCV_ROUTE,
//  649                      AF_DEFAULT_RADIUS );
??modbus_process_msg_0:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 2,#temcoApp_TransID & 0xff
        MOV     ?V0 + 3,#(temcoApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x20
        MOV     R4,#temco_epDesc & 0xff
        MOV     R5,#(temco_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  650   }
//  651 }
??modbus_process_msg_5:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??modbus_send_byte?relay
        ; Setup parameters for call to function modbus_send_byte
        ; Setup parameters for call to function modbus_send_byte
        ; Setup parameters for call to function modbus_send_byte
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     A,?V0 + 0
        ADD     A,R6
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,R7
        MOV     R1,A
        RET
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOVX    A,@DPTR
        ADD     A,#0x34
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??modbus_send_byte?relay
        ; Setup parameters for call to function modbus_send_byte
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        MOV     DPTR,#modbusStartAddr
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_55:
        ; Setup parameters for call to function modbus_send_byte
        ; Setup parameters for call to function modbus_send_byte
        ; Setup parameters for call to function modbus_send_byte
        MOV     R2,#0x0
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_21
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_22
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_23
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??modbus_send_byte?relay
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiCond137 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker143 Using cfiCommon1
        CFI (cfiPicker143) NoFunction
        CFI (cfiPicker143) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker146 Using cfiCommon1
        CFI (cfiPicker146) NoFunction
        CFI (cfiPicker146) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#zgDeviceLogicalType & 0xff
        MOV     ?V0 + 1,#(zgDeviceLogicalType >> 8) & 0xff
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond147 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker149 Using cfiCommon1
        CFI (cfiPicker149) NoFunction
        CFI (cfiPicker149) Picker
        MOV     A,#0xf
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiPicker149

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ttt>`:
        DATA8
        DB 11
        DB 22
        DB 33
        DB 44
        DB 55
        DB 66

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for modbus_id>`:
        DATA8
        DB 23

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zSoftwareRev>`:
        DATA8
        DB 10

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initCRC16?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initCRC16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CRC16_byte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CRC16_byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??modbus_send_byte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    modbus_send_byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??modbus_uart_data_process?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    modbus_uart_data_process

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??modbus_single_write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    modbus_single_write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??modbus_multi_write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    modbus_multi_write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??modbus_insert_msg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    modbus_insert_msg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??modbus_process_msg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    modbus_process_msg

        END
//  652 
//  653 
// 
// 2 550 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     8 bytes in segment XDATA_I
//     8 bytes in segment XDATA_ID
//   512 bytes in segment XDATA_ROM_C
//     6 bytes in segment XDATA_Z
// 
// 2 606 bytes of CODE  memory
//   512 bytes of CONST memory
//    14 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
