###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         24/Mar/2014  09:41:31 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Components\stack\zdo\ZDNwkMgr.c              #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\Source\znp #
#                          .cfg" (-DMAC_CFG_APP_PENDING_QUEUE=TRUE            #
#                          "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR   #
#                          | DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)"   #
#                          -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE -DZIGBEEPRO   #
#                          -DZIGBEE_FRAGMENTATION -DOSAL_CLOCK                #
#                          -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE -DNV_INIT   #
#                          -DNUM_DISC_ATTEMPTS=0) -f "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg #
#                          " (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0    #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00001000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Components\stack\zdo\ZDNwkMgr.c" -D         #
#                          xPOWER_SAVING -D NV_RESTORE -lC "C:\Documents and  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\CC2530-Debug\List\" -lA            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Lis #
#                          t\" --diag_suppress Pe001,Pa010 -o "C:\Documents   #
#                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Project #
#                          s\zstack\ZNP\CC253x\CC2530-Debug\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\" -I          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\Source\" -I      #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\Source\" -I   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\SE\Source\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\ZMain #
#                          \TI2530ZNP\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\hal\include #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\. #
#                          .\Components\hal\target\CC2530ZNP\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\mac\include\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\high_le #
#                          vel\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\single_chip\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mt\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\osal\include\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sa #
#                          ddr\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sd #
#                          ata\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\af\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\C #
#                          omponents\stack\nwk\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\.. #
#                          \Components\stack\sec\" -I "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\stack\zcl\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\zmac\" -I "C:\Documents and             #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"  #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\List #
#                          \ZDNwkMgr.lst                                      #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ #
#                          ZDNwkMgr.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Components\stack\zdo\ZDNwkMgr.c
      1          /**************************************************************************************************
      2            Filename:       ZDNwkMgr.c
      3            Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
      4            Revision:       $Revision: 15716 $
      5          
      6            Description:    The ZigBee Network Manager.
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComdef.h"
     49          #include "nwk_util.h"
     50          #include "ZDApp.h"
     51          #include "ZDObject.h"
     52          #include "ZGlobals.h"
     53          #include "ZDNwkMgr.h"
     54          
     55          #if defined( MT_ZDO_FUNC )
     56            #include "MT_ZDO.h"
     57          #endif
     58            
     59          #if defined ( LCD_SUPPORTED )
     60            #include "OnBoard.h"
     61          #endif
     62          
     63          /* HAL */
     64          #include "hal_lcd.h"
     65            
     66          /******************************************************************************
     67           * CONSTANTS
     68           */
     69          
     70          #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
     71          
     72          #if defined ( LCD_SUPPORTED )
     73            const char NwkMgrStr_1[]     = "NM-fail not hi";
     74            const char NwkMgrStr_2[]     = "NM-cur<last fail";
     75            const char NwkMgrStr_3[]     = "NM-energy too hi";
     76            const char NwkMgrStr_4[]     = "NM-energy not up";
     77          #endif
     78            
     79          /******************************************************************************
     80           * TYPEDEFS
     81           */
     82          
     83          /*********************************************************************
     84           * GLOBAL VARIABLES
     85           */
     86            
     87          // Task ID for internal task/event processing. This variable will be
     88          // received when ZDNwkMgr_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 ZDNwkMgr_TaskID = 0;
   \                     ZDNwkMgr_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     90          
     91          /******************************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          
     95          // Frequency Agility variables

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
   \                     ZDNwkMgr_UpdateNotifyTimer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ZDNwkMgr_NumUpdateNotifySent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \                     ZDNwkMgr_WaitingForNotifyConfirm:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          uint16 ZDNwkMgr_TotalTransmissions;
   \                     ZDNwkMgr_TotalTransmissions:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint16 ZDNwkMgr_TxFailures;
   \                     ZDNwkMgr_TxFailures:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
   \                     ZDNwkMgr_MgmtNwkUpdateReq:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    105            
    106          #if defined ( NWK_MANAGER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          uint16 ZDNwkMgr_UpdateRequestTimer = 0;
   \                     ZDNwkMgr_UpdateRequestTimer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          uint8  ZDNwkMgr_LastChannelEnergy = 0;
   \                     ZDNwkMgr_LastChannelEnergy:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint16 ZDNwkMgr_LastChannelFailureRate = 0;
   \                     ZDNwkMgr_LastChannelFailureRate:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    110          #endif // NWK_MANAGER
    111          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          uint8 ZDNwkMgr_NewChannel;
   \                     ZDNwkMgr_NewChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    113          
    114          // PAN ID Conflict variables
    115          #if defined ( NWK_MANAGER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
   \                     ZDNwkMgr_PanIdUpdateInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    117          #endif // NWK_MANAGER
    118          
    119          /*********************************************************************
    120           * GLOBAL FUNCTIONS
    121           */
    122          // Freguency Agility functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
   \                     pZDNwkMgr_ReportChannelInterference:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
   \                     pZDNwkMgr_ProcessDataConfirm:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
   \                     pZDNwkMgr_EDScanConfirmCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    126          
    127          // PAN ID Conflict functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
   \                     pZDNwkMgr_NetworkReportCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
   \                     pZDNwkMgr_NetworkUpdateCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    130          
    131          /******************************************************************************
    132           * LOCAL FUNCTIONS
    133           */
    134          
    135          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
    136          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
    137          
    138          // Frequency Agility functions
    139          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    140          
    141          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
    142          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
    143          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    144          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    145          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
    146                                                         uint16 totalTransmissions, uint16 txFailures,
    147                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
    148          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
    149          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
    150          void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
    151          
    152          #if defined ( NWK_MANAGER )
    153          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
    154          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
    155          #endif // NWK_MANAGER
    156          
    157          // PAN ID Conflict functions
    158          #if defined ( NWK_MANAGER )
    159          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
    160          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
    161          
    162          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
    163          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
    164          #endif // NWK_MANAGER
    165          
    166          /*********************************************************************
    167           * @fn      ZDNwkMgr_Init
    168           *
    169           * @brief   Initialization function for the Network Manager Task.
    170           *          This is called during initialization and should contain
    171           *          any application specific initialization (ie. hardware
    172           *          initialization/setup, table initialization, power up
    173           *          notificaiton ... ).
    174           *
    175           * @param   task_id - the ID assigned by OSAL.  This ID should be
    176           *                    used to send messages and set timers.
    177           *
    178           * @return  none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDNwkMgr_Init( byte task_id )
   \                     ZDNwkMgr_Init:
    181          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    182            // Save the task ID
    183            ZDNwkMgr_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000009   F0           MOVX    @DPTR,A
    184          
    185            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
   \   00000A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000A   7A15         MOV     R2,#0x15
   \   00000C   7B80         MOV     R3,#-0x80
   \   00000E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    186          
    187            // Frequecy Agility initialization
    188            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
   \   000011                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000011   7A38         MOV     R2,#0x38
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    189          #if defined ( NWK_MANAGER )
    190            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
   \   00001D                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001D   7A38         MOV     R2,#0x38
   \   00001F   7B80         MOV     R3,#-0x80
   \   000021   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    191          #endif // NWK_MANAGER
    192          
    193            pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
   \   000029   90....       MOV     DPTR,#pZDNwkMgr_EDScanConfirmCB
   \   00002C   74..         MOV     A,#??ZDNwkMgr_EDScanConfirmCB?relay & 0xff
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   74..         MOV     A,#(??ZDNwkMgr_EDScanConfirmCB?relay >> 8) & 0xff
   \   000032   F0           MOVX    @DPTR,A
    194            pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
   \   000033   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000036   74..         MOV     A,#??ZDNwkMgr_ProcessDataConfirm?relay & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(??ZDNwkMgr_ProcessDataConfirm?relay >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    195            pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
   \   00003D   90....       MOV     DPTR,#pZDNwkMgr_ReportChannelInterference
   \   000040   74..         MOV     A,#??ZDNwkMgr_ReportChannelInterference?relay & 0xff
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   74..         MOV     A,#(??ZDNwkMgr_ReportChannelInterference?relay >> 8) & 0xff
   \   000046   F0           MOVX    @DPTR,A
    196            
    197            // PAN ID Conflict initialization
    198          #if defined ( NWK_MANAGER )
    199            pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
   \   000047   90....       MOV     DPTR,#pZDNwkMgr_NetworkReportCB
   \   00004A   74..         MOV     A,#??ZDNwkMgr_NetworkReportCB?relay & 0xff
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   74..         MOV     A,#(??ZDNwkMgr_NetworkReportCB?relay >> 8) & 0xff
   \   000050   F0           MOVX    @DPTR,A
    200            pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
   \   000051   90....       MOV     DPTR,#pZDNwkMgr_NetworkUpdateCB
   \   000054   74..         MOV     A,#??ZDNwkMgr_NetworkUpdateCB?relay & 0xff
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#(??ZDNwkMgr_NetworkUpdateCB?relay >> 8) & 0xff
   \   00005A   F0           MOVX    @DPTR,A
    201          #endif // NWK_MANAGER
    202            
    203            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
   \   00005B   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr + 8
   \   00005E   7402         MOV     A,#0x2
   \   000060   F0           MOVX    @DPTR,A
    204            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000061   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   000064   74FE         MOV     A,#-0x2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   04           INC     A
   \   000069   F0           MOVX    @DPTR,A
    205          }
   \   00006A                REQUIRE ?Subroutine0
   \   00006A                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    206          
    207          /*********************************************************************
    208           * @fn      ZDNwkMgr_event_loop
    209           *
    210           * @brief   Main event loop for the Network Manager task. This function
    211           *          is called to process all events for the task.  Events
    212           *          include timers, messages and any other user defined events.
    213           *
    214           * @param   task_id  - The OSAL assigned task ID.
    215           * @param   events - events to process.  This is a bit map and can
    216           *                   contain more than one event.
    217           *
    218           * @return  none
    219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    220          UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
   \                     ZDNwkMgr_event_loop:
    221          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    222            osal_event_hdr_t *msgPtr;
    223            (void)task_id;  // Intentionally unreferenced parameter
    224          
    225            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??ZDNwkMgr_event_loop_0 & 0xFFFF
    226            {
    227              msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800E         SJMP    ??ZDNwkMgr_event_loop_1
    228              while ( msgPtr )
    229              {
    230                switch ( msgPtr->event )
    231                {
    232                  case ZDO_CB_MSG:
    233                    // ZDO sends the message that we registered for
    234                    ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
    235                    break;
    236                   
    237                  case NM_CHANNEL_INTERFERE:
    238                    // NWK layer sends the message when it detectes Channel Interference
    239                    ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
    240                    break;
    241             
    242                  case NM_ED_SCAN_CONFIRM:
    243                    // NWK layer sends the message when it receives an ED scan confirmation
    244                    ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
    245                    break;
    246          #if defined ( NWK_MANAGER )
    247                  case ZDO_NETWORK_REPORT:
    248                    // NWK layer sends this message when it receives a Network Report message
    249                    ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
    250                    break;
    251                 
    252                  case ZDO_NETWORK_UPDATE:
    253                    // NKW layer sends this message when it receives a Network Update message
    254                    ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_2:
   \   000012                ; Setup parameters for call to function ZDNwkMgr_ProcessNetworkUpdate
   \   000012   AA..         MOV     R2,?V0 + 2
   \   000014   AB..         MOV     R3,?V0 + 3
   \   000016   12....       LCALL   ??ZDNwkMgr_ProcessNetworkUpdate?relay
    255                    break;
    256          #endif // NWK_MANAGER         
    257                  default:
    258                    break;
    259                }
    260          
    261                // Release the memory
    262                osal_msg_deallocate( (uint8 *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_3:
   \   000019                ; Setup parameters for call to function osal_msg_deallocate
   \   000019   AA..         MOV     R2,?V0 + 2
   \   00001B   AB..         MOV     R3,?V0 + 3
   \   00001D   12....       LCALL   ??osal_msg_deallocate?relay
    263          
    264                // Next
    265                msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   000020                ; Setup parameters for call to function osal_msg_receive
   \                     ??ZDNwkMgr_event_loop_1:
   \   000020   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??osal_msg_receive?relay
   \   000028   8A..         MOV     ?V0 + 2,R2
   \   00002A   8B..         MOV     ?V0 + 3,R3
   \   00002C   E5..         MOV     A,?V0 + 2
   \   00002E   45..         ORL     A,?V0 + 3
   \   000030   7003         JNZ     $+5
   \   000032   02....       LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
   \   000035   85..82       MOV     DPL,?V0 + 2
   \   000038   85..83       MOV     DPH,?V0 + 3
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24CF         ADD     A,#-0x31
   \   00003E   6078         JZ      ??ZDNwkMgr_event_loop_5
   \   000040   14           DEC     A
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??ZDNwkMgr_event_loop_6 & 0xFFFF
   \   000046   245F         ADD     A,#0x5f
   \   000048   600B         JZ      ??ZDNwkMgr_event_loop_7
   \   00004A   14           DEC     A
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??ZDNwkMgr_event_loop_8 & 0xFFFF
   \   000050   14           DEC     A
   \   000051   60BF         JZ      ??ZDNwkMgr_event_loop_2
   \   000053   80C4         SJMP    ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_7:
   \   000055   E5..         MOV     A,?V0 + 2
   \   000057   240C         ADD     A,#0xc
   \   000059   F582         MOV     DPL,A
   \   00005B   E5..         MOV     A,?V0 + 3
   \   00005D   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000060   F5..         MOV     ?V0 + 0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V0 + 1,A
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDNwkMgr_event_loop>_0`:
   \   00006B   0000         DW        0
   \   00006D   0300         DW        3
   \   00006F   3800         DW        56
   \   000071   ....         DW        ??ZDNwkMgr_event_loop_9
   \   000073   1580         DW        32789
   \   000075   ....         DW        ??ZDNwkMgr_event_loop_10
   \   000077   3880         DW        32824
   \   000079   ....         DW        ??ZDNwkMgr_event_loop_11
   \   00007B   ....         DW        ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_10:
   \   00007D                ; Setup parameters for call to function ZDNwkMgr_ProcessServerDiscRsp
   \   00007D   AA..         MOV     R2,?V0 + 2
   \   00007F   AB..         MOV     R3,?V0 + 3
   \   000081   12....       LCALL   ??ZDNwkMgr_ProcessServerDiscRsp?relay
   \   000084   8093         SJMP    ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_11:
   \   000086   90....       MOV     DPTR,#zgNwkMgrMode
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6401         XRL     A,#0x1
   \   00008C   708B         JNZ     ??ZDNwkMgr_event_loop_3
   \   00008E                ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateNotify
   \   00008E   AA..         MOV     R2,?V0 + 2
   \   000090   AB..         MOV     R3,?V0 + 3
   \   000092   12....       LCALL   ??ZDO_ParseMgmtNwkUpdateNotify?relay
   \   000095   8A..         MOV     ?V0 + 0,R2
   \   000097   8B..         MOV     ?V0 + 1,R3
   \   000099   EA           MOV     A,R2
   \   00009A   45..         ORL     A,?V0 + 1
   \   00009C   7003         JNZ     $+5
   \   00009E   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \   0000A1                ; Setup parameters for call to function ZDNwkMgr_CheckForChannelChange
   \   0000A1   12....       LCALL   ??ZDNwkMgr_CheckForChannelChange?relay
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   AA..         MOV     R2,?V0 + 0
   \   0000A6   AB..         MOV     R3,?V0 + 1
   \   0000A8   12....       LCALL   ??osal_mem_free?relay
   \   0000AB   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \                     ??ZDNwkMgr_event_loop_9:
   \   0000AE                ; Setup parameters for call to function ZDNwkMgr_ProcessMgmtNwkUpdateReq
   \   0000AE   AA..         MOV     R2,?V0 + 2
   \   0000B0   AB..         MOV     R3,?V0 + 3
   \   0000B2   12....       LCALL   ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay
   \   0000B5   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \                     ??ZDNwkMgr_event_loop_5:
   \   0000B8   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   C3           CLR     C
   \   0000BD   9404         SUBB    A,#0x4
   \   0000BF   4003         JC      $+5
   \   0000C1   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \   0000C4                ; Setup parameters for call to function NLME_EDScanRequest
   \   0000C4   90....       MOV     DPTR,#_NIB + 42
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   90....       MOV     DPTR,#__Constant_7fff800
   \   0000CC   12....       LCALL   ?XLOAD_R2345
   \   0000CF   12....       LCALL   ??NLME_EDScanRequest?relay
   \   0000D2   E9           MOV     A,R1
   \   0000D3   6003         JZ      $+5
   \   0000D5   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \   0000D8   85..82       MOV     DPL,?V0 + 2
   \   0000DB   85..83       MOV     DPH,?V0 + 3
   \   0000DE   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000E1   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   0000E4   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000E7   85..82       MOV     DPL,?V0 + 2
   \   0000EA   85..83       MOV     DPH,?V0 + 3
   \   0000ED   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000F0   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   0000F3   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000F6   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   0000F9   74FF         MOV     A,#-0x1
   \                     ??ZDNwkMgr_event_loop_12:
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \                     ??ZDNwkMgr_event_loop_6:
   \   0000FF   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F4           CPL     A
   \   000104   700D         JNZ     ??ZDNwkMgr_event_loop_13
   \   000106                ; Setup parameters for call to function ZDNwkMgr_CheckForChannelInterference
   \   000106   AA..         MOV     R2,?V0 + 2
   \   000108   AB..         MOV     R3,?V0 + 3
   \   00010A   12....       LCALL   ??ZDNwkMgr_CheckForChannelInterference?relay
   \   00010D   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000110   E4           CLR     A
   \   000111   80E8         SJMP    ??ZDNwkMgr_event_loop_12
   \                     ??ZDNwkMgr_event_loop_13:
   \   000113                ; Setup parameters for call to function nwkTransmissionFailures
   \   000113   7900         MOV     R1,#0x0
   \   000115   12....       LCALL   ??nwkTransmissionFailures?relay
   \   000118   8A..         MOV     ?V0 + 0,R2
   \   00011A   8B..         MOV     ?V0 + 1,R3
   \   00011C                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   00011C   75..00       MOV     ?V0 + 4,#0x0
   \   00011F   78..         MOV     R0,#?V0 + 4
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000124   78..         MOV     R0,#?V0 + 2
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000129   78..         MOV     R0,#?V0 + 0
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   90....       MOV     DPTR,#_NIB + 107
   \   000131   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000134   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F9           MOV     R1,A
   \   000139   12....       LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
   \   00013C   7405         MOV     A,#0x5
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000141   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000144   E0           MOVX    A,@DPTR
   \   000145   7003         JNZ     $+5
   \   000147   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \   00014A                ; Setup parameters for call to function osal_start_timerEx
   \   00014A   7C32         MOV     R4,#0x32
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   7A08         MOV     R2,#0x8
   \   000150   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000153   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \                     ??ZDNwkMgr_event_loop_8:
   \   000156                ; Setup parameters for call to function ZDNwkMgr_ProcessNetworkReport
   \   000156   AA..         MOV     R2,?V0 + 2
   \   000158   AB..         MOV     R3,?V0 + 3
   \   00015A   12....       LCALL   ??ZDNwkMgr_ProcessNetworkReport?relay
   \   00015D   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
    266              }
    267              
    268              // Return unprocessed events
    269              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDNwkMgr_event_loop_4:
   \   000160   EE           MOV     A,R6
   \   000161   FA           MOV     R2,A
   \   000162   EF           MOV     A,R7
   \   000163   6480         XRL     A,#0x80
   \                     ??ZDNwkMgr_event_loop_14:
   \   000165   FB           MOV     R3,A
   \   000166   02....       LJMP    ??ZDNwkMgr_event_loop_15 & 0xFFFF
    270            }
    271          
    272            if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
   \                     ??ZDNwkMgr_event_loop_0:
   \   000169   EE           MOV     A,R6
   \   00016A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00016C   501E         JNC     ??ZDNwkMgr_event_loop_16
    273            {       
    274              // Switch channel
    275              _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
   \   00016E   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   000171   E0           MOVX    A,@DPTR
   \   000172   90....       MOV     DPTR,#_NIB + 22
   \   000175   F0           MOVX    @DPTR,A
    276              ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
   \   000176                ; Setup parameters for call to function ZMacSetReq
   \   000176   7A..         MOV     R2,#ZDNwkMgr_NewChannel & 0xff
   \   000178   7B..         MOV     R3,#(ZDNwkMgr_NewChannel >> 8) & 0xff
   \   00017A   79E1         MOV     R1,#-0x1f
   \   00017C   12....       LCALL   ??ZMacSetReq?relay
    277           
    278              // Our Channel has been changed -- notify to save info into NV
    279              ZDApp_NwkStateUpdateCB();
   \   00017F                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   00017F   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay
    280              
    281              // Reset the total transmit count and the transmit failure counters
    282              _NIB.nwkTotalTransmissions = 0;
   \   000182   12....       LCALL   ?Subroutine6 & 0xFFFF
    283              nwkTransmissionFailures( TRUE );
    284              
    285              return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_4:
   \   000185   EE           MOV     A,R6
   \   000186   6401         XRL     A,#0x1
   \                     ??ZDNwkMgr_event_loop_17:
   \   000188   FA           MOV     R2,A
   \   000189   EF           MOV     A,R7
   \   00018A   80D9         SJMP    ??ZDNwkMgr_event_loop_14
    286            }
    287          
    288            if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
   \                     ??ZDNwkMgr_event_loop_16:
   \   00018C   5402         ANL     A,#0x2
   \   00018E   601F         JZ      ??ZDNwkMgr_event_loop_18
    289            {
    290              // Update the Update Notify timer
    291              if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
   \   000190   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   000193   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000196   600D         JZ      ??ZDNwkMgr_event_loop_19
    292              {
    293                ZDNwkMgr_UpdateNotifyTimer--;
   \   000198   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   00019B   12....       LCALL   ?Subroutine5 & 0xFFFF
    294                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
    295              }
   \                     ??CrossCallReturnLabel_2:
   \   00019E   7A02         MOV     R2,#0x2
   \   0001A0   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0001A3   8005         SJMP    ??ZDNwkMgr_event_loop_20
    296              else
    297              {
    298                ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ??ZDNwkMgr_event_loop_19:
   \   0001A5   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0001A8   E4           CLR     A
   \   0001A9   F0           MOVX    @DPTR,A
    299              }
    300              
    301              return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
   \                     ??ZDNwkMgr_event_loop_20:
   \   0001AA   EE           MOV     A,R6
   \   0001AB   6402         XRL     A,#0x2
   \                     ??ZDNwkMgr_event_loop_21:
   \   0001AD   80D9         SJMP    ??ZDNwkMgr_event_loop_17
    302            }
    303            
    304          #if defined ( NWK_MANAGER )
    305            if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
   \                     ??ZDNwkMgr_event_loop_18:
   \   0001AF   EE           MOV     A,R6
   \   0001B0   5404         ANL     A,#0x4
   \   0001B2   6015         JZ      ??ZDNwkMgr_event_loop_22
    306            {
    307              // Update the Update Request timer
    308              if ( ZDNwkMgr_UpdateRequestTimer > 0 )
   \   0001B4   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001B7   600B         JZ      ??CrossCallReturnLabel_42
    309              {
    310                ZDNwkMgr_UpdateRequestTimer--;
   \   0001B9   90....       MOV     DPTR,#ZDNwkMgr_UpdateRequestTimer
   \   0001BC   12....       LCALL   ?Subroutine5 & 0xFFFF
    311                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    312              }
   \                     ??CrossCallReturnLabel_3:
   \   0001BF   7A04         MOV     R2,#0x4
   \   0001C1   12....       LCALL   ?Subroutine11 & 0xFFFF
    313              
    314              return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
   \                     ??CrossCallReturnLabel_42:
   \   0001C4   EE           MOV     A,R6
   \   0001C5   6404         XRL     A,#0x4
   \   0001C7   80BF         SJMP    ??ZDNwkMgr_event_loop_17
    315            }
    316          #endif // NWK_MANAGER
    317            
    318            if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
   \                     ??ZDNwkMgr_event_loop_22:
   \   0001C9   EE           MOV     A,R6
   \   0001CA   5408         ANL     A,#0x8
   \   0001CC   6022         JZ      ??ZDNwkMgr_event_loop_23
    319            {  
    320              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
   \   0001CE   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   6017         JZ      ??ZDNwkMgr_event_loop_24
    321              {
    322                if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
    323                                          ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
   \   0001D4                ; Setup parameters for call to function NLME_EDScanRequest
   \   0001D4   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 4
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F9           MOV     R1,A
   \   0001D9   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq
   \   0001DC   12....       LCALL   ?XLOAD_R2345
   \   0001DF   12....       LCALL   ??NLME_EDScanRequest?relay
   \   0001E2   E9           MOV     A,R1
   \   0001E3   7006         JNZ     ??ZDNwkMgr_event_loop_24
    324                {
    325                  ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
   \   0001E5   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   14           DEC     A
   \   0001EA   F0           MOVX    @DPTR,A
    326                }
    327              }
    328                
    329              return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
   \                     ??ZDNwkMgr_event_loop_24:
   \   0001EB   EE           MOV     A,R6
   \   0001EC   6408         XRL     A,#0x8
   \   0001EE   8098         SJMP    ??ZDNwkMgr_event_loop_17
    330            }
    331            
    332            // Discard or make more handlers
    333            return 0;
   \                     ??ZDNwkMgr_event_loop_23:
   \   0001F0   7A00         MOV     R2,#0x0
   \   0001F2   7B00         MOV     R3,#0x0
   \                     ??ZDNwkMgr_event_loop_15:
   \   0001F4                REQUIRE ?Subroutine1
   \   0001F4                ; // Fall through to label ?Subroutine1
    334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   24FF         ADD     A,#-0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   34FF         ADDC    A,#-0x1
   \   000008   F0           MOVX    @DPTR,A
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   7C60         MOV     R4,#0x60
   \   00000B   7DEA         MOV     R5,#-0x16
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#ZDNwkMgr_UpdateRequestTimer
   \   000003                REQUIRE ??Subroutine23_0
   \   000003                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
   \   000007   7B..         MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_start_timerEx?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine29_0
   \   000002                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine30_0
   \   000002                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#_NIB + 107
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007                ; Setup parameters for call to function nwkTransmissionFailures
   \   000007                ; Setup parameters for call to function nwkTransmissionFailures
   \   000007   7901         MOV     R1,#0x1
   \   000009   12....       LCALL   ??nwkTransmissionFailures?relay
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    335          
    336          /*********************************************************************
    337           * @fn      ZDNwkMgr_ProcessMsgCBs
    338           *
    339           * @brief   Process the incoming messages.
    340           *
    341           * @param   msgPtr - message to process
    342           *
    343           * @return  TRUE if message to be freed. FALSE otherwise.
    344           */
    345          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
    346          {
    347            switch ( inMsg->clusterID )
    348            {   
    349              case Mgmt_NWK_Update_req:
    350                ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
    351                break;    
    352          #if defined ( NWK_MANAGER )  
    353              case Mgmt_NWK_Update_notify:
    354                ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
    355                break;
    356          #endif // NWK_MANAGER
    357              case Server_Discovery_rsp:
    358                ZDNwkMgr_ProcessServerDiscRsp( inMsg );
    359                break;
    360                
    361              default:
    362                // Unknown message
    363                break;
    364            }
    365          }
    366          
    367          /*********************************************************************
    368           * Frequency Agility Routines
    369           */
    370          #if defined ( NWK_MANAGER )
    371          /*********************************************************************
    372           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
    373           *
    374           * @brief       This function processes the incoming Management
    375           *              Network Update notify.
    376           *
    377           * @param       pUpdateNotify - notify message
    378           *
    379           * @return      TRUE if message to be freed. FALSE otherwise.
    380           */
    381          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
    382          {
    383            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    384            {
    385              ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
    386              if ( pNotify )
    387              {
    388                ZDNwkMgr_CheckForChannelChange( pNotify );
    389          
    390                osal_mem_free( pNotify );
    391              }
    392            }
    393          }
    394          
    395          /*********************************************************************
    396           * @fn          ZDNwkMgr_CheckForChannelChange
    397           *
    398           * @brief       This function processes the incoming Management Network
    399           *              Update notify and starts an Update Request if a channel
    400           *              change is needed.
    401           *
    402           * @param       pUpdateNotify - notify message
    403           *
    404           * @return      none
    405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
   \                     ZDNwkMgr_CheckForChannelChange:
    407          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
    408            uint8  i;
    409            uint16 failureRate;
    410            uint8  lowestEnergyIndex;
    411            uint8  lowestEnergyValue = 0xFF;
   \   00000E   75..FF       MOV     ?V0 + 4,#-0x1
    412                
    413            // If any device has more than 50% transmission failures, a channel
    414            // change should be considered
    415            failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00001B   E8           MOV     A,R0
   \   00001C   75F064       MOV     B,#0x64
   \   00001F   A4           MUL     AB
   \   000020   F8           MOV     R0,A
   \   000021   AAF0         MOV     R2,B
   \   000023   75F064       MOV     B,#0x64
   \   000026   E9           MOV     A,R1
   \   000027   A4           MUL     AB
   \   000028   2A           ADD     A,R2
   \   000029   F9           MOV     R1,A
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ?US_DIV_MOD
   \   00003B   88..         MOV     ?V0 + 0,R0
   \   00003D   89..         MOV     ?V0 + 1,R1
   \   00003F   AA..         MOV     R2,?V0 + 0
   \   000041   AB..         MOV     R3,?V0 + 1
    416            if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
   \   000043   EA           MOV     A,R2
   \   000044   9432         SUBB    A,#0x32
   \   000046   EB           MOV     A,R3
   \   000047   9400         SUBB    A,#0x0
   \   000049   5003         JNC     $+5
   \   00004B   02....       LJMP    ??CrossCallReturnLabel_8 & 0xFFFF
    417            {
    418          #if defined ( LCD_SUPPORTED )
    419              HalLcdWriteString( (char*)NwkMgrStr_1, HAL_LCD_LINE_1 );
    420              HalLcdWriteStringValueValue( ": ", failureRate, 10, ZDNWKMGR_CC_TX_FAILURE, 10, HAL_LCD_LINE_2 );
    421          #endif
    422              return;
    423            }
    424          
    425            // If the current failure rate is higher than the last failure rate,
    426            // a channel change should be considered
    427            if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
   \   00004E   90....       MOV     DPTR,#ZDNwkMgr_LastChannelFailureRate
   \   000051   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000054   C3           CLR     C
   \   000055   EA           MOV     A,R2
   \   000056   98           SUBB    A,R0
   \   000057   EB           MOV     A,R3
   \   000058   99           SUBB    A,R1
   \   000059   5003         JNC     $+5
   \   00005B   02....       LJMP    ??CrossCallReturnLabel_8 & 0xFFFF
    428            {
    429          #if defined ( LCD_SUPPORTED )
    430              HalLcdWriteString( (char*)NwkMgrStr_2, HAL_LCD_LINE_1 );
    431              HalLcdWriteStringValueValue( ": ", failureRate, 10, 
    432                                           ZDNwkMgr_LastChannelFailureRate, 10, HAL_LCD_LINE_2 );
    433          #endif
    434              return;
    435            }
    436            
    437            // Select a single channel based on the Mgmt_NWK_Update_notify based on
    438            // the lowest energy. This is the proposed new channel. 
    439            for ( i = 0; i < pNotify->listCount; i++ )
   \   00005E   7F00         MOV     R7,#0x0
   \   000060   8012         SJMP    ??ZDNwkMgr_CheckForChannelChange_0
    440            {
    441              if ( pNotify->energyValues[i] < lowestEnergyValue )
   \                     ??ZDNwkMgr_CheckForChannelChange_1:
   \   000062   8F..         MOV     ?V0 + 0,R7
   \   000064   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000067   C3           CLR     C
   \   000068   95..         SUBB    A,?V0 + 4
   \   00006A   5007         JNC     ??ZDNwkMgr_CheckForChannelChange_2
    442              {
    443                lowestEnergyIndex = i;
   \   00006C   EF           MOV     A,R7
   \   00006D   FE           MOV     R6,A
    444                lowestEnergyValue = pNotify->energyValues[i];
   \   00006E   12....       LCALL   ?Subroutine18 & 0xFFFF
    445              }
    446            }
   \                     ??CrossCallReturnLabel_21:
   \   000071   F5..         MOV     ?V0 + 4,A
   \                     ??ZDNwkMgr_CheckForChannelChange_2:
   \   000073   0F           INC     R7
   \                     ??ZDNwkMgr_CheckForChannelChange_0:
   \   000074   8C82         MOV     DPL,R4
   \   000076   8D83         MOV     DPH,R5
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   EF           MOV     A,R7
   \   000084   C3           CLR     C
   \   000085   98           SUBB    A,R0
   \   000086   40DA         JC      ??ZDNwkMgr_CheckForChannelChange_1
    447                
    448            // If this new channel does not have an energy level below an acceptable
    449            // threshold, a channel change should not be done.
    450            if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
   \   000088   E5..         MOV     A,?V0 + 4
   \   00008A   C3           CLR     C
   \   00008B   941F         SUBB    A,#0x1f
   \   00008D   4003         JC      $+5
   \   00008F   02....       LJMP    ??CrossCallReturnLabel_8 & 0xFFFF
    451            {
    452          #if defined ( LCD_SUPPORTED )
    453              HalLcdWriteString( (char*)NwkMgrStr_3, HAL_LCD_LINE_1 );
    454              HalLcdWriteStringValueValue( ": ", lowestEnergyValue, 10, 
    455                                           ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL, 10, HAL_LCD_LINE_2 );
    456          #endif
    457              return;
    458            }
    459          
    460            // Channel change should be done -- find out the new active channel
    461            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000092   7F00         MOV     R7,#0x0
    462            {
    463              if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
   \                     ??ZDNwkMgr_CheckForChannelChange_3:
   \   000094   75..01       MOV     ?V0 + 0,#0x1
   \   000097   75..00       MOV     ?V0 + 1,#0x0
   \   00009A   75..00       MOV     ?V0 + 2,#0x0
   \   00009D   75..00       MOV     ?V0 + 3,#0x0
   \   0000A0   EF           MOV     A,R7
   \   0000A1   78..         MOV     R0,#?V0 + 0
   \   0000A3   12....       LCALL   ?L_SHL
   \   0000A6   8C82         MOV     DPL,R4
   \   0000A8   8D83         MOV     DPH,R5
   \   0000AA   A3           INC     DPTR
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?L_AND_X
   \   0000B0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000B3   6004         JZ      ??ZDNwkMgr_CheckForChannelChange_4
    464              {
    465                if ( lowestEnergyIndex == 0 )
   \   0000B5   EE           MOV     A,R6
   \   0000B6   6008         JZ      ??ZDNwkMgr_CheckForChannelChange_5
    466                  break;
    467                lowestEnergyIndex--;
   \   0000B8   1E           DEC     R6
    468              }
    469            }
   \                     ??ZDNwkMgr_CheckForChannelChange_4:
   \   0000B9   0F           INC     R7
   \   0000BA   EF           MOV     A,R7
   \   0000BB   C3           CLR     C
   \   0000BC   941B         SUBB    A,#0x1b
   \   0000BE   40D4         JC      ??ZDNwkMgr_CheckForChannelChange_3
    470            
    471            if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
   \                     ??ZDNwkMgr_CheckForChannelChange_5:
   \   0000C0   90....       MOV     DPTR,#_NIB + 22
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6F           XRL     A,R7
   \   0000C5   607D         JZ      ??CrossCallReturnLabel_8
   \   0000C7   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000CA   7078         JNZ     ??CrossCallReturnLabel_8
    472            {
    473              uint32 channelMask;
    474              zAddrType_t dstAddr;
    475              
    476              // The new channel
    477              ZDNwkMgr_NewChannel = i;
   \   0000CC   EF           MOV     A,R7
   \   0000CD   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   0000D0   F0           MOVX    @DPTR,A
    478                  
    479              // Prior to changing channels, the network manager should store the 
    480              // energy scan value as the last energy scan value and the failure 
    481              // rate from the existing channel as the last failure rate.  These 
    482              // values are useful to allow comparison of the failure rate and energy
    483              // level on the previous channel to evaluate if the network is causing
    484              // its own interference.
    485              ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
   \   0000D1   E5..         MOV     A,?V0 + 4
   \   0000D3   90....       MOV     DPTR,#ZDNwkMgr_LastChannelEnergy
   \   0000D6   F0           MOVX    @DPTR,A
    486              ZDNwkMgr_LastChannelFailureRate = failureRate;
   \   0000D7   90....       MOV     DPTR,#ZDNwkMgr_LastChannelFailureRate
   \   0000DA   EA           MOV     A,R2
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   EB           MOV     A,R3
   \   0000DE   F0           MOVX    @DPTR,A
    487                 
    488              // The network manager should broadcast a Mgmt_NWK_Update_req notifying
    489              // devices of the new channel.  The broadcast shall be to all routers 
    490              // and coordinator.
    491              dstAddr.addrMode = AddrBroadcast;
   \   0000DF   7408         MOV     A,#0x8
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   740F         MOV     A,#0xf
   \   0000E6   F0           MOVX    @DPTR,A
    492              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   74FD         MOV     A,#-0x3
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   74FF         MOV     A,#-0x1
   \   0000F3   F0           MOVX    @DPTR,A
    493              channelMask = (uint32)1 << i;
    494                  
    495              // Increment the nwkUpdateId parameter and set the updateID in the beacon
    496              NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
   \   0000F4                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000F4   90....       MOV     DPTR,#_NIB + 109
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   04           INC     A
   \   0000F9   F9           MOV     R1,A
   \   0000FA   12....       LCALL   ??NLME_SetUpdateID?relay
    497              
    498              ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
   \   0000FD                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   0000FD   E4           CLR     A
   \   0000FE   F5..         MOV     ?V0 + 0,A
   \   000100   F5..         MOV     ?V0 + 1,A
   \   000102   78..         MOV     R0,#?V0 + 0
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   75..01       MOV     ?V0 + 0,#0x1
   \   00010A   75..00       MOV     ?V0 + 2,#0x0
   \   00010D   75..00       MOV     ?V0 + 3,#0x0
   \   000110   EF           MOV     A,R7
   \   000111   78..         MOV     R0,#?V0 + 0
   \   000113   12....       LCALL   ?L_SHL
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00011B   90....       MOV     DPTR,#_NIB + 109
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FD           MOV     R5,A
   \   000120   7C00         MOV     R4,#0x0
   \   000122   79FE         MOV     R1,#-0x2
   \   000124   7406         MOV     A,#0x6
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   AA82         MOV     R2,DPL
   \   00012B   AB83         MOV     R3,DPH
   \   00012D   12....       LCALL   ??ZDP_MgmtNwkUpdateReq?relay
   \   000130   7406         MOV     A,#0x6
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    499                  
    500              // The network manager shall set a timer based on the value of 
    501              // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
    502              // channels and shall not issue another such command until this 
    503              // timer expires.  
    504              ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
   \   000135   90....       MOV     DPTR,#ZDNwkMgr_UpdateRequestTimer
   \   000138   12....       LCALL   ?Subroutine8 & 0xFFFF
    505              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
   \                     ??CrossCallReturnLabel_6:
   \   00013B   7A04         MOV     R2,#0x4
   \   00013D   FB           MOV     R3,A
   \   00013E   12....       LCALL   ??Subroutine27_0 & 0xFFFF
    506                            
    507              // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    508              // the local network manager shall set a timer equal to the 
    509              // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    510              // expiration of this timer.  NOTE: since we won't recevied our own
    511              // broadcasted Update Request, we start the channel change timer here.  
    512              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    513                                  ZDNWKMGR_BCAST_DELIVERY_TIME );
   \                     ??CrossCallReturnLabel_43:
   \   000141                ; Setup parameters for call to function osal_start_timerEx
   \   000141   12....       LCALL   ?Subroutine9 & 0xFFFF
    514            }
   \                     ??CrossCallReturnLabel_8:
   \   000144   7409         MOV     A,#0x9
   \   000146   12....       LCALL   ?DEALLOC_XSTACK8
   \   000149   7F05         MOV     R7,#0x5
   \   00014B   02....       LJMP    ?BANKED_LEAVE_XDATA
    515          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EC           MOV     A,R4
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F582         MOV     DPL,A
   \   000005   ED           MOV     A,R5
   \   000006   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   45..         ORL     A,?V0 + 1
   \   000004   45..         ORL     A,?V0 + 2
   \   000006   45..         ORL     A,?V0 + 3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#_NIB + 7
   \   000003   E0           MOVX    A,@DPTR
   \   000004   75F064       MOV     B,#0x64
   \   000007   A4           MUL     AB
   \   000008   FC           MOV     R4,A
   \   000009   ADF0         MOV     R5,B
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   ??osal_start_timerEx?relay
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   743C         MOV     A,#0x3c
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function osal_start_timerEx
   \   000006                ; Setup parameters for call to function osal_start_timerEx
   \   000006   7C60         MOV     R4,#0x60
   \   000008   7DEA         MOV     R5,#-0x16
   \   00000A   22           RET
    516          #endif  // NWK_MANAGER
    517          
    518          /*********************************************************************
    519           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
    520           *
    521           * @brief       This function processes the incoming Management
    522           *              Network Update request and starts the request (if needed).
    523           *
    524           * @param       Request message
    525           *
    526           * @return      none
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessMgmtNwkUpdateReq:
    529          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    530            ZDO_MgmtNwkUpdateReq_t Req;
    531            
    532            ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
   \   00000E                ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateReq
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDO_ParseMgmtNwkUpdateReq?relay
    533             
    534            if ( Req.scanDuration <= 0x05 )
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C3           CLR     C
   \   000022   9406         SUBB    A,#0x6
   \   000024   5059         JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
    535            {
    536              // Request is to scan over channelMask. The result will be reported by Confirm   
    537              if ( ( !inMsg->wasBroadcast )                     && 
    538                   ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
    539                   ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
   \   000026   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000029   6003         JZ      $+5
   \   00002B   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
   \   00002E   7405         MOV     A,#0x5
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   14           DEC     A
   \   000035   C3           CLR     C
   \   000036   9405         SUBB    A,#0x5
   \   000038   4003         JC      $+5
   \   00003A   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    540              {
    541                if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
   \   00003D                ; Setup parameters for call to function NLME_EDScanRequest
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   12....       LCALL   ?XLOAD_R2345
   \   00004D   12....       LCALL   ??NLME_EDScanRequest?relay
   \   000050   E9           MOV     A,R1
   \   000051   6003         JZ      $+5
   \   000053   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    542                {
    543                  // Save off the information to be used for the notify
    544                  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
   \   000056   EE           MOV     A,R6
   \   000057   240F         ADD     A,#0xf
   \   000059   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00005C   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   00005F   12....       LCALL   ?Subroutine4 & 0xFFFF
    545                  ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_0:
   \   000062   12....       LCALL   ??Subroutine24_0 & 0xFFFF
    546                  
    547                  Req.scanCount--;
   \                     ??CrossCallReturnLabel_33:
   \   000065   7405         MOV     A,#0x5
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   14           DEC     A
   \   00006C   F0           MOVX    @DPTR,A
    548                  
    549                  // Save off scan info for the subsequent scans
    550                  ZDNwkMgr_MgmtNwkUpdateReq = Req;
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   7C..         MOV     R4,#ZDNwkMgr_MgmtNwkUpdateReq & 0xff
   \   000075   7D..         MOV     R5,#(ZDNwkMgr_MgmtNwkUpdateReq >> 8) & 0xff
   \   000077   7409         MOV     A,#0x9
   \   000079   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00007C   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    551                }
    552              }
    553            }
    554            else if ( Req.scanDuration == 0xFE )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   64FE         XRL     A,#0xfe
   \   000082   7057         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2
    555            {
    556              // Request is to change Channel. The command provide a new active
    557              // channel as a single channel in the channelMask.
    558              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   000084   7406         MOV     A,#0x6
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00008C   4003         JC      $+5
   \   00008E   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    559              {
    560                uint8 i;
    561                
    562                // Set update ID in the Beacon
    563                NLME_SetUpdateID(Req.nwkUpdateId); 
   \   000091                ; Setup parameters for call to function NLME_SetUpdateID
   \   000091   7406         MOV     A,#0x6
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   12....       LCALL   ??NLME_SetUpdateID?relay
    564                
    565                // Find out the new active channel
    566                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   00009B   7900         MOV     R1,#0x0
    567                {
    568                  if ( ( (uint32)1 << i ) & Req.channelMask )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3:
   \   00009D   75..01       MOV     ?V0 + 0,#0x1
   \   0000A0   75..00       MOV     ?V0 + 1,#0x0
   \   0000A3   75..00       MOV     ?V0 + 2,#0x0
   \   0000A6   75..00       MOV     ?V0 + 3,#0x0
   \   0000A9   E9           MOV     A,R1
   \   0000AA   78..         MOV     R0,#?V0 + 0
   \   0000AC   12....       LCALL   ?L_SHL
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?L_AND_X
   \   0000BA   12....       LCALL   ?Subroutine20 & 0xFFFF
    569                  {
    570                    break;
    571                  }
    572                }
   \                     ??CrossCallReturnLabel_23:
   \   0000BD   7007         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
   \   0000BF   09           INC     R1
   \   0000C0   E9           MOV     A,R1
   \   0000C1   C3           CLR     C
   \   0000C2   941B         SUBB    A,#0x1b
   \   0000C4   40D7         JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
    573          
    574                if ( _NIB.nwkLogicalChannel != i )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4:
   \   0000C6   90....       MOV     DPTR,#_NIB + 22
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   69           XRL     A,R1
   \   0000CB   7003         JNZ     $+5
   \   0000CD   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    575                {
    576                  ZDNwkMgr_NewChannel = i;
   \   0000D0   E9           MOV     A,R1
   \   0000D1   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   0000D4   F0           MOVX    @DPTR,A
    577                    
    578                  // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    579                  // the local network manager shall set a timer equal to the 
    580                  // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    581                  // expiration of this timer.  Each node shall also increment the 
    582                  // nwkUpdateId parameter and also reset the total transmit count 
    583                  // and the transmit failure counters.  
    584                  osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    585                                      ZDNWKMGR_BCAST_DELIVERY_TIME );
   \   0000D5                ; Setup parameters for call to function osal_start_timerEx
   \   0000D5   12....       LCALL   ?Subroutine9 & 0xFFFF
    586                }
    587              }
    588            }
   \                     ??CrossCallReturnLabel_9:
   \   0000D8   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    589            else if ( Req.scanDuration == 0xFF )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2:
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F4           CPL     A
   \   0000DD   705B         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
    590            {
    591              // Request is to change apsChannelMask and nwkManagerAddr
    592              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   0000DF   7406         MOV     A,#0x6
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000E7   4003         JC      $+5
   \   0000E9   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    593              {
    594                NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
   \   0000EC                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000EC   7406         MOV     A,#0x6
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F9           MOV     R1,A
   \   0000F3   12....       LCALL   ??NLME_SetUpdateID?relay
    595                 
    596                if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
   \   0000F6   85..82       MOV     DPL,?XSP + 0
   \   0000F9   85..83       MOV     DPH,?XSP + 1
   \   0000FC   78..         MOV     R0,#?V0 + 0
   \   0000FE   12....       LCALL   ?L_MOV_X
   \   000101   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000104   602A         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
   \   000106   85..82       MOV     DPL,?XSP + 0
   \   000109   85..83       MOV     DPH,?XSP + 1
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?L_MOV_X
   \   000111   7583..       MOV     DPH,#((_NIB + 36) >> 8) & 0xff
   \   000114   7582..       MOV     DPL,#(_NIB + 36) & 0xff
   \   000117   78..         MOV     R0,#?V0 + 0
   \   000119   12....       LCALL   ?L_EQ_X
   \   00011C   6012         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
    597                {
    598                  _NIB.channelList = Req.channelMask;
   \   00011E   85..82       MOV     DPL,?XSP + 0
   \   000121   85..83       MOV     DPH,?XSP + 1
   \   000124   12....       LCALL   ?XLOAD_R2345
   \   000127   90....       MOV     DPTR,#_NIB + 36
   \   00012A   12....       LCALL   ?XSTORE_R2345
    599                
    600                  // Our Channel List has been changed -- notify to save info into NV
    601                  ZDApp_NwkStateUpdateCB();
   \   00012D                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   00012D   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay
    602                }
    603              
    604                ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6:
   \   000130                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   000130   7407         MOV     A,#0x7
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   12....       LCALL   ?Subroutine10 & 0xFFFF
    605              }
    606            }
   \                     ??CrossCallReturnLabel_10:
   \   000138   804A         SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    607            else // 0x06-0xFD
    608            {
    609              // Request is invalid
    610              if ( !inMsg->wasBroadcast )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5:
   \   00013A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00013D   7045         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    611              {
    612                ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00013F   8E82         MOV     DPL,R6
   \   000141   8F83         MOV     DPH,R7
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   12....       LCALL   ?Subroutine7 & 0xFFFF
    613                ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
    614                                         ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
   \                     ??CrossCallReturnLabel_34:
   \   000148                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   000148   75..00       MOV     ?V0 + 0,#0x0
   \   00014B   78..         MOV     R0,#?V0 + 0
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000150   78..         MOV     R0,#?V0 + 0
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000155   E4           CLR     A
   \   000156   F5..         MOV     ?V0 + 1,A
   \   000158   78..         MOV     R0,#?V0 + 0
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015D   78..         MOV     R0,#?V0 + 0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   78..         MOV     R0,#?V0 + 0
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000167   90....       MOV     DPTR,#__Constant_0
   \   00016A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00016D   7D00         MOV     R5,#0x0
   \   00016F   7C80         MOV     R4,#-0x80
   \   000171   7A..         MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
   \   000173   7B..         MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
   \   000175   EE           MOV     A,R6
   \   000176   240F         ADD     A,#0xf
   \   000178   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    615              }
    616            }
   \                     ??CrossCallReturnLabel_58:
   \   00017B   F9           MOV     R1,A
   \   00017C   12....       LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
   \   00017F   740C         MOV     A,#0xc
   \   000181   12....       LCALL   ?DEALLOC_XSTACK8
    617          }
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1:
   \   000184   7409         MOV     A,#0x9
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
   \   000189   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   90....       MOV     DPTR,#_NIB + 109
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C3           CLR     C
   \   000007   98           SUBB    A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003                REQUIRE ??Subroutine24_0
   \   000003                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   000003                REQUIRE ??Subroutine25_0
   \   000003                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine32_0
   \   000003                ; // Fall through to label ??Subroutine32_0
    618          
    619          /*********************************************************************
    620           * @fn      ZDNwkMgr_ProcessServerDiscRsp
    621           *
    622           * @brief   Process the incoming System Server Discovery Response
    623           *
    624           * @param   pRsp - Structure containing Server Discovery response
    625           *
    626           * @return  none
    627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    628          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessServerDiscRsp:
    629          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    630            ZDO_ServerDiscRsp_t Rsp;
    631            
    632            ZDO_ParseServerDiscRsp( inMsg, &Rsp );
   \   00000E                ; Setup parameters for call to function ZDO_ParseServerDiscRsp
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDO_ParseServerDiscRsp?relay
    633            
    634            if ( Rsp.status == ZSuccess )
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7013         JNZ     ??CrossCallReturnLabel_11
    635            {
    636              // Is the Network Manager bit set in the response?
    637              if ( Rsp.serverMask & NETWORK_MANAGER )
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5440         ANL     A,#0x40
   \   00002C   6009         JZ      ??CrossCallReturnLabel_11
    638              {
    639                // Set the Remote Device's NWK Address as the Network Manager Address
    640                ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
   \   00002E                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   12....       LCALL   ?Subroutine10 & 0xFFFF
    641              }
    642            }
    643          }
   \                     ??CrossCallReturnLabel_11:
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   02....       LJMP    ?Subroutine0 & 0xFFFF
    644          
    645          /*********************************************************************
    646           * @fn          ZDNwkMgr_ProcessChannelInterference
    647           *
    648           * @brief       This function processes the incoming Channel Interference
    649           *              detection message and sends out a notify (if needed).
    650           *
    651           * @param       pChannelInterference - interference message
    652           *
    653           * @return      none
    654           */
    655          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
    656          {
    657            // To avoid a device with communication problems from constantly 
    658            // sending reports to the network manager, the device should not 
    659            // send a Mgmt_NWK_Update_notify more than 4 times per hour.
    660            if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
    661            {
    662              // Conduct an energy scan on all channels.
    663              if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
    664              {
    665                // Save the counters for the Update Notify message to be sent
    666                ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
    667                ZDNwkMgr_TxFailures = pChanInterference->txFailures;
    668          
    669                // Mark scan as channel inetrference check
    670                ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
    671              }
    672            }
    673          }
    674          
    675          /*********************************************************************
    676           * @fn          ZDNwkMgr_ProcessEDScanConfirm
    677           *
    678           * @brief       This function processes the incoming ED Scan Confirm
    679           *              message and sends out a notify (if needed).
    680           *
    681           * @param       pEDScanConfirm - SD Scan Confirmation message
    682           *
    683           * @return      none
    684           */
    685          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
    686          { 
    687            if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
    688            {
    689              // Confirm to scan all channels for channel interference check
    690              ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
    691              
    692              ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
    693            }
    694            else
    695            {
    696              // Confirm to the requested scan
    697              uint16 txFailures = nwkTransmissionFailures( FALSE );
    698              
    699              ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
    700                                                 &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    701                                                 _NIB.nwkTotalTransmissions, txFailures, 
    702                                                 pEDScanConfirm, AF_TX_OPTIONS_NONE );
    703              // More scans needed?
    704              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
    705              {
    706                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
    707              }
    708            }
    709          }
    710          
    711          /*********************************************************************
    712           * @fn          ZDNwkMgr_CheckForChannelInterference
    713           *
    714           * @brief       This function processes the incoming ED Scan Confirm
    715           *              message and sends out an Update Notify (if needed).
    716           *
    717           * @param       pEDScanConfirm - SD Scan Confirmation message
    718           *
    719           * @return      none
    720           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    721          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
   \                     ZDNwkMgr_CheckForChannelInterference:
    722          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    723            uint8 i;
    724            uint8 channelEnergy = 0;
   \   000005   7C00         MOV     R4,#0x0
    725            uint8 energyIncreased = FALSE;
    726              
    727            // Get the current channel energy
    728            if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
   \   000007   75..01       MOV     ?V0 + 0,#0x1
   \   00000A   8C..         MOV     ?V0 + 1,R4
   \   00000C   8C..         MOV     ?V0 + 2,R4
   \   00000E   8C..         MOV     ?V0 + 3,R4
   \   000010   90....       MOV     DPTR,#_NIB + 22
   \   000013   E0           MOVX    A,@DPTR
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?L_SHL
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?L_AND_X
   \   000025   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000028   600B         JZ      ??ZDNwkMgr_CheckForChannelInterference_0
    729            {
    730              channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
   \   00002A   90....       MOV     DPTR,#_NIB + 22
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   EA           MOV     A,R2
   \   000030   28           ADD     A,R0
   \   000031   12....       LCALL   ?Subroutine17 & 0xFFFF
    731            }
   \                     ??CrossCallReturnLabel_37:
   \   000034   FC           MOV     R4,A
    732              
    733            // If this energy scan does not indicate higher energy on the current 
    734            // channel then other channels, no action is taken. The device should 
    735            // continue to operate as normal and the message counters are not reset.
    736            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \                     ??ZDNwkMgr_CheckForChannelInterference_0:
   \   000035   7900         MOV     R1,#0x0
    737            {
    738              if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
    739                   ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
   \                     ??ZDNwkMgr_CheckForChannelInterference_1:
   \   000037   75..01       MOV     ?V0 + 0,#0x1
   \   00003A   75..00       MOV     ?V0 + 1,#0x0
   \   00003D   75..00       MOV     ?V0 + 2,#0x0
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   E9           MOV     A,R1
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?L_SHL
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?L_AND_X
   \   000055   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000058   605A         JZ      ??ZDNwkMgr_CheckForChannelInterference_2
   \   00005A   89..         MOV     ?V0 + 0,R1
   \   00005C   EA           MOV     A,R2
   \   00005D   25..         ADD     A,?V0 + 0
   \   00005F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000062   C3           CLR     C
   \   000063   9C           SUBB    A,R4
   \   000064   504E         JNC     ??ZDNwkMgr_CheckForChannelInterference_2
    740              {
    741                energyIncreased = TRUE;
    742                break;
    743              }
    744            }
    745              
    746            // If the energy scan does indicate increased energy on the channel
    747            // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
    748            // Manager to indicate interference is present.
    749            if ( energyIncreased )
    750            {
    751              // Send a Management Network Update notify to the Network Manager
    752              ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
   \   000066   90....       MOV     DPTR,#_NIB + 105
   \   000069   12....       LCALL   ?Subroutine7 & 0xFFFF
    753              ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    754                                                 ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
    755                                                 pEDScanConfirm, AF_MSG_ACK_REQUEST );
   \                     ??CrossCallReturnLabel_35:
   \   00006C                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   00006C   75..10       MOV     ?V0 + 0,#0x10
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   8A..         MOV     ?V0 + 0,R2
   \   000076   8B..         MOV     ?V0 + 1,R3
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   000080   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000083   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   000086   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000089   7900         MOV     R1,#0x0
   \   00008B   12....       LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
   \   00008E   7405         MOV     A,#0x5
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
    756              ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
   \   000093   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000096   7401         MOV     A,#0x1
   \   000098   F0           MOVX    @DPTR,A
    757                
    758              if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
   \   000099   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   700C         JNZ     ??CrossCallReturnLabel_44
    759              {
    760                // First notify message sent within this hour. Start the Update Notify timer.
    761                ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
   \   00009F   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   0000A2   12....       LCALL   ?Subroutine8 & 0xFFFF
    762                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
    763              }
   \                     ??CrossCallReturnLabel_7:
   \   0000A5   7A02         MOV     R2,#0x2
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   ??Subroutine27_0 & 0xFFFF
    764              
    765              ZDNwkMgr_NumUpdateNotifySent++;
   \                     ??CrossCallReturnLabel_44:
   \   0000AB   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   04           INC     A
   \   0000B0   F0           MOVX    @DPTR,A
    766            }
    767          #if defined ( LCD_SUPPORTED )
    768            else
    769            {
    770              HalLcdWriteString( (char*)NwkMgrStr_4, HAL_LCD_LINE_1 );
    771              HalLcdWriteStringValueValue( ": ", _NIB.nwkLogicalChannel, 10, channelEnergy, 10, HAL_LCD_LINE_2 );
    772            }
    773          #endif
    774          }
   \                     ??ZDNwkMgr_CheckForChannelInterference_3:
   \   0000B1   02....       LJMP    ?Subroutine2 & 0xFFFF
   \                     ??ZDNwkMgr_CheckForChannelInterference_2:
   \   0000B4   09           INC     R1
   \   0000B5   E9           MOV     A,R1
   \   0000B6   C3           CLR     C
   \   0000B7   941B         SUBB    A,#0x1b
   \   0000B9   50F6         JNC     ??ZDNwkMgr_CheckForChannelInterference_3
   \   0000BB   02....       LJMP    ??ZDNwkMgr_CheckForChannelInterference_1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine26_0
   \   000003                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    775          
    776          /*********************************************************************
    777           * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
    778           *
    779           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
    780           *              function sends a unicast message.
    781           *
    782           * @param       TransSeq - transaction sequence number
    783           * @param       dstAddr - destination address of the message
    784           * @param       pEDScanConfirm - update notify info
    785           *
    786           * @return      afStatus_t
    787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    788          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDNwkMgr_BuildAndSendUpdateNotify:
    789                                                         uint16 totalTransmissions, uint16 txFailures,
    790                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
    791                                                         uint8 txOptions )
    792          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 12,R1
   \   000007   8A..         MOV     ?V0 + 14,R2
   \   000009   8B..         MOV     ?V0 + 15,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 3,A
   \   00001B   741A         MOV     A,#0x1a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 10,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 11,A
   \   000027   741C         MOV     A,#0x1c
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 9,A
    793            uint8 i;
    794            uint8 listCount = 0;
   \   00002F   75..00       MOV     ?V0 + 8,#0x0
    795            uint8 *energyValues = NULL;
   \   000032   75..00       MOV     ?V0 + 0,#0x0
   \   000035   75..00       MOV     ?V0 + 1,#0x0
    796            
    797            // Count number of energy detects
    798            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000038   7900         MOV     R1,#0x0
    799            {
    800              if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_0:
   \   00003A   75..01       MOV     ?V0 + 4,#0x1
   \   00003D   75..00       MOV     ?V0 + 5,#0x0
   \   000040   75..00       MOV     ?V0 + 6,#0x0
   \   000043   75..00       MOV     ?V0 + 7,#0x0
   \   000046   E9           MOV     A,R1
   \   000047   78..         MOV     R0,#?V0 + 4
   \   000049   12....       LCALL   ?L_SHL
   \   00004C   85..82       MOV     DPL,?V0 + 10
   \   00004F   85..83       MOV     DPH,?V0 + 11
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   78..         MOV     R0,#?V0 + 4
   \   000057   12....       LCALL   ?L_AND_X
   \   00005A   E5..         MOV     A,?V0 + 4
   \   00005C   45..         ORL     A,?V0 + 5
   \   00005E   45..         ORL     A,?V0 + 6
   \   000060   45..         ORL     A,?V0 + 7
   \   000062   6002         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_1
    801                listCount++;
   \   000064   05..         INC     ?V0 + 8
    802            }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_1:
   \   000066   09           INC     R1
   \   000067   E9           MOV     A,R1
   \   000068   C3           CLR     C
   \   000069   941B         SUBB    A,#0x1b
   \   00006B   40CD         JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_0
    803            
    804            if ( listCount > 0 )
   \   00006D   E5..         MOV     A,?V0 + 8
   \   00006F   6064         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    805            {
    806              energyValues = (uint8 *)osal_mem_alloc( listCount );
   \   000071                ; Setup parameters for call to function osal_mem_alloc
   \   000071   FA           MOV     R2,A
   \   000072   7B00         MOV     R3,#0x0
   \   000074   12....       LCALL   ??osal_mem_alloc?relay
   \   000077   8A..         MOV     ?V0 + 0,R2
   \   000079   8B..         MOV     ?V0 + 1,R3
    807              if ( energyValues )
   \   00007B   EA           MOV     A,R2
   \   00007C   45..         ORL     A,?V0 + 1
   \   00007E   6055         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    808              {
    809                uint8 j = 0;
   \   000080   7A00         MOV     R2,#0x0
    810          
    811                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000082   7900         MOV     R1,#0x0
    812                {
    813                  if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_3:
   \   000084   75..01       MOV     ?V0 + 4,#0x1
   \   000087   75..00       MOV     ?V0 + 5,#0x0
   \   00008A   75..00       MOV     ?V0 + 6,#0x0
   \   00008D   75..00       MOV     ?V0 + 7,#0x0
   \   000090   E9           MOV     A,R1
   \   000091   78..         MOV     R0,#?V0 + 4
   \   000093   12....       LCALL   ?L_SHL
   \   000096   85..82       MOV     DPL,?V0 + 10
   \   000099   85..83       MOV     DPH,?V0 + 11
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   78..         MOV     R0,#?V0 + 4
   \   0000A1   12....       LCALL   ?L_AND_X
   \   0000A4   E5..         MOV     A,?V0 + 4
   \   0000A6   45..         ORL     A,?V0 + 5
   \   0000A8   45..         ORL     A,?V0 + 6
   \   0000AA   45..         ORL     A,?V0 + 7
   \   0000AC   6020         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_4
    814                    energyValues[j++] = pEDScanConfirm->energyDetectList[i];
   \   0000AE   89..         MOV     ?V0 + 4,R1
   \   0000B0   E5..         MOV     A,?V0 + 10
   \   0000B2   25..         ADD     A,?V0 + 4
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E5..         MOV     A,?V0 + 11
   \   0000B8   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    815                }
   \                     ??CrossCallReturnLabel_36:
   \   0000BB   C0E0         PUSH    A
   \   0000BD   8A..         MOV     ?V0 + 4,R2
   \   0000BF   E5..         MOV     A,?V0 + 0
   \   0000C1   25..         ADD     A,?V0 + 4
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   EB           MOV     A,R3
   \   0000C6   3400         ADDC    A,#0x0
   \   0000C8   F583         MOV     DPH,A
   \   0000CA   D0E0         POP     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   0A           INC     R2
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_4:
   \   0000CE   09           INC     R1
   \   0000CF   E9           MOV     A,R1
   \   0000D0   C3           CLR     C
   \   0000D1   941B         SUBB    A,#0x1b
   \   0000D3   40AF         JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_3
    816              }
    817            }
    818              
    819            // Send a Management Network Update notify back
    820            ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
    821                                     pEDScanConfirm->scannedChannels,
    822                                     totalTransmissions, txFailures,
    823                                     listCount, energyValues, txOptions, false );
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_2:
   \   0000D5                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   0000D5   75..00       MOV     ?V0 + 4,#0x0
   \   0000D8   78..         MOV     R0,#?V0 + 4
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   E5..         MOV     A,?V0 + 9
   \   0000DF   F5..         MOV     ?V0 + 4,A
   \   0000E1   78..         MOV     R0,#?V0 + 4
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E6   78..         MOV     R0,#?V0 + 0
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EB   78..         MOV     R0,#?V0 + 2
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F0   8E..         MOV     ?V0 + 2,R6
   \   0000F2   8F..         MOV     ?V0 + 3,R7
   \   0000F4   78..         MOV     R0,#?V0 + 2
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   85..82       MOV     DPL,?V0 + 10
   \   0000FC   85..83       MOV     DPH,?V0 + 11
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000105   AD..         MOV     R5,?V0 + 8
   \   000107   85..82       MOV     DPL,?V0 + 10
   \   00010A   85..83       MOV     DPH,?V0 + 11
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   FC           MOV     R4,A
   \   000111   AA..         MOV     R2,?V0 + 14
   \   000113   AB..         MOV     R3,?V0 + 15
   \   000115   A9..         MOV     R1,?V0 + 12
   \   000117   12....       LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
   \   00011A   740C         MOV     A,#0xc
   \   00011C   12....       LCALL   ?DEALLOC_XSTACK8
    824            if ( energyValues )
   \   00011F   E5..         MOV     A,?V0 + 0
   \   000121   45..         ORL     A,?V0 + 1
   \   000123   6007         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_5
    825              osal_mem_free( energyValues );
   \   000125                ; Setup parameters for call to function osal_mem_free
   \   000125   AA..         MOV     R2,?V0 + 0
   \   000127   AB..         MOV     R3,?V0 + 1
   \   000129   12....       LCALL   ??osal_mem_free?relay
    826          }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_5:
   \   00012C   7F10         MOV     R7,#0x10
   \   00012E   02....       LJMP    ?BANKED_LEAVE_XDATA
    827          
    828          #if defined ( NWK_MANAGER )
    829          /*********************************************************************
    830           * @fn      NwkMgr_SetNwkManager
    831           *
    832           * @brief   Set the local device as the Network Manager
    833           *
    834           * @param   none
    835           *
    836           * @return  none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void NwkMgr_SetNwkManager( void )
   \                     NwkMgr_SetNwkManager:
    839          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    840            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
   \   000004   90....       MOV     DPTR,#zgNwkMgrMode
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   700D         JNZ     ??NwkMgr_SetNwkManager_0
    841            {
    842              // We're the Network Manager. Set our address as the Network Manager Address
    843              ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
   \   00000C                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   00000C   90....       MOV     DPTR,#_NIB + 20
   \   00000F   12....       LCALL   ?Subroutine10 & 0xFFFF
    844              
    845              // Set the Network Manager bit of the Server Mask
    846              ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
   \                     ??CrossCallReturnLabel_12:
   \   000012   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   4440         ORL     A,#0x40
   \   000018   F0           MOVX    @DPTR,A
    847            }
    848          }
   \                     ??NwkMgr_SetNwkManager_0:
   \   000019   80..         SJMP    ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    849          #endif // NWK_MANAGER
    850          
    851          /*********************************************************************
    852           * @fn      ZDApp_SetNwkManagerAddr()
    853           *
    854           * @brief   Sets the nwkManagerAddr in NIB.
    855           *
    856           * @param   nwkManagerAddr
    857           *
    858           * @return  none
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
   \                     ZDNwkMgr_SetNwkManagerAddr:
    861          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    862            if ( _NIB.nwkManagerAddr != nwkManagerAddr )
   \   000004   90....       MOV     DPTR,#_NIB + 105
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6A           XRL     A,R2
   \   000009   7003         JNZ     ??ZDNwkMgr_SetNwkManagerAddr_0
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6B           XRL     A,R3
   \                     ??ZDNwkMgr_SetNwkManagerAddr_0:
   \   00000E   600B         JZ      ??ZDNwkMgr_SetNwkManagerAddr_1
    863            {
    864              // Update the Network Manager Address
    865              _NIB.nwkManagerAddr = nwkManagerAddr;
   \   000010   90....       MOV     DPTR,#_NIB + 105
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
    866            
    867              // Our Network Manger Address has been changed -- notify to save info into NV
    868              ZDApp_NwkStateUpdateCB();
   \   000018                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000018   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay
    869            }
    870          }
   \                     ??ZDNwkMgr_SetNwkManagerAddr_1:
   \   00001B   80..         SJMP    ??Subroutine28_0
    871          
    872          /*********************************************************************
    873           * @fn          ZDNwkMgr_ReportChannelInterference
    874           *
    875           * @brief       This function builds a Channel Interference detection
    876           *              message and then forwards it to the Network Manager.
    877           *
    878           * @param       chanInterference
    879           *
    880           * @return      none
    881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    882          void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
   \                     ZDNwkMgr_ReportChannelInterference:
    883          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    884            ZDNwkMgr_ChanInterference_t *pChanInterference;
    885          
    886            // Send Channel Interference message to the Network Manager task
    887            pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A06         MOV     R2,#0x6
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay
    888            if ( pChanInterference )
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   6029         JZ      ??CrossCallReturnLabel_16
    889            {
    890              pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   7431         MOV     A,#0x31
   \   00001A   F0           MOVX    @DPTR,A
    891                
    892              // Build the structure
    893              pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E8           MOV     A,R0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E9           MOV     A,R1
   \   00002C   12....       LCALL   ?Subroutine4 & 0xFFFF
    894              pChanInterference->txFailures = chanInterference->txFailures;
   \                     ??CrossCallReturnLabel_1:
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    895                        
    896              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
   \                     ??CrossCallReturnLabel_32:
   \   00003A                ; Setup parameters for call to function osal_msg_send
   \   00003A   12....       LCALL   ?Subroutine15 & 0xFFFF
    897            }
    898          }
   \                     ??CrossCallReturnLabel_16:
   \   00003D   7F02         MOV     R7,#0x2
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_msg_send?relay
   \   000008   22           RET
    899          
    900          /*********************************************************************
    901           * @fn          ZDNwkMgr_EDScanConfirmCB
    902           *
    903           * @brief       Handle Energy Scan confirm callback
    904           *
    905           * @param       scannedChannels  - scanned channels
    906           * @param       energyDetectList - measured energy for channels
    907           *
    908           * @return      none
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
   \                     ZDNwkMgr_EDScanConfirmCB:
    911          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    912            ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
    913          
    914            // Send ED Confirm to the Network Manager task
    915            pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A22         MOV     R2,#0x22
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   \   000014   AE..         MOV     R6,?V0 + 2
   \   000016   AF..         MOV     R7,?V0 + 3
    916            if ( pEDScanConfirm )
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   605E         JZ      ??CrossCallReturnLabel_17
    917            {
    918              pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   7432         MOV     A,#0x32
   \   000022   F0           MOVX    @DPTR,A
    919                
    920              // Build the structure
    921              pEDScanConfirm->status = EDScanConfirm->status;
   \   000023   85..82       MOV     DPL,?V0 + 0
   \   000026   85..83       MOV     DPH,?V0 + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
    922              pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
   \   000031   85..82       MOV     DPL,?V0 + 0
   \   000034   85..83       MOV     DPH,?V0 + 1
   \   000037   A3           INC     DPTR
   \   000038   12....       LCALL   ?XLOAD_R2345
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?XSTORE_R2345
    923              osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   85..82       MOV     DPL,?V0 + 0
   \   000048   85..83       MOV     DPH,?V0 + 1
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V0 + 1,A
   \   000057   75..00       MOV     ?V0 + 2,#0x0
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005F   7C1B         MOV     R4,#0x1b
   \   000061   7D00         MOV     R5,#0x0
   \   000063   EE           MOV     A,R6
   \   000064   2407         ADD     A,#0x7
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   3400         ADDC    A,#0x0
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   ??osal_memcpy?relay
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    924                
    925              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
   \   000073                ; Setup parameters for call to function osal_msg_send
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ?Subroutine15 & 0xFFFF
    926            }
    927          }
   \                     ??CrossCallReturnLabel_17:
   \   00007A                REQUIRE ?Subroutine2
   \   00007A                ; // Fall through to label ?Subroutine2
    928          
    929          /*********************************************************************
    930           * @fn      ZDNwkMgr_ProcessDataConfirm
    931           *
    932           * @brief   Process received Confirmation for Mgmt NWK Update Notify message
    933           *
    934           * @param   none
    935           *
    936           * @return  none
    937           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    938          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
   \                     ZDNwkMgr_ProcessDataConfirm:
    939          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    940            if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
    941                 ( afDataConfirm->transID == 0 )     && 
    942                 ( afDataConfirm->hdr.status == ZSuccess ) )
   \   000004   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000007   E0           MOVX    A,@DPTR
   \   000008   601A         JZ      ??ZDNwkMgr_ProcessDataConfirm_0
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   7010         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7008         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
    943            {
    944              // The Mgmt NWK Update Notify was sent as an APS Unicast with  
    945              // acknowledgement and once the acknowledgment is received the 
    946              // total transmit and transmit failure counters are reset to zero.  
    947              _NIB.nwkTotalTransmissions = 0;
   \   00001C   12....       LCALL   ?Subroutine6 & 0xFFFF
    948              nwkTransmissionFailures( TRUE );
    949              
    950              ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \                     ??CrossCallReturnLabel_5:
   \   00001F   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
    951            }
    952          }
   \                     ??ZDNwkMgr_ProcessDataConfirm_0:
   \   000024   02....       LJMP    ??Subroutine28_0 & 0xFFFF
    953          
    954          /*********************************************************************
    955           * PAN ID Conflict Routines
    956           */
    957          #if defined ( NWK_MANAGER )
    958          /*********************************************************************
    959           * @fn          ZDNwkMgr_NetworkReportCB
    960           *
    961           * @brief       Handle the Network Report Command
    962           *
    963           * @param       srcAddr     - Source Address of the message.
    964           * @param       status      - ZSuccess.
    965           * @param       serverMask  - Bit mask of services matching the req serverMask.
    966           * @param       securityUse -
    967           *
    968           * @return      none
    969           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function osal_msg_send
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function osal_msg_send
   \   000004   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000007                REQUIRE ??Subroutine28_0
   \   000007                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    970          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
   \                     ZDNwkMgr_NetworkReportCB:
   \   000000   02....       LJMP    ?Subroutine3 & 0xFFFF
    971          { 
    972            // Send Network Report message to the Network Manager task
    973            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
    974          }
    975          
    976          /*********************************************************************
    977           * @fn          ZDNwkMgr_NetworkUpdateCB
    978           *
    979           * @brief       Handle the Network Update Command
    980           *
    981           * @param       srcAddr     - Source Address of the message.
    982           * @param       status      - ZSuccess.
    983           * @param       serverMask  - Bit mask of services matching the req serverMask.
    984           * @param       securityUse -
    985           *
    986           * @return      none
    987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    988          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
   \                     ZDNwkMgr_NetworkUpdateCB:
   \   000000   02....       LJMP    ?Subroutine3 & 0xFFFF
    989          {
    990            // Send Network Update message to the Network Manager task
    991            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
    992          }
    993          
    994          /*********************************************************************
    995           * @fn      ZDNwkMgr_ProcessNetworkReport
    996           *
    997           * @brief   Process the incoming Network Report message
    998           *
    999           * @param   pNetworkReport - Structure containing Network Report message
   1000           *
   1001           * @return  none
   1002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1003          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
   \                     ZDNwkMgr_ProcessNetworkReport:
   1004          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1005            uint8 i;
   1006            uint16 newPID;
   1007            uint8 unique = TRUE;
   \   000009   75..01       MOV     ?V0 + 2,#0x1
   1008          
   1009            if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7072         JNZ     ??ZDNwkMgr_ProcessNetworkReport_0
   1010            {
   1011              if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
   \   000017   90....       MOV     DPTR,#ZDNwkMgr_PanIdUpdateInProgress
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   706C         JNZ     ??ZDNwkMgr_ProcessNetworkReport_0
   \   00001D   8023         SJMP    ??ZDNwkMgr_ProcessNetworkReport_1
   1012              {
   1013                do
   1014                {
   1015                  // select a new PAN ID
   1016                  newPID = (uint16)osal_rand();
   1017                
   1018                  // Make sure that the chosen PAN ID is not already in use in the
   1019                  // local neighborhood and also not contained within the Report 
   1020                  // Information field of the Network Report Command frame
   1021                  for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
   1022                  {
   1023                    if ( pNetworkReport->panIDs[i] == newPID )
   \                     ??ZDNwkMgr_ProcessNetworkReport_2:
   \   00001F   EA           MOV     A,R2
   \   000020   C3           CLR     C
   \   000021   33           RLC     A
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   F9           MOV     R1,A
   \   000026   EE           MOV     A,R6
   \   000027   28           ADD     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   EF           MOV     A,R7
   \   00002A   39           ADDC    A,R1
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   240E         ADD     A,#0xe
   \   00002F   F582         MOV     DPL,A
   \   000031   E9           MOV     A,R1
   \   000032   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000035   65..         XRL     A,?V0 + 0
   \   000037   7004         JNZ     ??ZDNwkMgr_ProcessNetworkReport_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   65..         XRL     A,?V0 + 1
   \                     ??ZDNwkMgr_ProcessNetworkReport_3:
   \   00003D   700E         JNZ     ??ZDNwkMgr_ProcessNetworkReport_4
   1024                    {
   1025                      unique = FALSE;
   \   00003F   75..00       MOV     ?V0 + 2,#0x0
   1026                      break;
   1027                    }
   1028                  }
   \                     ??ZDNwkMgr_ProcessNetworkReport_1:
   \   000042                ; Setup parameters for call to function osal_rand
   \   000042   12....       LCALL   ??osal_rand?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   8001         SJMP    ??ZDNwkMgr_ProcessNetworkReport_5
   \                     ??ZDNwkMgr_ProcessNetworkReport_4:
   \   00004D   0A           INC     R2
   \                     ??ZDNwkMgr_ProcessNetworkReport_5:
   \   00004E   EE           MOV     A,R6
   \   00004F   240D         ADD     A,#0xd
   \   000051   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   1029                } while ( !unique );
   \                     ??CrossCallReturnLabel_59:
   \   000054   F8           MOV     R0,A
   \   000055   EA           MOV     A,R2
   \   000056   C3           CLR     C
   \   000057   98           SUBB    A,R0
   \   000058   40C5         JC      ??ZDNwkMgr_ProcessNetworkReport_2
   \   00005A   E5..         MOV     A,?V0 + 2
   \   00005C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005E   50E2         JNC     ??ZDNwkMgr_ProcessNetworkReport_1
   1030                   
   1031                // Send out a Network Update command.
   1032                NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
   1033                                        _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
   \   000060                ; Setup parameters for call to function NLME_SendNetworkUpdate
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   90....       MOV     DPTR,#_NIB + 109
   \   000068   E0           MOVX    A,@DPTR
   \   000069   04           INC     A
   \   00006A   F5..         MOV     ?V0 + 0,A
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000073   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000075   7900         MOV     R1,#0x0
   \   000077   7AFF         MOV     R2,#-0x1
   \   000079   7BFF         MOV     R3,#-0x1
   \   00007B   12....       LCALL   ??NLME_SendNetworkUpdate?relay
   \   00007E   7403         MOV     A,#0x3
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1034              
   1035                ZDNwkMgr_PanIdUpdateInProgress = TRUE;
   \   000083   90....       MOV     DPTR,#ZDNwkMgr_PanIdUpdateInProgress
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
   1036              }
   1037            }
   1038          }
   \                     ??ZDNwkMgr_ProcessNetworkReport_0:
   \   000089   02....       LJMP    ?Subroutine1 & 0xFFFF
   1039          
   1040          /*********************************************************************
   1041           * @fn      ZDNwkMgr_ProcessNetworkUpdate
   1042           *
   1043           * @brief   Process the incoming Network Update message
   1044           *
   1045           * @param   pNetworkReport - Structure containing Network Update message
   1046           *
   1047           * @return  none
   1048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1049          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
   \                     ZDNwkMgr_ProcessNetworkUpdate:
   1050          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1051            if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   7008         JNZ     ??ZDNwkMgr_ProcessNetworkUpdate_0
   1052            { 
   1053              // Our PAN ID has been changed -- notify to save info into NV
   1054              ZDApp_NwkStateUpdateCB();
   \   00000D                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   00000D   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay
   1055              
   1056              ZDNwkMgr_PanIdUpdateInProgress = FALSE;
   \   000010   90....       MOV     DPTR,#ZDNwkMgr_PanIdUpdateInProgress
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1057            }
   1058          }
   \                     ??ZDNwkMgr_ProcessNetworkUpdate_0:
   \   000015   02....       LJMP    ??Subroutine28_0 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_CheckForChannelChange?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_CheckForChannelChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_CheckForChannelInterference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_CheckForChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_BuildAndSendUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NwkMgr_SetNwkManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NwkMgr_SetNwkManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_SetNwkManagerAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_SetNwkManagerAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ReportChannelInterference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ReportChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_EDScanConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_EDScanConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_NetworkReportCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_NetworkReportCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_NetworkUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_NetworkUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessNetworkReport?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessNetworkReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessNetworkUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessNetworkUpdate
   1059          #endif // NWK_MANAGER
   1060          
   1061          
   1062          /*********************************************************************
   1063          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NwkMgr_SetNwkManager               2      0      0
       -> ZDNwkMgr_SetNwkManagerAddr
                                        4      0      0
     ZDNwkMgr_BuildAndSendUpdateNotify
                                        1      0     55
       -> osal_mem_alloc                0      0     48
       -> ZDP_MgmtNwkUpdateNotify       0      0     72
       -> osal_mem_free                 0      0     48
     ZDNwkMgr_CheckForChannelChange     0      0     42
       -> NLME_SetUpdateID              0      0     44
       -> ZDP_MgmtNwkUpdateReq          0      0     56
       -> osal_start_timerEx            0      0     44
       -> osal_start_timerEx            0      0     44
     ZDNwkMgr_CheckForChannelInterference
                                        0      0     31
       -> ZDNwkMgr_BuildAndSendUpdateNotify
                                        0      0     34
       -> osal_start_timerEx            0      0     24
     ZDNwkMgr_EDScanConfirmCB           1      0     15
       -> osal_msg_allocate             0      0     24
       -> osal_memcpy                   0      0     30
       -> osal_msg_send                 0      0     24
     ZDNwkMgr_Init                      0      0      9
       -> ZDO_RegisterForZDOMsg         0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
     ZDNwkMgr_NetworkReportCB           2      0      0
       -> osal_msg_send                 4      0      0
     ZDNwkMgr_NetworkUpdateCB           2      0      0
       -> osal_msg_send                 4      0      0
     ZDNwkMgr_ProcessDataConfirm        2      0      0
       -> nwkTransmissionFailures       4      0      0
     ZDNwkMgr_ProcessMgmtNwkUpdateReq
                                        2      0     47
       -> ZDO_ParseMgmtNwkUpdateReq     0      0     42
       -> NLME_EDScanRequest            0      0     42
       -> NLME_SetUpdateID              0      0     42
       -> osal_start_timerEx            0      0     42
       -> NLME_SetUpdateID              0      0     42
       -> ZDApp_NwkStateUpdateCB        0      0     42
       -> ZDNwkMgr_SetNwkManagerAddr
                                        0      0     42
       -> ZDP_MgmtNwkUpdateNotify       0      0     66
     ZDNwkMgr_ProcessNetworkReport      0      0     31
       -> osal_rand                     0      0     28
       -> NLME_SendNetworkUpdate        0      0     34
     ZDNwkMgr_ProcessNetworkUpdate      2      0     14
       -> ZDApp_NwkStateUpdateCB        4      0      0
     ZDNwkMgr_ProcessServerDiscRsp      0      0     26
       -> ZDO_ParseServerDiscRsp        0      0     24
       -> ZDNwkMgr_SetNwkManagerAddr
                                        0      0     24
     ZDNwkMgr_ReportChannelInterference
                                        0      0     10
       -> osal_msg_allocate             0      0     20
       -> osal_msg_send                 0      0     20
     ZDNwkMgr_SetNwkManagerAddr         2      0     21
       -> ZDApp_NwkStateUpdateCB        4      0      0
     ZDNwkMgr_event_loop                0      0     19
       -> osal_msg_receive              0      0     28
       -> ZDNwkMgr_ProcessNetworkUpdate
                                        0      0     28
       -> osal_msg_deallocate           0      0     28
       -> osal_msg_receive              0      0     28
       -> ZDNwkMgr_ProcessServerDiscRsp
                                        0      0     28
       -> ZDO_ParseMgmtNwkUpdateNotify
                                        0      0     28
       -> ZDNwkMgr_CheckForChannelChange
                                        0      0     28
       -> osal_mem_free                 0      0     28
       -> ZDNwkMgr_ProcessMgmtNwkUpdateReq
                                        0      0     28
       -> NLME_EDScanRequest            0      0     28
       -> ZDNwkMgr_CheckForChannelInterference
                                        0      0     28
       -> nwkTransmissionFailures       0      0     28
       -> ZDNwkMgr_BuildAndSendUpdateNotify
                                        0      0     38
       -> osal_start_timerEx            0      0     28
       -> ZDNwkMgr_ProcessNetworkReport
                                        0      0     28
       -> ZMacSetReq                    0      0     28
       -> ZDApp_NwkStateUpdateCB        0      0     28
       -> nwkTransmissionFailures       0      0     28
       -> osal_start_timerEx            0      0     28
       -> osal_start_timerEx            0      0     28
       -> NLME_EDScanRequest            0      0     28


   Segment part sizes:

     Function/Label                               Bytes
     --------------                               -----
     ZDNwkMgr_TaskID                                 1
     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
                                                     1
     ZDNwkMgr_MgmtNwkUpdateNotifyAddr
                                                     9
     ZDNwkMgr_UpdateNotifyTimer                      2
     ZDNwkMgr_NumUpdateNotifySent                    1
     ZDNwkMgr_WaitingForNotifyConfirm
                                                     1
     ZDNwkMgr_TotalTransmissions                     2
     ZDNwkMgr_TxFailures                             2
     ZDNwkMgr_MgmtNwkUpdateReq                       9
     ZDNwkMgr_UpdateRequestTimer                     2
     ZDNwkMgr_LastChannelEnergy                      1
     ZDNwkMgr_LastChannelFailureRate
                                                     2
     ZDNwkMgr_NewChannel                             1
     ZDNwkMgr_PanIdUpdateInProgress                  1
     pZDNwkMgr_ReportChannelInterference
                                                     2
     pZDNwkMgr_ProcessDataConfirm                    2
     pZDNwkMgr_EDScanConfirmCB                       2
     pZDNwkMgr_NetworkReportCB                       2
     pZDNwkMgr_NetworkUpdateCB                       2
     ZDNwkMgr_Init                                 106
     ?Subroutine0                                    5
     ZDNwkMgr_event_loop                           500
     ?Subroutine1                                    5
     ?Subroutine5                                   14
     ?Subroutine12                                   3
     ??Subroutine23_0                                6
     ??Subroutine25_0                                6
     ?Subroutine14                                  10
     ?Subroutine11                                   2
     ??Subroutine27_0                                9
     ?Subroutine13                                   2
     ??Subroutine29_0                                2
     ??Subroutine30_0                                4
     ?Subroutine21                                   6
     ?Subroutine6                                   13
     ??Subroutine32_0                                6
     ZDNwkMgr_CheckForChannelChange                334
     ?Subroutine18                                  14
     ?Subroutine20                                   9
     ?Subroutine9                                   24
     ?Subroutine22                                  12
     ?Subroutine8                                   11
     ZDNwkMgr_ProcessMgmtNwkUpdateReq
                                                   396
     ?Subroutine16                                   9
     ?Subroutine7                                    3
     ??Subroutine24_0                                3
     ?Subroutine10                                   9
     ?Subroutine4                                   11
     ?Subroutine2                                    5
     ?Subroutine19                                   3
     ??Subroutine31_0                                3
     ZDNwkMgr_ProcessServerDiscRsp                  63
     ZDNwkMgr_CheckForChannelInterference
                                                   190
     ?Subroutine17                                   3
     ??Subroutine26_0                                5
     ZDNwkMgr_BuildAndSendUpdateNotify
                                                   305
     NwkMgr_SetNwkManager                           27
     ??Subroutine28_0                                7
     ZDNwkMgr_SetNwkManagerAddr                     29
     ZDNwkMgr_ReportChannelInterference
                                                    66
     ?Subroutine15                                   9
     ZDNwkMgr_EDScanConfirmCB                      122
     ZDNwkMgr_ProcessDataConfirm                    39
     ?Subroutine3                                    7
     ZDNwkMgr_NetworkReportCB                        3
     ZDNwkMgr_NetworkUpdateCB                        3
     ZDNwkMgr_ProcessNetworkReport                 140
     ZDNwkMgr_ProcessNetworkUpdate                  24
     __Constant_7fff800                              4
     __Constant_0                                    4
     ??ZDNwkMgr_Init?relay                           6
     ??ZDNwkMgr_event_loop?relay                     6
     ??ZDNwkMgr_CheckForChannelChange?relay          6
     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay        6
     ??ZDNwkMgr_ProcessServerDiscRsp?relay           6
     ??ZDNwkMgr_CheckForChannelInterference?relay    6
     ??ZDNwkMgr_BuildAndSendUpdateNotify?relay       6
     ??NwkMgr_SetNwkManager?relay                    6
     ??ZDNwkMgr_SetNwkManagerAddr?relay              6
     ??ZDNwkMgr_ReportChannelInterference?relay      6
     ??ZDNwkMgr_EDScanConfirmCB?relay                6
     ??ZDNwkMgr_ProcessDataConfirm?relay             6
     ??ZDNwkMgr_NetworkReportCB?relay                6
     ??ZDNwkMgr_NetworkUpdateCB?relay                6
     ??ZDNwkMgr_ProcessNetworkReport?relay           6
     ??ZDNwkMgr_ProcessNetworkUpdate?relay           6

 
 2 587 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     8 bytes in segment XDATA_ROM_C
    45 bytes in segment XDATA_Z
 
 2 683 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
    45 bytes of XDATA memory

Errors: none
Warnings: none
