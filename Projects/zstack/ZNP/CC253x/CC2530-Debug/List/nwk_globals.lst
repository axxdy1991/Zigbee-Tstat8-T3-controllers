###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         24/Mar/2014  09:41:31 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Components\stack\nwk\nwk_globals.c           #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\Source\znp #
#                          .cfg" (-DMAC_CFG_APP_PENDING_QUEUE=TRUE            #
#                          "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR   #
#                          | DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)"   #
#                          -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE -DZIGBEEPRO   #
#                          -DZIGBEE_FRAGMENTATION -DOSAL_CLOCK                #
#                          -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE -DNV_INIT   #
#                          -DNUM_DISC_ATTEMPTS=0) -f "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg #
#                          " (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0    #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00001000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Components\stack\nwk\nwk_globals.c" -D      #
#                          xPOWER_SAVING -D NV_RESTORE -lC "C:\Documents and  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\CC2530-Debug\List\" -lA            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Lis #
#                          t\" --diag_suppress Pe001,Pa010 -o "C:\Documents   #
#                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Project #
#                          s\zstack\ZNP\CC253x\CC2530-Debug\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\" -I          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\Source\" -I      #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\Source\" -I   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\SE\Source\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\ZMain #
#                          \TI2530ZNP\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\hal\include #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\. #
#                          .\Components\hal\target\CC2530ZNP\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\mac\include\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\high_le #
#                          vel\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\single_chip\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mt\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\osal\include\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sa #
#                          ddr\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sd #
#                          ata\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\af\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\C #
#                          omponents\stack\nwk\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\.. #
#                          \Components\stack\sec\" -I "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\stack\zcl\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\zmac\" -I "C:\Documents and             #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"  #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\List #
#                          \nwk_globals.lst                                   #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ #
#                          nwk_globals.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          
     57          #if defined ( LCD_SUPPORTED )
     58            #include "OnBoard.h"
     59          #endif
     60          
     61          /* HAL */
     62          #include "hal_lcd.h"
     63          
     64          /*********************************************************************
     65           * MACROS
     66           */
     67          
     68          /*********************************************************************
     69           * CONSTANTS
     70           */
     71          
     72          // Maximums for the data buffer queue
     73          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     74          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     75          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     76          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     77          
     78          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     79          // A known shortcoming is that when a message is enqueued as "hold" for a
     80          // sleeping device, the timer tick may have counted down to 1, so that msg
     81          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     82          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     83          // So the hold time will vary within this interval:
     84          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     85          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     86          #define NWK_INDIRECT_CNT_RTG_TMR    1
     87          // To hold msg for sleeping end devices for 30 secs:
     88          // #define CNT_RTG_TIMER            1
     89          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     90          // To hold msg for sleeping end devices for 30 mins:
     91          // #define CNT_RTG_TIMER            60
     92          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     93          // To hold msg for sleeping end devices for 30 days:
     94          // #define CNT_RTG_TIMER            60
     95          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     96          // Maximum msgs to hold per associated device.
     97          #define NWK_INDIRECT_MSG_MAX_PER    3
     98          // Maximum total msgs to hold for all associated devices.
     99          #define NWK_INDIRECT_MSG_MAX_ALL    \
    100                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          
    106          /*********************************************************************
    107           * NWK GLOBAL VARIABLES
    108           */
    109          
    110          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    111          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
    112          
    113          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    114          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   05           DB 5
    115          
    116          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    117          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    121          

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    125          
    126          // change this if using a different stack profile...
    127          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          
    130          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    134            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    135            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    136          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    137            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    138            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    140            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142          #endif // STACK_PROFILE_ID
    143          
    144          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
    149          
    150          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )

   \                                 In  segment CODE_C, align 1
    151            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    152            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    153          #else
    154            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    155            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    156          #endif
    157          

   \                                 In  segment CODE_C, align 1
    158          CONST uint16 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   2800         DW 40

   \                                 In  segment CODE_C, align 1
    159          CONST uint16 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C00         DW 12

   \                                 In  segment CODE_C, align 1
    160          CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    161          

   \                                 In  segment CODE_C, align 1
    162          CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    163          
    164           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment CODE_C, align 1
    167          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    170          

   \                                 In  segment CODE_C, align 1
    171          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    172          

   \                                 In  segment CODE_C, align 1
    173          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    174          
    175          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    177          
    178          #if defined ( ZIGBEE_SOURCE_ROUTING )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    181          #endif
    182          
    183          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    185          
    186          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    188          
    189          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    192          

   \                                 In  segment CODE_C, align 1
    193          CONST uint8 gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    194          
    195          // For tree addressing, this switch allows the allocation of a
    196          // router address to an end device when end device address are
    197          // all used up.  If this option is enabled, address space
    198          // could be limited.

   \                                 In  segment CODE_C, align 1
    199          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    200          
    201          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    202          // number of link status periods after the last received address conflict report
    203          // (network status command)

   \                                 In  segment CODE_C, align 1
    204          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    205          #endif
    206          
    207          #if defined ( ZIGBEE_FREQ_AGILITY )

   \                                 In  segment CODE_C, align 1
    208          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    209          #endif
    210          
    211          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    212          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    213          
    214          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    215          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    216          
    217          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    218          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    219          
    220          // Network message radius

   \                                 In  segment CODE_C, align 1
    221          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    222          
    223          #if ( ZSTACK_ROUTER_BUILD )

   \                                 In  segment CODE_C, align 1
    224          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    225          #endif
    226          
    227          /*********************************************************************
    228           * APS GLOBAL VARIABLES
    229           */
    230          
    231          // The Maximum number of binding records
    232          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    233          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    234          
    235          #if defined ( REFLECTOR )
    236            // The Maximum number of cluster IDs in a binding record
    237            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    238            CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    239          

   \                                 In  segment CODE_C, align 1
    240            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    241          
    242            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    243            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    244          #endif
    245          
    246          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    247          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    248          
    249          // APS End Device Broadcast Table
    250          #if ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    251            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
   \                     apsEndDeviceBroadcastTable:
   \   000000                DS 90
   \   00005A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    252            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
   \                     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
   \   000001                REQUIRE __INIT_XDATA_I
    253          #endif
    254          
    255          /*********************************************************************
    256           * SECURITY GLOBAL VARIABLES
    257           */
    258          
    259          // This is the default pre-configured key,
    260          // change this to make a unique key
    261          // SEC_KEY_LEN is defined in ssp.h.
    262          
    263          #if defined ( DEFAULT_KEY )
    264          //CONST uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;

   \                                 In  segment XDATA_I, align 1, keep-with-next
    265            uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for defaultKey>`
   \   000010                REQUIRE __INIT_XDATA_I
    266          #else
    267          CONST uint8 defaultKey[SEC_KEY_LEN] =
    268          {
    269          #if defined ( APP_TP ) || defined ( APP_TP2 )
    270            // Key for ZigBee Conformance Testing
    271            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    272            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    273          #else
    274            // Key for In-House Testing
    275            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    276            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    277          #endif
    278          };
    279          #endif
    280          
    281          // This is the default pre-configured Trust Center Link key,
    282          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    283          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    284          
    285          /*********************************************************************
    286           * GLOBAL VARIABLES - Statistics
    287           */
    288          
    289          #if defined ( PACKET_FILTER_STATS )
    290            uint32 apsInvalidPackets = 0;
    291            uint32 apsSecurityFailures = 0;
    292            uint32 nwkInvalidPackets = 0;
    293            uint32 nwkSecurityFailures = 0;
    294          #endif
    295          
    296          /*********************************************************************
    297           * STATUS STRINGS
    298           */
    299          #if defined ( LCD_SUPPORTED )
    300            const char PingStr[]         = "Ping Rcvd from";
    301            const char AssocCnfStr[]     = "Assoc Cnf";
    302            const char SuccessStr[]      = "Success";
    303            const char EndDeviceStr[]    = "EndDevice:";
    304            const char ParentStr[]       = "Parent:";
    305            const char ZigbeeCoordStr[]  = "ZigBee Coord";
    306            const char NetworkIDStr[]    = "Network ID:";
    307            const char RouterStr[]       = "Router:";
    308            const char OrphanRspStr[]    = "Orphan Response";
    309            const char SentStr[]         = "Sent";
    310            const char FailedStr[]       = "Failed";
    311            const char AssocRspFailStr[] = "Assoc Rsp fail";
    312            const char AssocIndStr[]     = "Assoc Ind";
    313            const char AssocCnfFailStr[] = "Assoc Cnf fail";
    314            const char EnergyLevelStr[]  = "Energy Level";
    315            const char ScanFailedStr[]   = "Scan Failed";
    316          #endif
    317          
    318          /*********************************************************************
    319           * @fn       nwk_globals_init()
    320           *
    321           * @brief
    322           *
    323           *   Initialize nwk layer globals.  These are the system defaults and
    324           *   should be changed by the user here.  The default definitions are
    325           *   defined in nwk.h or NLMEDE.h.
    326           *
    327           * @param   none
    328           *
    329           * @return  none
    330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          void nwk_globals_init( void )
   \                     nwk_globals_init:
    332          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    333            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    334          
    335          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    336            if ( ZSTACK_ROUTER_BUILD )
    337            {
    338              // Initialize the Cskip Table
    339              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    340              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    341            }
    342          #endif
    343          
    344            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    345            // to 0 (compiler flag).
    346            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
   \   00000B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6004         JZ      ??nwk_globals_init_0
   \   000011   6401         XRL     A,#0x1
   \   000013   7003         JNZ     ??nwk_globals_init_1
    347            {
    348              NLME_InitLinkStatus();
   \                     ??nwk_globals_init_0:
   \   000015                ; Setup parameters for call to function NLME_InitLinkStatus
   \   000015   12....       LCALL   ??NLME_InitLinkStatus?relay
    349            }
    350          
    351          #if defined ( ZIGBEE_FREQ_AGILITY )
    352            NwkFreqAgilityInit();
   \                     ??nwk_globals_init_1:
   \   000018                ; Setup parameters for call to function NwkFreqAgilityInit
   \   000018   12....       LCALL   ??NwkFreqAgilityInit?relay
    353          #endif
    354          }
   \   00001B   D083         POP     DPH
   \   00001D   D082         POP     DPL
   \   00001F   02....       LJMP    ?BRET
    355          
    356          /*********************************************************************
    357           * @fn       NIB_init()
    358           *
    359           * @brief
    360           *
    361           *   Initialize attribute values in NIB
    362           *
    363           * @param   none
    364           *
    365           * @return  none
    366           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    367          void NIB_init()
   \                     NIB_init:
    368          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    369            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL   ??osal_rand?relay
   \   000008   EA           MOV     A,R2
   \   000009   90....       MOV     DPTR,#_NIB
   \   00000C   F0           MOVX    @DPTR,A
    370          
    371            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000D   90....       MOV     DPTR,#_NIB + 17
   \   000010   7402         MOV     A,#0x2
   \   000012   F0           MOVX    @DPTR,A
    372            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000013   90....       MOV     DPTR,#_NIB + 4
   \   000016   7414         MOV     A,#0x14
   \   000018   F0           MOVX    @DPTR,A
    373          
    374          #if ( NWK_MODE == NWK_MODE_MESH )
    375            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000019   90....       MOV     DPTR,#_NIB + 40
   \   00001C   740F         MOV     A,#0xf
   \   00001E   F0           MOVX    @DPTR,A
    376            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    377          #endif
    378          
    379            // BROADCAST SETTINGS:
    380            // *******************
    381            //   Broadcast Delivery Time
    382            //     - set to multiples of 100ms
    383            //     - should be 500ms more than the retry time
    384            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    385            //   Passive Ack Timeout
    386            //     - set to multiples of 100ms
    387            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000021   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000024   E0           MOVX    A,@DPTR
   \   000025   90....       MOV     DPTR,#_NIB + 7
   \   000028   F0           MOVX    @DPTR,A
    388            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000029   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   90....       MOV     DPTR,#_NIB + 1
   \   000030   F0           MOVX    @DPTR,A
    389            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000031   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000034   E0           MOVX    A,@DPTR
   \   000035   90....       MOV     DPTR,#_NIB + 2
   \   000038   F0           MOVX    @DPTR,A
    390          
    391            _NIB.ReportConstantCost = 0;
   \   000039   90....       MOV     DPTR,#_NIB + 8
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
    392            _NIB.RouteDiscRetries = 0;
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    393            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000040   90....       MOV     DPTR,#_NIB + 11
   \   000043   F0           MOVX    @DPTR,A
    394            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000044   90....       MOV     DPTR,#_NIB + 104
   \   000047   04           INC     A
   \   000048   F0           MOVX    @DPTR,A
    395          
    396            if ( ZG_SECURE_ENABLED )
    397            {
    398              _NIB.SecurityLevel = SECURITY_LEVEL;
    399            }
    400            else
    401            {
    402              _NIB.SecurityLevel = 0;
   \   000049   90....       MOV     DPTR,#_NIB + 12
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
    403            }
    404          
    405          #if defined ( ZIGBEEPRO )
    406            _NIB.SymLink = FALSE;
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
    407          #else
    408            _NIB.SymLink = TRUE;
    409          #endif
    410          
    411            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000050   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000053   E0           MOVX    A,@DPTR
   \   000054   90....       MOV     DPTR,#_NIB + 14
   \   000057   F0           MOVX    @DPTR,A
    412          
    413            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000058   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   90....       MOV     DPTR,#_NIB + 15
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    414          
    415            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000063   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   000066   E0           MOVX    A,@DPTR
   \   000067   90....       MOV     DPTR,#_NIB + 18
   \   00006A   F0           MOVX    @DPTR,A
    416            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006B   90....       MOV     DPTR,#zgRouteExpiryTime
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   90....       MOV     DPTR,#_NIB + 19
   \   000072   12....       LCALL   ?Subroutine0 & 0xFFFF
    417          
    418            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    419            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000075   A3           INC     DPTR
   \   000076   E4           CLR     A
   \   000077   12....       LCALL   ?Subroutine0 & 0xFFFF
    420            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    421            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   00007A                ; Setup parameters for call to function osal_memset
   \   00007A   7C08         MOV     R4,#0x8
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   7900         MOV     R1,#0x0
   \   000080   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000082   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000084   12....       LCALL   ??osal_memset?relay
    422            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   000087   90....       MOV     DPTR,#_NIB + 33
   \   00008A   74FE         MOV     A,#-0x2
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   04           INC     A
   \   00008F   F0           MOVX    @DPTR,A
    423          
    424            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   000090                ; Setup parameters for call to function sAddrExtCpy
   \   000090   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   000092   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   000094   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   000096   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   000098   12....       LCALL   ??sAddrExtCpy?relay
    425          
    426            _NIB.nwkKeyLoaded = FALSE;
   \   00009B   90....       MOV     DPTR,#_NIB + 61
   \   00009E   E4           CLR     A
   \   00009F   F0           MOVX    @DPTR,A
    427          
    428          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    429            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   0000A0   90....       MOV     DPTR,#_NIB + 96
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   F0           MOVX    @DPTR,A
    430            _NIB.nwkUniqueAddr = FALSE;
   \   0000A6   A3           INC     DPTR
   \   0000A7   E4           CLR     A
   \   0000A8   F0           MOVX    @DPTR,A
    431          #else
    432            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    433            _NIB.nwkUniqueAddr = TRUE;
    434          #endif
    435          
    436            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000A9   A3           INC     DPTR
   \   0000AA   740F         MOV     A,#0xf
   \   0000AC   F0           MOVX    @DPTR,A
    437            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000AD   A3           INC     DPTR
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   F0           MOVX    @DPTR,A
    438          
    439            //MTO and source routing
    440            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000B1   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   90....       MOV     DPTR,#_NIB + 102
   \   0000B8   F0           MOVX    @DPTR,A
    441            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000B9   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   90....       MOV     DPTR,#_NIB + 101
   \   0000C0   F0           MOVX    @DPTR,A
    442            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000C1   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   90....       MOV     DPTR,#_NIB + 103
   \   0000C8   F0           MOVX    @DPTR,A
    443          
    444          #if defined ( ZIGBEE_MULTICAST )
    445            _NIB.nwkUseMultiCast = TRUE;
   \   0000C9   90....       MOV     DPTR,#_NIB + 100
   \   0000CC   7401         MOV     A,#0x1
   \   0000CE   F0           MOVX    @DPTR,A
    446          #else
    447            _NIB.nwkUseMultiCast = FALSE;
    448          #endif
    449          
    450          #if defined ( NV_RESTORE )
    451            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    452                               &_NIB.nwkManagerAddr ) != SUCCESS )
   \   0000CF                ; Setup parameters for call to function osal_nv_read
   \   0000CF   75....       MOV     ?V0 + 0,#(_NIB + 105) & 0xff
   \   0000D2   75....       MOV     ?V0 + 1,#((_NIB + 105) >> 8) & 0xff
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   75..02       MOV     ?V0 + 0,#0x2
   \   0000DD   75..00       MOV     ?V0 + 1,#0x0
   \   0000E0   78..         MOV     R0,#?V0 + 0
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E5   7C00         MOV     R4,#0x0
   \   0000E7   7D00         MOV     R5,#0x0
   \   0000E9   7A89         MOV     R2,#-0x77
   \   0000EB   7B00         MOV     R3,#0x0
   \   0000ED   12....       LCALL   ??osal_nv_read?relay
   \   0000F0   7404         MOV     A,#0x4
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   E9           MOV     A,R1
   \   0000F6   6007         JZ      ??NIB_init_0
    453          #endif
    454            {
    455              _NIB.nwkManagerAddr = 0x0000;
   \   0000F8   90....       MOV     DPTR,#_NIB + 105
   \   0000FB   E4           CLR     A
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   F0           MOVX    @DPTR,A
    456            }
    457          
    458            _NIB.nwkUpdateId = 0;
   \                     ??NIB_init_0:
   \   0000FF   90....       MOV     DPTR,#_NIB + 109
   \   000102   E4           CLR     A
   \   000103   F0           MOVX    @DPTR,A
    459            _NIB.nwkTotalTransmissions = 0;
   \   000104   90....       MOV     DPTR,#_NIB + 107
   \   000107   F0           MOVX    @DPTR,A
   \   000108   A3           INC     DPTR
   \   000109   F0           MOVX    @DPTR,A
    460          
    461            if ( ZSTACK_ROUTER_BUILD )
   \   00010A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   6004         JZ      ??NIB_init_1
   \   000110   6401         XRL     A,#0x1
   \   000112   7003         JNZ     ??NIB_init_2
    462            {
    463          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    464              NLME_InitStochasticAddressing();
   \                     ??NIB_init_1:
   \   000114                ; Setup parameters for call to function NLME_InitStochasticAddressing
   \   000114   12....       LCALL   ??NLME_InitStochasticAddressing?relay
    465          #else
    466              NLME_InitTreeAddressing();
    467          #endif
    468            }
    469          }
   \                     ??NIB_init_2:
   \   000117   7F02         MOV     R7,#0x2
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74FE         MOV     A,#-0x2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   04           INC     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    470          
    471          /*********************************************************************
    472           * @fn       nwk_Status()
    473           *
    474           * @brief
    475           *
    476           *   Status report.
    477           *
    478           * @param   statusCode
    479           * @param   statusValue
    480           *
    481           * @return  none
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    484          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    485          #if defined ( LCD_SUPPORTED )
    486            switch ( statusCode )
    487            {
    488              case NWK_STATUS_COORD_ADDR:
    489                if ( ZSTACK_ROUTER_BUILD )
    490                {
    491                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
    492                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    493                  BuzzerControl( BUZZER_BLIP );
    494                }
    495                break;
    496          
    497              case NWK_STATUS_ROUTER_ADDR:
    498                if ( ZSTACK_ROUTER_BUILD )
    499                {
    500                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
    501                }
    502                break;
    503          
    504              case NWK_STATUS_ORPHAN_RSP:
    505                if ( ZSTACK_ROUTER_BUILD )
    506                {
    507                  if ( statusValue == ZSuccess )
    508                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
    509                  else
    510                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
    511                }
    512                break;
    513          
    514              case NWK_ERROR_ASSOC_RSP:
    515                if ( ZSTACK_ROUTER_BUILD )
    516                {
    517                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
    518                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    519                }
    520                break;
    521          
    522              case NWK_STATUS_ED_ADDR:
    523                if ( ZSTACK_END_DEVICE_BUILD )
    524                {
    525                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    526                }
    527                break;
    528          
    529              case NWK_STATUS_PARENT_ADDR:
    530                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
    531                break;
    532          
    533              case NWK_STATUS_ASSOC_CNF:
    534                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
    535                break;
    536          
    537              case NWK_ERROR_ASSOC_CNF_DENIED:
    538                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
    539                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    540                break;
    541          
    542              case NWK_ERROR_ENERGY_SCAN_FAILED:
    543                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
    544                break;
    545            }
    546          #endif
    547          }
   \   000000   02....       LJMP    ?BRET
    548          
    549          /*********************************************************************
    550           * @fn       nwk_UpdateStatistics()
    551           *
    552           * @brief   Update network layer statistic counters
    553           *
    554           * @param   statisticCode
    555           *
    556           * @return  none
    557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    558          void nwk_UpdateStatistics( uint8 statisticCode )
   \                     nwk_UpdateStatistics:
    559          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    560          #if defined ( PACKET_FILTER_STATS )
    561            switch ( statisticCode )
    562            {
    563              case STAT_NWK_INVALID_PACKET:
    564                nwkInvalidPackets++;
    565                break;
    566          
    567              case STAT_NWK_SECURITY_FAILURE:
    568                nwkInvalidPackets++;
    569                nwkSecurityFailures++;
    570                break;
    571          
    572              case STAT_APS_INVALID_PACKET:
    573                apsInvalidPackets++;
    574                break;
    575          
    576              case STAT_APS_SECURITY_FAILURE:
    577                apsSecurityFailures++;
    578                break;
    579            }
    580          #endif
    581          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
   \   000000   12           DB 18

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for defaultKey>`:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_UpdateStatistics?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_UpdateStatistics
    582          
    583          /*********************************************************************
    584          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NIB_init                           0      0     14
       -> osal_rand                     0      0     20
       -> osal_memset                   0      0     20
       -> sAddrExtCpy                   0      0     20
       -> osal_nv_read                  0      0     28
       -> NLME_InitStochasticAddressing
                                        0      0     20
     nwk_Status                         0      0      0
     nwk_UpdateStatistics               0      0      0
     nwk_globals_init                   2      0      0
       -> AddrMgrInit                   4      0      0
       -> NLME_InitLinkStatus           4      0      0
       -> NwkFreqAgilityInit            4      0      0


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     gNWK_MAX_DEVICE_LIST                              2
     gNWK_MAX_SLEEPING_END_DEVICES                     1
     gNWK_MAX_DATABUFS_WAITING                         1
     gNWK_MAX_DATABUFS_SCHEDULED                       1
     gNWK_MAX_DATABUFS_CONFIRMED                       1
     gNWK_MAX_DATABUFS_TOTAL                           1
     gNWK_INDIRECT_CNT_RTG_TMR                         1
     gNWK_INDIRECT_MSG_MAX_PER                         1
     gNWK_INDIRECT_MSG_MAX_ALL                         1
     Cskip                                             2
     CskipRtrs                                         1
     CskipChldrn                                       1
     gMIN_TREE_LINK_COST                               1
     AssociatedDevList                               378
     gNWK_MIN_ROUTER_CHILDREN                          2
     gNWK_MIN_ENDDEVICE_CHILDREN                       2
     gMAX_RTG_ENTRIES                                  2
     gMAX_RTG_SRC_ENTRIES                              2
     gMAX_RREQ_ENTRIES                                 1
     gMAX_NEIGHBOR_ENTRIES                             1
     neighborTable                                   368
     gMAX_SOURCE_ROUTE                                 1
     gMAX_BROADCAST_QUEUED                             1
     gLINK_DOWN_TRIGGER                                1
     gMAX_PASSIVE_ACK_CNT                              1
     rtgTable                                        280
     rtgSrcTable                                      72
     rtgSrcRelayList                                  24
     rtDiscTable                                      64
     bcastTable                                       72
     bcastHoldHandle                                   9
     bcastHoldAckMask                                 36
     gMAX_BCAST                                        1
     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
                                                       1
     gNWK_CONFLICTED_ADDR_EXPIRY_TIME
                                                       1
     gNWK_FREQ_AGILITY_ALL_MAC_ERRS                    1
     gMTO_RREQ_LIMIT_TIME                              2
     gMTO_ROUTE_EXPIRY_TIME                            1
     gDEFAULT_ROUTE_REQUEST_RADIUS                     1
     gDEF_NWK_RADIUS                                   1
     gLINK_STATUS_JITTER_MASK                          2
     gNWK_MAX_BINDING_ENTRIES                          2
     gMAX_BINDING_CLUSTER_IDS                          1
     gBIND_REC_SIZE                                    2
     BindingTable                                     56
     gAPS_MAX_GROUPS                                   1
     apsEndDeviceBroadcastTable                       90
     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
                                                       1
     defaultKey                                       16
     defaultTCLinkKey                                 16
     nwk_globals_init                                 34
     NIB_init                                        284
     ?Subroutine0                                      9
     nwk_Status                                        3
     nwk_UpdateStatistics                              3
     ?<Initializer for gMIN_TREE_LINK_COST>            1
     ?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST    1
     ?<Initializer for defaultKey>                    16
     ??nwk_globals_init?relay                          6
     ??NIB_init?relay                                  6
     ??nwk_Status?relay                                6
     ??nwk_UpdateStatistics?relay                      6

 
   333 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    57 bytes in segment CODE_C
    18 bytes in segment XDATA_I
    18 bytes in segment XDATA_ID
 1 453 bytes in segment XDATA_Z
 
   432 bytes of CODE  memory
 1 471 bytes of XDATA memory

Errors: none
Warnings: none
