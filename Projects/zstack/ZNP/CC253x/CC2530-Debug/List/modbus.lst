###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         25/Mar/2014  17:38:00 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\Source\modbus.c          #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\Source\znp #
#                          .cfg" (-DMAC_CFG_APP_PENDING_QUEUE=TRUE            #
#                          "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR   #
#                          | DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)"   #
#                          -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE -DZIGBEEPRO   #
#                          -DZIGBEE_FRAGMENTATION -DOSAL_CLOCK                #
#                          -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE -DNV_INIT   #
#                          -DNUM_DISC_ATTEMPTS=0) -f "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg #
#                          " (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0    #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00001000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\Source\modbus.c" -D     #
#                          xPOWER_SAVING -D NV_RESTORE -lC "C:\Documents and  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\CC2530-Debug\List\" -lA            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Lis #
#                          t\" --diag_suppress Pe001,Pa010 -o "C:\Documents   #
#                          and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Project #
#                          s\zstack\ZNP\CC253x\CC2530-Debug\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\" -I          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\Source\" -I      #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\Source\" -I   #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\SE\Source\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\ZMain #
#                          \TI2530ZNP\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\hal\include #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\. #
#                          .\Components\hal\target\CC2530ZNP\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\mac\include\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\high_le #
#                          vel\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\single_chip\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\mt\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\1\Te #
#                          mcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\Comp #
#                          onents\osal\include\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sa #
#                          ddr\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\services\sd #
#                          ata\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\af\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\1 #
#                          \TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\C #
#                          omponents\stack\nwk\" -I "C:\Documents and         #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\.. #
#                          \Components\stack\sec\" -I "C:\Documents and       #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\stack\zcl\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          1\TemcoZNP\Projects\zstack\ZNP\CC253x\..\..\..\..\ #
#                          Components\zmac\" -I "C:\Documents and             #
#                          Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zs #
#                          tack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"  #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\List #
#                          \modbus.lst                                        #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\1\Tem #
#                          coZNP\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ #
#                          modbus.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\1\TemcoZNP\Projects\zstack\ZNP\Source\modbus.c
      1          /*********************************************************************
      2           * INCLUDE
      3           */
      4          #include "modbus.h"
      5          #include "hal_defs.h"
      6          #include "hal_uart.h"
      7          #include "AF.h"
      8          #include "OnBoard.h"
      9          #include "OSAL_Clock.h"
     10          #include "OSAL_Nv.h"
     11          
     12          #include "temcoAPI.h"
     13          /*********************************************************************
     14           * LOCAL VARIABLES
     15           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     16          uint8 ttt[6] = {11, 22, 33, 44, 55, 66};
   \                     ttt:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ttt>`
   \   000006                REQUIRE __INIT_XDATA_I
     17          

   \                                 In  segment XDATA_ROM_C, align 1
     18          uint8 const auchCRCHi[256] = {
   \                     auchCRCHi:
   \   000000   00           DB 0
   \   000001   C1           DB 193
   \   000002   81           DB 129
   \   000003   40           DB 64
   \   000004   01           DB 1
   \   000005   C0           DB 192
   \   000006   80           DB 128
   \   000007   41           DB 65
   \   000008   01           DB 1
   \   000009   C0           DB 192
   \   00000A   80           DB 128
   \   00000B   41           DB 65
   \   00000C   00           DB 0
   \   00000D   C1           DB 193
   \   00000E   81           DB 129
   \   00000F   40           DB 64
   \   000010   01           DB 1
   \   000011   C0           DB 192
   \   000012   80           DB 128
   \   000013   41           DB 65
   \   000014   00           DB 0
   \   000015   C1           DB 193
   \   000016   81           DB 129
   \   000017   40           DB 64
   \   000018   00           DB 0
   \   000019   C1           DB 193
   \   00001A   81           DB 129
   \   00001B   40           DB 64
   \   00001C   01           DB 1
   \   00001D   C0           DB 192
   \   00001E   80           DB 128
   \   00001F   41           DB 65
   \   000020   01           DB 1
   \   000021   C0           DB 192
   \   000022   80           DB 128
   \   000023   41           DB 65
   \   000024   00           DB 0
   \   000025   C1           DB 193
   \   000026   81           DB 129
   \   000027   40           DB 64
   \   000028   00           DB 0
   \   000029   C1           DB 193
   \   00002A   81           DB 129
   \   00002B   40           DB 64
   \   00002C   01           DB 1
   \   00002D   C0           DB 192
   \   00002E   80           DB 128
   \   00002F   41           DB 65
   \   000030   00           DB 0
   \   000031   C1           DB 193
   \   000032   81           DB 129
   \   000033   40           DB 64
   \   000034   01           DB 1
   \   000035   C0           DB 192
   \   000036   80           DB 128
   \   000037   41           DB 65
   \   000038   01           DB 1
   \   000039   C0           DB 192
   \   00003A   80           DB 128
   \   00003B   41           DB 65
   \   00003C   00           DB 0
   \   00003D   C1           DB 193
   \   00003E   81           DB 129
   \   00003F   40           DB 64
   \   000040   01           DB 1
   \   000041   C0           DB 192
   \   000042   80           DB 128
   \   000043   41           DB 65
   \   000044   00           DB 0
   \   000045   C1           DB 193
   \   000046   81           DB 129
   \   000047   40           DB 64
   \   000048   00           DB 0
   \   000049   C1           DB 193
   \   00004A   81           DB 129
   \   00004B   40           DB 64
   \   00004C   01           DB 1
   \   00004D   C0           DB 192
   \   00004E   80           DB 128
   \   00004F   41           DB 65
   \   000050   00           DB 0
   \   000051   C1           DB 193
   \   000052   81           DB 129
   \   000053   40           DB 64
   \   000054   01           DB 1
   \   000055   C0           DB 192
   \   000056   80           DB 128
   \   000057   41           DB 65
   \   000058   01           DB 1
   \   000059   C0           DB 192
   \   00005A   80           DB 128
   \   00005B   41           DB 65
   \   00005C   00           DB 0
   \   00005D   C1           DB 193
   \   00005E   81           DB 129
   \   00005F   40           DB 64
   \   000060   00           DB 0
   \   000061   C1           DB 193
   \   000062   81           DB 129
   \   000063   40           DB 64
   \   000064   01           DB 1
   \   000065   C0           DB 192
   \   000066   80           DB 128
   \   000067   41           DB 65
   \   000068   01           DB 1
   \   000069   C0           DB 192
   \   00006A   80           DB 128
   \   00006B   41           DB 65
   \   00006C   00           DB 0
   \   00006D   C1           DB 193
   \   00006E   81           DB 129
   \   00006F   40           DB 64
   \   000070   01           DB 1
   \   000071   C0           DB 192
   \   000072   80           DB 128
   \   000073   41           DB 65
   \   000074   00           DB 0
   \   000075   C1           DB 193
   \   000076   81           DB 129
   \   000077   40           DB 64
   \   000078   00           DB 0
   \   000079   C1           DB 193
   \   00007A   81           DB 129
   \   00007B   40           DB 64
   \   00007C   01           DB 1
   \   00007D   C0           DB 192
   \   00007E   80           DB 128
   \   00007F   41           DB 65
   \   000080   01           DB 1
   \   000081   C0           DB 192
   \   000082   80           DB 128
   \   000083   41           DB 65
   \   000084   00           DB 0
   \   000085   C1           DB 193
   \   000086   81           DB 129
   \   000087   40           DB 64
   \   000088   00           DB 0
   \   000089   C1           DB 193
   \   00008A   81           DB 129
   \   00008B   40           DB 64
   \   00008C   01           DB 1
   \   00008D   C0           DB 192
   \   00008E   80           DB 128
   \   00008F   41           DB 65
   \   000090   00           DB 0
   \   000091   C1           DB 193
   \   000092   81           DB 129
   \   000093   40           DB 64
   \   000094   01           DB 1
   \   000095   C0           DB 192
   \   000096   80           DB 128
   \   000097   41           DB 65
   \   000098   01           DB 1
   \   000099   C0           DB 192
   \   00009A   80           DB 128
   \   00009B   41           DB 65
   \   00009C   00           DB 0
   \   00009D   C1           DB 193
   \   00009E   81           DB 129
   \   00009F   40           DB 64
   \   0000A0   00           DB 0
   \   0000A1   C1           DB 193
   \   0000A2   81           DB 129
   \   0000A3   40           DB 64
   \   0000A4   01           DB 1
   \   0000A5   C0           DB 192
   \   0000A6   80           DB 128
   \   0000A7   41           DB 65
   \   0000A8   01           DB 1
   \   0000A9   C0           DB 192
   \   0000AA   80           DB 128
   \   0000AB   41           DB 65
   \   0000AC   00           DB 0
   \   0000AD   C1           DB 193
   \   0000AE   81           DB 129
   \   0000AF   40           DB 64
   \   0000B0   01           DB 1
   \   0000B1   C0           DB 192
   \   0000B2   80           DB 128
   \   0000B3   41           DB 65
   \   0000B4   00           DB 0
   \   0000B5   C1           DB 193
   \   0000B6   81           DB 129
   \   0000B7   40           DB 64
   \   0000B8   00           DB 0
   \   0000B9   C1           DB 193
   \   0000BA   81           DB 129
   \   0000BB   40           DB 64
   \   0000BC   01           DB 1
   \   0000BD   C0           DB 192
   \   0000BE   80           DB 128
   \   0000BF   41           DB 65
   \   0000C0   00           DB 0
   \   0000C1   C1           DB 193
   \   0000C2   81           DB 129
   \   0000C3   40           DB 64
   \   0000C4   01           DB 1
   \   0000C5   C0           DB 192
   \   0000C6   80           DB 128
   \   0000C7   41           DB 65
   \   0000C8   01           DB 1
   \   0000C9   C0           DB 192
   \   0000CA   80           DB 128
   \   0000CB   41           DB 65
   \   0000CC   00           DB 0
   \   0000CD   C1           DB 193
   \   0000CE   81           DB 129
   \   0000CF   40           DB 64
   \   0000D0   01           DB 1
   \   0000D1   C0           DB 192
   \   0000D2   80           DB 128
   \   0000D3   41           DB 65
   \   0000D4   00           DB 0
   \   0000D5   C1           DB 193
   \   0000D6   81           DB 129
   \   0000D7   40           DB 64
   \   0000D8   00           DB 0
   \   0000D9   C1           DB 193
   \   0000DA   81           DB 129
   \   0000DB   40           DB 64
   \   0000DC   01           DB 1
   \   0000DD   C0           DB 192
   \   0000DE   80           DB 128
   \   0000DF   41           DB 65
   \   0000E0   01           DB 1
   \   0000E1   C0           DB 192
   \   0000E2   80           DB 128
   \   0000E3   41           DB 65
   \   0000E4   00           DB 0
   \   0000E5   C1           DB 193
   \   0000E6   81           DB 129
   \   0000E7   40           DB 64
   \   0000E8   00           DB 0
   \   0000E9   C1           DB 193
   \   0000EA   81           DB 129
   \   0000EB   40           DB 64
   \   0000EC   01           DB 1
   \   0000ED   C0           DB 192
   \   0000EE   80           DB 128
   \   0000EF   41           DB 65
   \   0000F0   00           DB 0
   \   0000F1   C1           DB 193
   \   0000F2   81           DB 129
   \   0000F3   40           DB 64
   \   0000F4   01           DB 1
   \   0000F5   C0           DB 192
   \   0000F6   80           DB 128
   \   0000F7   41           DB 65
   \   0000F8   01           DB 1
   \   0000F9   C0           DB 192
   \   0000FA   80           DB 128
   \   0000FB   41           DB 65
   \   0000FC   00           DB 0
   \   0000FD   C1           DB 193
   \   0000FE   81           DB 129
   \   0000FF   40           DB 64
     19          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     20          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     21          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     22          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     23          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     24          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     25          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     26          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     27          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     28          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     29          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     30          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     31          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     32          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     33          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     34          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
     35          } ;	
     36          	/* Table of CRC values for high Corder byte */
     37          
     38          

   \                                 In  segment XDATA_ROM_C, align 1
     39          uint8 const auchCRCLo[256] = {
   \                     auchCRCLo:
   \   000000   00           DB 0
   \   000001   C0           DB 192
   \   000002   C1           DB 193
   \   000003   01           DB 1
   \   000004   C3           DB 195
   \   000005   03           DB 3
   \   000006   02           DB 2
   \   000007   C2           DB 194
   \   000008   C6           DB 198
   \   000009   06           DB 6
   \   00000A   07           DB 7
   \   00000B   C7           DB 199
   \   00000C   05           DB 5
   \   00000D   C5           DB 197
   \   00000E   C4           DB 196
   \   00000F   04           DB 4
   \   000010   CC           DB 204
   \   000011   0C           DB 12
   \   000012   0D           DB 13
   \   000013   CD           DB 205
   \   000014   0F           DB 15
   \   000015   CF           DB 207
   \   000016   CE           DB 206
   \   000017   0E           DB 14
   \   000018   0A           DB 10
   \   000019   CA           DB 202
   \   00001A   CB           DB 203
   \   00001B   0B           DB 11
   \   00001C   C9           DB 201
   \   00001D   09           DB 9
   \   00001E   08           DB 8
   \   00001F   C8           DB 200
   \   000020   D8           DB 216
   \   000021   18           DB 24
   \   000022   19           DB 25
   \   000023   D9           DB 217
   \   000024   1B           DB 27
   \   000025   DB           DB 219
   \   000026   DA           DB 218
   \   000027   1A           DB 26
   \   000028   1E           DB 30
   \   000029   DE           DB 222
   \   00002A   DF           DB 223
   \   00002B   1F           DB 31
   \   00002C   DD           DB 221
   \   00002D   1D           DB 29
   \   00002E   1C           DB 28
   \   00002F   DC           DB 220
   \   000030   14           DB 20
   \   000031   D4           DB 212
   \   000032   D5           DB 213
   \   000033   15           DB 21
   \   000034   D7           DB 215
   \   000035   17           DB 23
   \   000036   16           DB 22
   \   000037   D6           DB 214
   \   000038   D2           DB 210
   \   000039   12           DB 18
   \   00003A   13           DB 19
   \   00003B   D3           DB 211
   \   00003C   11           DB 17
   \   00003D   D1           DB 209
   \   00003E   D0           DB 208
   \   00003F   10           DB 16
   \   000040   F0           DB 240
   \   000041   30           DB 48
   \   000042   31           DB 49
   \   000043   F1           DB 241
   \   000044   33           DB 51
   \   000045   F3           DB 243
   \   000046   F2           DB 242
   \   000047   32           DB 50
   \   000048   36           DB 54
   \   000049   F6           DB 246
   \   00004A   F7           DB 247
   \   00004B   37           DB 55
   \   00004C   F5           DB 245
   \   00004D   35           DB 53
   \   00004E   34           DB 52
   \   00004F   F4           DB 244
   \   000050   3C           DB 60
   \   000051   FC           DB 252
   \   000052   FD           DB 253
   \   000053   3D           DB 61
   \   000054   FF           DB 255
   \   000055   3F           DB 63
   \   000056   3E           DB 62
   \   000057   FE           DB 254
   \   000058   FA           DB 250
   \   000059   3A           DB 58
   \   00005A   3B           DB 59
   \   00005B   FB           DB 251
   \   00005C   39           DB 57
   \   00005D   F9           DB 249
   \   00005E   F8           DB 248
   \   00005F   38           DB 56
   \   000060   28           DB 40
   \   000061   E8           DB 232
   \   000062   E9           DB 233
   \   000063   29           DB 41
   \   000064   EB           DB 235
   \   000065   2B           DB 43
   \   000066   2A           DB 42
   \   000067   EA           DB 234
   \   000068   EE           DB 238
   \   000069   2E           DB 46
   \   00006A   2F           DB 47
   \   00006B   EF           DB 239
   \   00006C   2D           DB 45
   \   00006D   ED           DB 237
   \   00006E   EC           DB 236
   \   00006F   2C           DB 44
   \   000070   E4           DB 228
   \   000071   24           DB 36
   \   000072   25           DB 37
   \   000073   E5           DB 229
   \   000074   27           DB 39
   \   000075   E7           DB 231
   \   000076   E6           DB 230
   \   000077   26           DB 38
   \   000078   22           DB 34
   \   000079   E2           DB 226
   \   00007A   E3           DB 227
   \   00007B   23           DB 35
   \   00007C   E1           DB 225
   \   00007D   21           DB 33
   \   00007E   20           DB 32
   \   00007F   E0           DB 224
   \   000080   A0           DB 160
   \   000081   60           DB 96
   \   000082   61           DB 97
   \   000083   A1           DB 161
   \   000084   63           DB 99
   \   000085   A3           DB 163
   \   000086   A2           DB 162
   \   000087   62           DB 98
   \   000088   66           DB 102
   \   000089   A6           DB 166
   \   00008A   A7           DB 167
   \   00008B   67           DB 103
   \   00008C   A5           DB 165
   \   00008D   65           DB 101
   \   00008E   64           DB 100
   \   00008F   A4           DB 164
   \   000090   6C           DB 108
   \   000091   AC           DB 172
   \   000092   AD           DB 173
   \   000093   6D           DB 109
   \   000094   AF           DB 175
   \   000095   6F           DB 111
   \   000096   6E           DB 110
   \   000097   AE           DB 174
   \   000098   AA           DB 170
   \   000099   6A           DB 106
   \   00009A   6B           DB 107
   \   00009B   AB           DB 171
   \   00009C   69           DB 105
   \   00009D   A9           DB 169
   \   00009E   A8           DB 168
   \   00009F   68           DB 104
   \   0000A0   78           DB 120
   \   0000A1   B8           DB 184
   \   0000A2   B9           DB 185
   \   0000A3   79           DB 121
   \   0000A4   BB           DB 187
   \   0000A5   7B           DB 123
   \   0000A6   7A           DB 122
   \   0000A7   BA           DB 186
   \   0000A8   BE           DB 190
   \   0000A9   7E           DB 126
   \   0000AA   7F           DB 127
   \   0000AB   BF           DB 191
   \   0000AC   7D           DB 125
   \   0000AD   BD           DB 189
   \   0000AE   BC           DB 188
   \   0000AF   7C           DB 124
   \   0000B0   B4           DB 180
   \   0000B1   74           DB 116
   \   0000B2   75           DB 117
   \   0000B3   B5           DB 181
   \   0000B4   77           DB 119
   \   0000B5   B7           DB 183
   \   0000B6   B6           DB 182
   \   0000B7   76           DB 118
   \   0000B8   72           DB 114
   \   0000B9   B2           DB 178
   \   0000BA   B3           DB 179
   \   0000BB   73           DB 115
   \   0000BC   B1           DB 177
   \   0000BD   71           DB 113
   \   0000BE   70           DB 112
   \   0000BF   B0           DB 176
   \   0000C0   50           DB 80
   \   0000C1   90           DB 144
   \   0000C2   91           DB 145
   \   0000C3   51           DB 81
   \   0000C4   93           DB 147
   \   0000C5   53           DB 83
   \   0000C6   52           DB 82
   \   0000C7   92           DB 146
   \   0000C8   96           DB 150
   \   0000C9   56           DB 86
   \   0000CA   57           DB 87
   \   0000CB   97           DB 151
   \   0000CC   55           DB 85
   \   0000CD   95           DB 149
   \   0000CE   94           DB 148
   \   0000CF   54           DB 84
   \   0000D0   9C           DB 156
   \   0000D1   5C           DB 92
   \   0000D2   5D           DB 93
   \   0000D3   9D           DB 157
   \   0000D4   5F           DB 95
   \   0000D5   9F           DB 159
   \   0000D6   9E           DB 158
   \   0000D7   5E           DB 94
   \   0000D8   5A           DB 90
   \   0000D9   9A           DB 154
   \   0000DA   9B           DB 155
   \   0000DB   5B           DB 91
   \   0000DC   99           DB 153
   \   0000DD   59           DB 89
   \   0000DE   58           DB 88
   \   0000DF   98           DB 152
   \   0000E0   88           DB 136
   \   0000E1   48           DB 72
   \   0000E2   49           DB 73
   \   0000E3   89           DB 137
   \   0000E4   4B           DB 75
   \   0000E5   8B           DB 139
   \   0000E6   8A           DB 138
   \   0000E7   4A           DB 74
   \   0000E8   4E           DB 78
   \   0000E9   8E           DB 142
   \   0000EA   8F           DB 143
   \   0000EB   4F           DB 79
   \   0000EC   8D           DB 141
   \   0000ED   4D           DB 77
   \   0000EE   4C           DB 76
   \   0000EF   8C           DB 140
   \   0000F0   44           DB 68
   \   0000F1   84           DB 132
   \   0000F2   85           DB 133
   \   0000F3   45           DB 69
   \   0000F4   87           DB 135
   \   0000F5   47           DB 71
   \   0000F6   46           DB 70
   \   0000F7   86           DB 134
   \   0000F8   82           DB 130
   \   0000F9   42           DB 66
   \   0000FA   43           DB 67
   \   0000FB   83           DB 131
   \   0000FC   41           DB 65
   \   0000FD   81           DB 129
   \   0000FE   80           DB 128
   \   0000FF   40           DB 64
     40          
     41          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
     42          0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
     43          0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
     44          0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
     45          0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
     46          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
     47          0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
     48          0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
     49          0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
     50          0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
     51          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
     52          0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
     53          0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
     54          0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
     55          0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
     56          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
     57          
     58          } ;
     59          
     60          /*********************************************************************
     61           * GLOBAL VARIABLES
     62           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     63          uint8 CRClo, CRChi;
   \                     CRClo:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     CRChi:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     64          #if defined ( RFID_SUPPLY)
     65          uint8 modbus_id = 254;
     66          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
     67          uint8 modbus_id = 23;
   \                     modbus_id:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for modbus_id>`
   \   000001                REQUIRE __INIT_XDATA_I
     68          #endif

   \                                 In  segment XDATA_I, align 1, keep-with-next
     69          uint8 zSoftwareRev = 10;
   \                     zSoftwareRev:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zSoftwareRev>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          uint8 modbusDataLength = 0;
   \                     modbusDataLength:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          uint8 modbusStartAddr = 0;
   \                     modbusStartAddr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          uint8 firstAddr;
   \                     firstAddr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     73          
     74          #if defined ( RSSI_DISPLAY)
     75            bool panId_send = FALSE;
     76            uint8 rssi_send_hi, rssi_send_lo;
     77            int8 modbus_rssi;
     78          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          bool restroe_factory_setting = FALSE;
   \                     restroe_factory_setting:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     80          
     81          /*********************************************************************
     82           * LOCAL FUNCTIONS
     83           */
     84          // static uint16 CRC16( uint8 *puchMsg , uint8 usDataLen);
     85          static void modbus_send_byte( uint8 byte, uint8 crc);
     86          static bool check_data( uint8 *buf_com, uint8 len);
     87          static void modbus_process_msg( uint8 *data_buffer, uint8 len);
     88          
     89          /*********************************************************************
     90           * PUBLIC FUNCTIONS
     91           */
     92          void modbus_uart_data_process( uint8 *data_buffer, uint8 len);
     93          
     94          extern byte temcoApp_TransID;
     95          extern endPointDesc_t temco_epDesc;
     96          extern uint8 zgPreconfigKeyInit( uint8 setDefault );
     97          extern void ZDSecMgrInitNVKeyTables(uint8 setDefault);
     98          /*********************************************************************
     99           * MAIN PROGRAM
    100           */
    101          
    102          /******************************************************************************
    103           * @fn      initCRC16
    104           * 
    105           * @brief   Initialize the 16 bit CRC variables
    106           * 
    107           * @param   none
    108           * 
    109           * @return  none
    110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          void initCRC16( void)
   \                     initCRC16:
    112          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    113            CRClo = 0xff;
   \   000004   90....       MOV     DPTR,#CRClo
   \   000007   74FF         MOV     A,#-0x1
   \   000009   F0           MOVX    @DPTR,A
    114            CRChi = 0xff;
   \   00000A   90....       MOV     DPTR,#CRChi
   \   00000D                REQUIRE ?Subroutine0
   \   00000D                ; // Fall through to label ?Subroutine0
    115          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   D083         POP     DPH
   \   000003   D082         POP     DPL
   \   000005   02....       LJMP    ?BRET
    116          /*
    117          static uint16 CRC16( uint8 *puchMsg , uint8 usDataLen)
    118          {
    119            uint16 uchCRCHi = 0xff;
    120            uint8 uchCRCLo = 0xff;
    121            uint8 uIndex;
    122            
    123            while( usDataLen--)
    124            {
    125              uIndex = uchCRCHi ^ *puchMsg++ ; 
    126              uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
    127              uchCRCLo = auchCRCLo[uIndex] ;
    128            }  
    129            return ( uchCRCHi << 8 | uchCRCLo);
    130          }
    131          */
    132          
    133          /******************************************************************************
    134           * @fn      CRC16_byte
    135           * 
    136           * @brief   Calculate the 16 bit CRC variables
    137           * 
    138           * @param   uint8 - the byte wanted to be calc
    139           * 
    140           * @return  none
    141           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    142          void CRC16_byte( uint8 ch)
   \                     CRC16_byte:
    143          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    144            uint8 uIndex;
    145            
    146            uIndex = CRChi ^ ch;
   \   000004   90....       MOV     DPTR,#CRChi
   \   000007   E0           MOVX    A,@DPTR
   \   000008   69           XRL     A,R1
   \   000009   F8           MOV     R0,A
    147            CRChi = CRClo ^ auchCRCHi[uIndex];
   \   00000A   8882         MOV     DPL,R0
   \   00000C   AA82         MOV     R2,DPL
   \   00000E   74..         MOV     A,#auchCRCHi & 0xff
   \   000010   2A           ADD     A,R2
   \   000011   F582         MOV     DPL,A
   \   000013   74..         MOV     A,#(auchCRCHi >> 8) & 0xff
   \   000015   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000018   C082         PUSH    DPL
   \   00001A   C083         PUSH    DPH
   \   00001C   90....       MOV     DPTR,#CRClo
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   D083         POP     DPH
   \   000022   D082         POP     DPL
   \   000024   F8           MOV     R0,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   68           XRL     A,R0
   \   000027   90....       MOV     DPTR,#CRChi
   \   00002A   F0           MOVX    @DPTR,A
    148            CRClo = auchCRCLo[uIndex];
   \   00002B   74..         MOV     A,#auchCRCLo & 0xff
   \   00002D   2A           ADD     A,R2
   \   00002E   F582         MOV     DPL,A
   \   000030   74..         MOV     A,#(auchCRCLo >> 8) & 0xff
   \   000032   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000035   E0           MOVX    A,@DPTR
   \   000036   90....       MOV     DPTR,#CRClo
   \   000039   80..         SJMP    ?Subroutine0
    149          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    150          
    151          #if defined ( RSSI_DISPLAY)
    152          void calcCRC16( uint8* data, uint8 len)
    153          {
    154            uint8 *pData = osal_mem_alloc( len);
    155            if( pData)
    156              osal_memcpy( pData, data, len);
    157          
    158            pData[rssi_send_hi] = 255;
    159            pData[rssi_send_lo] = modbus_rssi;
    160            initCRC16();
    161            for( uint8 i = 0; i<(len-2); i++)
    162            {
    163              CRC16_byte(pData[i]);
    164            }
    165            pData[len-2] = CRChi;
    166            pData[len-1] = CRClo;
    167          
    168            HalUARTWrite( 0, pData, len);
    169            osal_mem_free( pData);
    170          }
    171          #endif
    172          /******************************************************************************
    173           * @fn      modbus_send_byte
    174           * 
    175           * @brief   Send one byte and calculate the crc byte
    176           * 
    177           * @param   uint8 - the byte wanted to be sent
    178           *          uint8 - the crc flag, need to calculate or not
    179           * 
    180           * @return  none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          static void modbus_send_byte( uint8 byte, uint8 crc)
   \                     modbus_send_byte:
    183          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
    184            HalUARTWrite( 0, &byte, 1);
   \   000014                ; Setup parameters for call to function HalUARTWrite
   \   000014   7C01         MOV     R4,#0x1
   \   000016   7D00         MOV     R5,#0x0
   \   000018   AA82         MOV     R2,DPL
   \   00001A   AB83         MOV     R3,DPH
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   12....       LCALL   ??HalUARTWrite?relay
    185            if ( crc == CRC_NO)
   \   000021   EE           MOV     A,R6
   \   000022   700B         JNZ     ??modbus_send_byte_0
    186              CRC16_byte(byte);
   \   000024                ; Setup parameters for call to function CRC16_byte
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   ??CRC16_byte?relay
    187          }
   \                     ??modbus_send_byte_0:
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    188          
    189          /******************************************************************************
    190           * @fn      modbus_uart_data_process
    191           * 
    192           * @brief   Process the message from UART
    193           * 
    194           * @param   uint8 - the pointer the buffer that to be process
    195           *          uint8 - length
    196           * 
    197           * @return  none
    198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    199          void modbus_uart_data_process( uint8 *data_buffer, uint8 len)
   \                     modbus_uart_data_process:
    200          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    201            afAddrType_t destAddr;
    202            destAddr.addrMode = afAddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine4 & 0xFFFF
    203            destAddr.addr.shortAddr = 0xffff;                
    204            destAddr.endPoint = 10;
   \                     ??CrossCallReturnLabel_2:
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   740A         MOV     A,#0xa
   \   000019   F0           MOVX    @DPTR,A
    205          
    206            if( TRUE == check_data( data_buffer, len))
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6403         XRL     A,#0x3
   \   000022   605B         JZ      ??modbus_uart_data_process_0
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6406         XRL     A,#0x6
   \   00002C   6051         JZ      ??modbus_uart_data_process_0
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6410         XRL     A,#0x10
   \   000036   6047         JZ      ??modbus_uart_data_process_0
    207            {
    208              initCRC16();
    209              modbus_process_msg( data_buffer, len);
    210            }
    211            else
    212            {
    213              AF_DataRequest( &destAddr, &temco_epDesc,
    214                               TEMCO_CLUSTERID,
    215                               len,
    216                               data_buffer,
    217                               &temcoApp_TransID,
    218                               AF_DISCV_ROUTE,
    219                               AF_DEFAULT_RADIUS );
   \   000038                ; Setup parameters for call to function AF_DataRequest
   \   000038   75..1E       MOV     ?V0 + 0,#0x1e
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000040   75....       MOV     ?V0 + 0,#temcoApp_TransID & 0xff
   \   000043   75....       MOV     ?V0 + 1,#(temcoApp_TransID >> 8) & 0xff
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   8A..         MOV     ?V0 + 0,R2
   \   00004D   8B..         MOV     ?V0 + 1,R3
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   8E..         MOV     ?V0 + 0,R6
   \   000056   75..00       MOV     ?V0 + 1,#0x0
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..02       MOV     ?V0 + 0,#0x2
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7920         MOV     R1,#0x20
   \   000068   7C..         MOV     R4,#temco_epDesc & 0xff
   \   00006A   7D..         MOV     R5,#(temco_epDesc >> 8) & 0xff
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
   \   000075   12....       LCALL   ??AF_DataRequest?relay
   \   000078   7409         MOV     A,#0x9
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   800D         SJMP    ??modbus_uart_data_process_1
    220            }
   \                     ??modbus_uart_data_process_0:
   \   00007F   90....       MOV     DPTR,#CRClo
   \   000082   74FF         MOV     A,#-0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   90....       MOV     DPTR,#CRChi
   \   000088   F0           MOVX    @DPTR,A
   \   000089                ; Setup parameters for call to function modbus_process_msg
   \   000089   12....       LCALL   ??modbus_process_msg?relay
    221          }
   \                     ??modbus_uart_data_process_1:
   \   00008C   740C         MOV     A,#0xc
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   7F02         MOV     R7,#0x2
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   7409         MOV     A,#0x9
   \   000010   22           RET
    222          
    223          /******************************************************************************
    224           * @fn      check_data
    225           * 
    226           * @brief   Check message to confirm it's a modbus message
    227           * 
    228           * @param   uint8 - the pointer the buffer that to be checked
    229           *          uint8 - length
    230           * 
    231           * @return  bool
    232           */
    233          
    234          static bool check_data( uint8 *buf_com, uint8 len)
    235          {
    236            
    237            if( ( buf_com[1] != MODBUS_SINGLE_READ) && (buf_com[1] != MODBUS_SINGLE_WRITE) && ( buf_com[1] != MODBUS_MULTI_WRITE))
    238              return FALSE;
    239            
    240            return TRUE;
    241          }
    242          
    243          /******************************************************************************
    244           * @fn      modbus_setUtcTime
    245           * 
    246           * @brief   Set UTC Time
    247           * 
    248           * @param   uint8 - the pointer the buffer
    249           * 
    250           * @return  none
    251           */
    252          
    253          
    254          static void modbus_setUtcTime( uint8 *pBuf)
                             ^
Warning[Pe177]: function "modbus_setUtcTime" was declared but never referenced
    255          {
    256            UTCTime utcSecs = 0;
    257            UTCTimeStruct utc;
    258            
    259            utc.hour = pBuf[1];
    260            utc.minutes = pBuf[3];
    261            utc.seconds = pBuf[5];
    262            utc.month = pBuf[7] - 1;
    263            utc.day = pBuf[9] - 1;
    264            utc.year = BUILD_UINT16( pBuf[11], pBuf[10]);
    265            
    266            if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
    267                  (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
    268            {
    269              if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
    270              {
    271                utcSecs = osal_ConvertUTCSecs( &utc );
    272              }
    273            }
    274            
    275            if( utcSecs)
    276            {
    277              osal_setClock( utcSecs );
    278            }
    279          }
    280          
    281          /******************************************************************************
    282           * @fn      modbus_single_write
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          void modbus_single_write( uint8 *data_buffer, uint8 len)
   \                     modbus_single_write:
    285          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    286            uint8 address;
    287            
    288            address = BUILD_UINT16( data_buffer[3], data_buffer[2]);
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
    289            
    290            if( address == MODBUS_PANID)
   \   00000E   7415         MOV     A,#0x15
   \   000010   68           XRL     A,R0
   \   000011   7046         JNZ     ??modbus_single_write_0
    291            {
    292              zgConfigPANID = BUILD_UINT16( data_buffer[5], data_buffer[4]);
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   EC           MOV     A,R4
   \   000029   90....       MOV     DPTR,#zgConfigPANID
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   E9           MOV     A,R1
   \   00002F   F0           MOVX    @DPTR,A
    293              osal_nv_write( ZCD_NV_PANID, 0, sizeof(zgConfigPANID), &zgConfigPANID);
   \   000030                ; Setup parameters for call to function osal_nv_write
   \   000030   75....       MOV     ?V0 + 0,#zgConfigPANID & 0xff
   \   000033   75....       MOV     ?V0 + 1,#(zgConfigPANID >> 8) & 0xff
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   75..02       MOV     ?V0 + 0,#0x2
   \   00003E   75..00       MOV     ?V0 + 1,#0x0
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7C00         MOV     R4,#0x0
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7A83         MOV     R2,#-0x7d
   \                     ??modbus_single_write_1:
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   ??osal_nv_write?relay
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   02....       LJMP    ??modbus_single_write_2 & 0xFFFF
    294            }
    295            else if( address == MODBUS_DEVICE_TYPE)
   \                     ??modbus_single_write_0:
   \   000059   7416         MOV     A,#0x16
   \   00005B   68           XRL     A,R0
   \   00005C   7027         JNZ     ??modbus_single_write_3
    296            {
    297              zgDeviceLogicalType = data_buffer[5];
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   12....       LCALL   ?Subroutine5 & 0xFFFF
    298              osal_nv_write( ZCD_NV_LOGICAL_TYPE, 0, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType);
   \                     ??CrossCallReturnLabel_4:
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..01       MOV     ?V0 + 0,#0x1
   \   00006B   75..00       MOV     ?V0 + 1,#0x0
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7C00         MOV     R4,#0x0
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7A87         MOV     R2,#-0x79
   \   000079   7B00         MOV     R3,#0x0
   \   00007B   12....       LCALL   ??osal_nv_write?relay
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    299              restore_factory_setting();
   \   000083                ; Setup parameters for call to function restore_factory_setting
   \   000083   807D         SJMP    ??modbus_single_write_4
    300            }
    301            else if( address == MODBUS_CHANNEL_LIST_HI)
   \                     ??modbus_single_write_3:
   \   000085   7417         MOV     A,#0x17
   \   000087   68           XRL     A,R0
   \   000088   7025         JNZ     ??modbus_single_write_5
    302            {
    303              zgDefaultChannelList = BUILD_UINT32( 0, 0, data_buffer[5], data_buffer[4]);
   \   00008A   12....       LCALL   ?Subroutine15 & 0xFFFF
    304            }
   \                     ??CrossCallReturnLabel_26:
   \   00008D   7410         MOV     A,#0x10
   \   00008F   78..         MOV     R0,#?V0 + 0
   \   000091   12....       LCALL   ?L_SHL
   \   000094   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000097   7418         MOV     A,#0x18
   \   000099   78..         MOV     R0,#?V0 + 4
   \   00009B   12....       LCALL   ?L_SHL
   \   00009E   78..         MOV     R0,#?V0 + 0
   \   0000A0   79..         MOV     R1,#?V0 + 4
   \   0000A2   12....       LCALL   ?L_ADD
   \   0000A5   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?L_MOV_TO_X
   \   0000AD   8056         SJMP    ??modbus_single_write_2
    305            else if( address == MODBUS_CHANNEL_LIST_LO)
   \                     ??modbus_single_write_5:
   \   0000AF   7418         MOV     A,#0x18
   \   0000B1   68           XRL     A,R0
   \   0000B2   703B         JNZ     ??modbus_single_write_6
    306            {
    307              zgDefaultChannelList = BUILD_UINT32( data_buffer[5], data_buffer[4], 0, 0 );
   \   0000B4   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000B7   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000BA   7408         MOV     A,#0x8
   \   0000BC   78..         MOV     R0,#?V0 + 4
   \   0000BE   12....       LCALL   ?L_SHL
   \   0000C1   78..         MOV     R0,#?V0 + 0
   \   0000C3   79..         MOV     R1,#?V0 + 4
   \   0000C5   12....       LCALL   ?L_ADD
   \   0000C8   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?L_MOV_TO_X
    308              osal_nv_write( ZCD_NV_CHANLIST, 0, sizeof(zgDefaultChannelList), &zgDefaultChannelList);
   \   0000D0                ; Setup parameters for call to function osal_nv_write
   \   0000D0   75....       MOV     ?V0 + 0,#zgDefaultChannelList & 0xff
   \   0000D3   75....       MOV     ?V0 + 1,#(zgDefaultChannelList >> 8) & 0xff
   \   0000D6   78..         MOV     R0,#?V0 + 0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   75..04       MOV     ?V0 + 0,#0x4
   \   0000DE   75..00       MOV     ?V0 + 1,#0x0
   \   0000E1   78..         MOV     R0,#?V0 + 0
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   7C00         MOV     R4,#0x0
   \   0000E8   7D00         MOV     R5,#0x0
   \   0000EA   7A84         MOV     R2,#-0x7c
   \   0000EC   02....       LJMP    ??modbus_single_write_1 & 0xFFFF
    309            }
    310            else if( address == MODBUS_FACTORY_RESTORE)
   \                     ??modbus_single_write_6:
   \   0000EF   7422         MOV     A,#0x22
   \   0000F1   68           XRL     A,R0
   \   0000F2   7011         JNZ     ??modbus_single_write_2
    311            {
    312              if(data_buffer[5] == 1)
   \   0000F4   8A82         MOV     DPL,R2
   \   0000F6   8B83         MOV     DPH,R3
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   6401         XRL     A,#0x1
   \   000100   7003         JNZ     ??modbus_single_write_2
    313              {
    314                restore_factory_setting();
   \   000102                ; Setup parameters for call to function restore_factory_setting
   \                     ??modbus_single_write_4:
   \   000102   12....       LCALL   ??restore_factory_setting?relay
    315              }
    316            }
    317          }
   \                     ??modbus_single_write_2:
   \   000105   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0 + 4,A
   \   00000B   E4           CLR     A
   \   00000C   F5..         MOV     ?V0 + 5,A
   \   00000E   F5..         MOV     ?V0 + 6,A
   \   000010   F5..         MOV     ?V0 + 7,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F5..         MOV     ?V0 + 0,A
   \   00000C   E4           CLR     A
   \   00000D   F5..         MOV     ?V0 + 1,A
   \   00000F   F5..         MOV     ?V0 + 2,A
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   75....       MOV     ?V0 + 0,#zgDeviceLogicalType & 0xff
   \   00000D   75....       MOV     ?V0 + 1,#(zgDeviceLogicalType >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   22           RET
    318          /******************************************************************************
    319           * @fn      modbus_multi_write
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          void modbus_multi_write( uint8 *data_buffer, uint8 len)
   \                     modbus_multi_write:
    322          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    323            uint8 address;
    324            
    325            address = BUILD_UINT16( data_buffer[3], data_buffer[2]);
    326            
    327            if( address == MODBUS_SECURITY_KEY_START)
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6423         XRL     A,#0x23
   \   000013   7051         JNZ     ??modbus_multi_write_0
    328            {
    329              if(data_buffer[6]>=32)
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C3           CLR     C
   \   000021   9420         SUBB    A,#0x20
   \   000023   4041         JC      ??modbus_multi_write_0
    330              {
    331                for(uint8 i=0; i<16; i++)
   \   000025   75..00       MOV     ?V0 + 0,#0x0
    332                {
    333                //  osal_memcpy(defaultKey, data_buffer[7+i*2], 1);
    334                  defaultKey[i] = data_buffer[7+i*2];
   \                     ??modbus_multi_write_1:
   \   000028   85..82       MOV     DPL,?V0 + 0
   \   00002B   AA82         MOV     R2,DPL
   \   00002D   EA           MOV     A,R2
   \   00002E   C3           CLR     C
   \   00002F   33           RLC     A
   \   000030   F8           MOV     R0,A
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   F9           MOV     R1,A
   \   000034   EE           MOV     A,R6
   \   000035   28           ADD     A,R0
   \   000036   F582         MOV     DPL,A
   \   000038   EF           MOV     A,R7
   \   000039   39           ADDC    A,R1
   \   00003A   F583         MOV     DPH,A
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   C0E0         PUSH    A
   \   000046   74..         MOV     A,#defaultKey & 0xff
   \   000048   2A           ADD     A,R2
   \   000049   F582         MOV     DPL,A
   \   00004B   74..         MOV     A,#(defaultKey >> 8) & 0xff
   \   00004D   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    335                  zgPreconfigKeyInit( TRUE );
   \   000053                ; Setup parameters for call to function zgPreconfigKeyInit
   \   000053   7901         MOV     R1,#0x1
   \   000055   12....       LCALL   ??zgPreconfigKeyInit?relay
    336          
    337                  // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    338                  ZDSecMgrInitNVKeyTables( TRUE );
   \   000058                ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
   \   000058   7901         MOV     R1,#0x1
   \   00005A   12....       LCALL   ??ZDSecMgrInitNVKeyTables?relay
    339                }
   \   00005D   05..         INC     ?V0 + 0
   \   00005F   E5..         MOV     A,?V0 + 0
   \   000061   C3           CLR     C
   \   000062   9410         SUBB    A,#0x10
   \   000064   40C2         JC      ??modbus_multi_write_1
    340              }
    341            }
    342          }
   \                     ??modbus_multi_write_0:
   \   000066   02....       LJMP    ?Subroutine1 & 0xFFFF
    343          /******************************************************************************
    344           * @fn      modbus_insert_msg
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   89..         MOV     ?V0 + 0,R1
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   EE           MOV     A,R6
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          void modbus_insert_msg( uint8 *pBuf, uint8 len)
   \                     modbus_insert_msg:
    347          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 4,R1
    348            uint8 index = 0;
    349            afAddrType_t destAddr;
    350            destAddr.addrMode = afAddr16Bit;
   \   000010   7408         MOV     A,#0x8
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7402         MOV     A,#0x2
   \   000017   F0           MOVX    @DPTR,A
    351            destAddr.addr.shortAddr = 0;                
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   E4           CLR     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    352            destAddr.endPoint = 10;
   \   000022   7409         MOV     A,#0x9
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   740A         MOV     A,#0xa
   \   000029   F0           MOVX    @DPTR,A
    353            signalStrength_t* pSigStren;
    354              
    355            initCRC16();
   \   00002A   90....       MOV     DPTR,#CRClo
   \   00002D   74FF         MOV     A,#-0x1
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   90....       MOV     DPTR,#CRChi
   \   000033   F0           MOVX    @DPTR,A
    356          //  uint8 *pInsertBuf = osal_mem_alloc( modbusDataLength*2);
    357            if( firstAddr < 21)
   \   000034   90....       MOV     DPTR,#firstAddr
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C3           CLR     C
   \   000039   9415         SUBB    A,#0x15
   \   00003B   500B         JNC     ??modbus_insert_msg_0
    358              index = 45 - 2*firstAddr;
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C3           CLR     C
   \   00003F   33           RLC     A
   \   000040   F8           MOV     R0,A
   \   000041   742D         MOV     A,#0x2d
   \   000043   C3           CLR     C
   \   000044   98           SUBB    A,R0
   \   000045   F9           MOV     R1,A
   \   000046   8002         SJMP    ??modbus_insert_msg_1
    359            else
    360              //index = (modbusStartAddr-20)*2 + 1;
    361              index = 3;
   \                     ??modbus_insert_msg_0:
   \   000048   7903         MOV     R1,#0x3
    362            
    363            for (uint8 i=0; i<modbusDataLength; i++)
   \                     ??modbus_insert_msg_1:
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   801B         SJMP    ??modbus_insert_msg_2
    364            {
    365              if( i+modbusStartAddr == MODBUS_PANID)
    366              {
    367                pBuf[index++] = HI_UINT16( _NIB.nwkPanId);
   \                     ??modbus_insert_msg_3:
   \   00004E   90....       MOV     DPTR,#_NIB + 34
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C0E0         PUSH    A
   \   000054   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   09           INC     R1
    368                pBuf[index++] = LO_UINT16( _NIB.nwkPanId);
   \   00005B   90....       MOV     DPTR,#_NIB + 33
   \                     ??modbus_insert_msg_4:
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   C0E0         PUSH    A
    369              }
   \                     ??modbus_insert_msg_5:
   \   000061   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000064   D0E0         POP     A
   \                     ??modbus_insert_msg_6:
   \   000066   F0           MOVX    @DPTR,A
   \   000067   09           INC     R1
   \   000068   0A           INC     R2
   \                     ??modbus_insert_msg_2:
   \   000069   90....       MOV     DPTR,#modbusDataLength
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   EA           MOV     A,R2
   \   00006F   C3           CLR     C
   \   000070   98           SUBB    A,R0
   \   000071   4003         JC      $+5
   \   000073   02....       LJMP    ??modbus_insert_msg_7 & 0xFFFF
   \   000076   8A..         MOV     ?V0 + 0,R2
   \   000078   90....       MOV     DPTR,#modbusStartAddr
   \   00007B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00007E   7415         MOV     A,#0x15
   \   000080   6C           XRL     A,R4
   \   000081   7001         JNZ     ??modbus_insert_msg_8
   \   000083   ED           MOV     A,R5
   \                     ??modbus_insert_msg_8:
   \   000084   60C8         JZ      ??modbus_insert_msg_3
    370              else if( i + modbusStartAddr == MODBUS_DEVICE_TYPE)
   \   000086   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000089   7416         MOV     A,#0x16
   \   00008B   6C           XRL     A,R4
   \   00008C   7001         JNZ     ??modbus_insert_msg_9
   \   00008E   ED           MOV     A,R5
   \                     ??modbus_insert_msg_9:
   \   00008F   7008         JNZ     ??modbus_insert_msg_10
    371              {
    372                pBuf[index++] = ZERO;
   \   000091   12....       LCALL   ?Subroutine19 & 0xFFFF
    373                pBuf[index++] = zgDeviceLogicalType;
   \                     ??CrossCallReturnLabel_34:
   \   000094   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000097   80C5         SJMP    ??modbus_insert_msg_4
    374              }
    375              else if( i + modbusStartAddr == MODBUS_CHANNEL_LIST_HI)
   \                     ??modbus_insert_msg_10:
   \   000099   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00009C   7417         MOV     A,#0x17
   \   00009E   6C           XRL     A,R4
   \   00009F   7001         JNZ     ??modbus_insert_msg_11
   \   0000A1   ED           MOV     A,R5
   \                     ??modbus_insert_msg_11:
   \   0000A2   702B         JNZ     ??modbus_insert_msg_12
    376              {
    377                pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 3);
   \   0000A4   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?L_MOV_X
   \   0000AC   7418         MOV     A,#0x18
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   12....       LCALL   ?UL_SHR
   \   0000B3   C0..         PUSH    ?V0 + 0
   \   0000B5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000B8   D0E0         POP     A
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   09           INC     R1
    378                pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 2);
   \   0000BC   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000BF   78..         MOV     R0,#?V0 + 0
   \   0000C1   12....       LCALL   ?L_MOV_X
   \   0000C4   7410         MOV     A,#0x10
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?UL_SHR
   \                     ??modbus_insert_msg_13:
   \   0000CB   C0..         PUSH    ?V0 + 0
   \   0000CD   8092         SJMP    ??modbus_insert_msg_5
    379              }
    380              else if( i + modbusStartAddr == MODBUS_CHANNEL_LIST_LO)
   \                     ??modbus_insert_msg_12:
   \   0000CF   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000D2   7418         MOV     A,#0x18
   \   0000D4   6C           XRL     A,R4
   \   0000D5   7001         JNZ     ??modbus_insert_msg_14
   \   0000D7   ED           MOV     A,R5
   \                     ??modbus_insert_msg_14:
   \   0000D8   701F         JNZ     ??modbus_insert_msg_15
    381              {
    382                pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 1);
   \   0000DA   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?L_MOV_X
   \   0000E2   E5..         MOV     A,?V0 + 1
   \   0000E4   F5..         MOV     ?V0 + 0,A
   \   0000E6   C0..         PUSH    ?V0 + 0
   \   0000E8   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000EB   D0E0         POP     A
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   09           INC     R1
    383                pBuf[index++] = BREAK_UINT32(zgDefaultChannelList, 0);
   \   0000EF   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000F2   78..         MOV     R0,#?V0 + 0
   \   0000F4   12....       LCALL   ?L_MOV_X
   \   0000F7   80D2         SJMP    ??modbus_insert_msg_13
    384              }
    385              else if( i + modbusStartAddr == MODBUS_SOFTWARE_REV)
   \                     ??modbus_insert_msg_15:
   \   0000F9   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000FC   7419         MOV     A,#0x19
   \   0000FE   6C           XRL     A,R4
   \   0000FF   7001         JNZ     ??modbus_insert_msg_16
   \   000101   ED           MOV     A,R5
   \                     ??modbus_insert_msg_16:
   \   000102   700B         JNZ     ??modbus_insert_msg_17
    386              {
    387                pBuf[index++] = ZERO;
   \   000104   12....       LCALL   ?Subroutine19 & 0xFFFF
    388                pBuf[index++] = ZIG_SOFTWARE_VER;
   \                     ??CrossCallReturnLabel_35:
   \   000107   12....       LCALL   ?Subroutine20 & 0xFFFF
    389              }
   \                     ??CrossCallReturnLabel_67:
   \   00010A   740A         MOV     A,#0xa
   \   00010C   02....       LJMP    ??modbus_insert_msg_6 & 0xFFFF
    390              else if( (i + modbusStartAddr >= MODBUS_EXTENDED_ADDR_HI) && (i + modbusStartAddr <= MODBUS_EXTENDED_ADDR_LO))
   \                     ??modbus_insert_msg_17:
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   FC           MOV     R4,A
   \   000111   E5..         MOV     A,?V0 + 0
   \   000113   2C           ADD     A,R4
   \   000114   24E6         ADD     A,#-0x1a
   \   000116   FC           MOV     R4,A
   \   000117   ED           MOV     A,R5
   \   000118   34FF         ADDC    A,#-0x1
   \   00011A   FD           MOV     R5,A
   \   00011B   C3           CLR     C
   \   00011C   EC           MOV     A,R4
   \   00011D   9408         SUBB    A,#0x8
   \   00011F   ED           MOV     A,R5
   \   000120   9400         SUBB    A,#0x0
   \   000122   5010         JNC     ??modbus_insert_msg_18
    391              {
    392                pBuf[index++] = ZERO;
   \   000124   12....       LCALL   ?Subroutine3 & 0xFFFF
    393                pBuf[index++] = aExtendedAddress[ i+modbusStartAddr-MODBUS_EXTENDED_ADDR_HI];
    394              }
   \                     ??CrossCallReturnLabel_0:
   \   000127   74..         MOV     A,#(aExtendedAddress + 230) & 0xff
   \   000129   2C           ADD     A,R4
   \   00012A   F582         MOV     DPL,A
   \   00012C   74..         MOV     A,#((aExtendedAddress - 26) >> 8) & 0xff
   \                     ??modbus_insert_msg_19:
   \   00012E   3D           ADDC    A,R5
   \   00012F   F583         MOV     DPH,A
   \   000131   02....       LJMP    ??modbus_insert_msg_4 & 0xFFFF
    395              else if( (i + modbusStartAddr >= MODBUS_SECURITY_KEY_START) && (i + modbusStartAddr <= MODBUS_SECURITY_KEY_END))
   \                     ??modbus_insert_msg_18:
   \   000134   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000137   EC           MOV     A,R4
   \   000138   24DD         ADD     A,#-0x23
   \   00013A   FC           MOV     R4,A
   \   00013B   ED           MOV     A,R5
   \   00013C   34FF         ADDC    A,#-0x1
   \   00013E   FD           MOV     R5,A
   \   00013F   C3           CLR     C
   \   000140   EC           MOV     A,R4
   \   000141   9410         SUBB    A,#0x10
   \   000143   ED           MOV     A,R5
   \   000144   9400         SUBB    A,#0x0
   \   000146   500C         JNC     ??modbus_insert_msg_20
    396              {
    397                pBuf[index++] = ZERO;
   \   000148   12....       LCALL   ?Subroutine3 & 0xFFFF
    398                pBuf[index++] = defaultKey[ i+modbusStartAddr-MODBUS_SECURITY_KEY_START];
    399              }
   \                     ??CrossCallReturnLabel_1:
   \   00014B   74..         MOV     A,#(defaultKey + 221) & 0xff
   \   00014D   2C           ADD     A,R4
   \   00014E   F582         MOV     DPL,A
   \   000150   74..         MOV     A,#((defaultKey - 35) >> 8) & 0xff
   \   000152   80DA         SJMP    ??modbus_insert_msg_19
    400              else if( i + modbusStartAddr == MODBUS_TSTAT_NUM)
   \                     ??modbus_insert_msg_20:
   \   000154   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000157   7433         MOV     A,#0x33
   \   000159   6C           XRL     A,R4
   \   00015A   7001         JNZ     ??modbus_insert_msg_21
   \   00015C   ED           MOV     A,R5
   \                     ??modbus_insert_msg_21:
   \   00015D   7009         JNZ     ??modbus_insert_msg_22
    401              {
    402                pBuf[index++] = ZERO;
   \   00015F   12....       LCALL   ?Subroutine19 & 0xFFFF
    403                pBuf[index++] = numSignalStren;
   \                     ??CrossCallReturnLabel_36:
   \   000162   90....       MOV     DPTR,#numSignalStren
   \   000165   02....       LJMP    ??modbus_insert_msg_4 & 0xFFFF
    404              }
    405              else if( (i + modbusStartAddr >= MODBUS_FIRST_TSTAT_ID) && ( i+ modbusStartAddr <= MODBUS_LAST_TSTAT_ID))
   \                     ??modbus_insert_msg_22:
   \   000168   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00016B   E4           CLR     A
   \   00016C   3400         ADDC    A,#0x0
   \   00016E   EC           MOV     A,R4
   \   00016F   9434         SUBB    A,#0x34
   \   000171   ED           MOV     A,R5
   \   000172   9400         SUBB    A,#0x0
   \   000174   C3           CLR     C
   \   000175   65D0         XRL     A,PSW
   \   000177   33           RLC     A
   \   000178   4051         JC      ??modbus_insert_msg_23
   \   00017A   90....       MOV     DPTR,#numSignalStren
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   2433         ADD     A,#0x33
   \   000180   FC           MOV     R4,A
   \   000181   E4           CLR     A
   \   000182   3400         ADDC    A,#0x0
   \   000184   FD           MOV     R5,A
   \   000185   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000188   C3           CLR     C
   \   000189   65D0         XRL     A,PSW
   \   00018B   33           RLC     A
   \   00018C   403D         JC      ??modbus_insert_msg_23
    406              {
    407                if( i + modbusStartAddr == MODBUS_FIRST_TSTAT_ID)
   \   00018E   8A..         MOV     ?V0 + 0,R2
   \   000190   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000193   7434         MOV     A,#0x34
   \   000195   6C           XRL     A,R4
   \   000196   7001         JNZ     ??modbus_insert_msg_24
   \   000198   ED           MOV     A,R5
   \                     ??modbus_insert_msg_24:
   \   000199   90....       MOV     DPTR,#pSignalStren
   \   00019C   7005         JNZ     ??modbus_insert_msg_25
    408                {
    409                  pSigStren = pSignalStren;
   \   00019E   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    410                }
   \                     ??CrossCallReturnLabel_69:
   \   0001A1   8017         SJMP    ??modbus_insert_msg_26
    411                else
    412                {
    413                  pSigStren = pSignalStren;
   \                     ??modbus_insert_msg_25:
   \   0001A3   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    414                  for( uint8 j=0; j<((i+modbusStartAddr)-MODBUS_FIRST_TSTAT_ID); j++)
   \                     ??CrossCallReturnLabel_70:
   \   0001A6   7800         MOV     R0,#0x0
   \   0001A8   8008         SJMP    ??modbus_insert_msg_27
    415                  {
    416                    if(pSigStren)
   \                     ??modbus_insert_msg_28:
   \   0001AA   EC           MOV     A,R4
   \   0001AB   4D           ORL     A,R5
   \   0001AC   6003         JZ      ??CrossCallReturnLabel_73
    417                      pSigStren = pSigStren->next;
   \   0001AE   12....       LCALL   ?Subroutine12 & 0xFFFF
    418                  }
   \                     ??CrossCallReturnLabel_73:
   \   0001B1   08           INC     R0
   \                     ??modbus_insert_msg_27:
   \   0001B2   12....       LCALL   ?Subroutine11 & 0xFFFF
    419                }
   \                     ??CrossCallReturnLabel_19:
   \   0001B5   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0001B8   40F0         JC      ??modbus_insert_msg_28
    420                pBuf[index++] = ZERO;
   \                     ??modbus_insert_msg_26:
   \   0001BA   12....       LCALL   ?Subroutine18 & 0xFFFF
    421                if(pSigStren != NULL)
   \                     ??CrossCallReturnLabel_32:
   \   0001BD   7003         JNZ     $+5
   \   0001BF   02....       LJMP    ??CrossCallReturnLabel_37 & 0xFFFF
    422                {
    423                  pBuf[index++] = pSigStren->modbus_id;
   \   0001C2   8C82         MOV     DPL,R4
   \   0001C4   8D83         MOV     DPH,R5
   \                     ??modbus_insert_msg_29:
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   02....       LJMP    ??modbus_insert_msg_4 & 0xFFFF
    424                }
    425                else
    426                  pBuf[index++] = ZERO;
    427              }
    428              else if( (i + modbusStartAddr >= MODBUS_FIRST_SIG_STREN) && ( i+ modbusStartAddr <= MODBUS_LAST_SIG_STREN))
   \                     ??modbus_insert_msg_23:
   \   0001CB   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001CE   EC           MOV     A,R4
   \   0001CF   95..         SUBB    A,?V0 + 0
   \   0001D1   ED           MOV     A,R5
   \   0001D2   95..         SUBB    A,?V0 + 1
   \   0001D4   C3           CLR     C
   \   0001D5   65D0         XRL     A,PSW
   \   0001D7   33           RLC     A
   \   0001D8   4065         JC      ??modbus_insert_msg_30
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   C3           CLR     C
   \   0001DC   33           RLC     A
   \   0001DD   FC           MOV     R4,A
   \   0001DE   E4           CLR     A
   \   0001DF   33           RLC     A
   \   0001E0   FD           MOV     R5,A
   \   0001E1   EC           MOV     A,R4
   \   0001E2   2434         ADD     A,#0x34
   \   0001E4   FC           MOV     R4,A
   \   0001E5   ED           MOV     A,R5
   \   0001E6   3400         ADDC    A,#0x0
   \   0001E8   FD           MOV     R5,A
   \   0001E9   8A..         MOV     ?V0 + 0,R2
   \   0001EB   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001EE   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001F0   65D0         XRL     A,PSW
   \   0001F2   33           RLC     A
   \   0001F3   404A         JC      ??modbus_insert_msg_30
    429              {
    430                if( i + modbusStartAddr == MODBUS_FIRST_SIG_STREN)
   \   0001F5   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001F8   E5..         MOV     A,?V0 + 0
   \   0001FA   6C           XRL     A,R4
   \   0001FB   7003         JNZ     ??modbus_insert_msg_31
   \   0001FD   E5..         MOV     A,?V0 + 1
   \   0001FF   6D           XRL     A,R5
   \                     ??modbus_insert_msg_31:
   \   000200   90....       MOV     DPTR,#pSignalStren
   \   000203   7005         JNZ     ??modbus_insert_msg_32
    431                {
    432                  pSigStren = pSignalStren;
   \   000205   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    433                }
   \                     ??CrossCallReturnLabel_71:
   \   000208   8029         SJMP    ??modbus_insert_msg_33
    434                else
    435                {
    436                  pSigStren = pSignalStren;
   \                     ??modbus_insert_msg_32:
   \   00020A   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    437                  for( uint8 j=0; j<((i+modbusStartAddr)-MODBUS_FIRST_SIG_STREN); j++)
   \                     ??CrossCallReturnLabel_72:
   \   00020D   7800         MOV     R0,#0x0
   \   00020F   8008         SJMP    ??modbus_insert_msg_34
    438                  {
    439                    if(pSigStren)
   \                     ??modbus_insert_msg_35:
   \   000211   EC           MOV     A,R4
   \   000212   4D           ORL     A,R5
   \   000213   6003         JZ      ??CrossCallReturnLabel_74
    440                      pSigStren = pSigStren->next;
   \   000215   12....       LCALL   ?Subroutine12 & 0xFFFF
    441                  }
   \                     ??CrossCallReturnLabel_74:
   \   000218   08           INC     R0
   \                     ??modbus_insert_msg_34:
   \   000219   12....       LCALL   ?Subroutine11 & 0xFFFF
    442                }
   \                     ??CrossCallReturnLabel_20:
   \   00021C   90....       MOV     DPTR,#numSignalStren
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F5..         MOV     ?V0 + 6,A
   \   000222   E5..         MOV     A,?V0 + 0
   \   000224   95..         SUBB    A,?V0 + 6
   \   000226   F5..         MOV     ?V0 + 0,A
   \   000228   E5..         MOV     A,?V0 + 1
   \   00022A   9400         SUBB    A,#0x0
   \   00022C   F5..         MOV     ?V0 + 1,A
   \   00022E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000231   40DE         JC      ??modbus_insert_msg_35
    443                pBuf[index++] = ZERO;
   \                     ??modbus_insert_msg_33:
   \   000233   12....       LCALL   ?Subroutine18 & 0xFFFF
    444                if(pSigStren != NULL)
   \                     ??CrossCallReturnLabel_33:
   \   000236   600A         JZ      ??CrossCallReturnLabel_37
    445                {
    446                  pBuf[index++] = pSigStren->rssi;
   \   000238   8C82         MOV     DPL,R4
   \   00023A   8D83         MOV     DPH,R5
   \   00023C   A3           INC     DPTR
   \   00023D   8087         SJMP    ??modbus_insert_msg_29
    447                }
    448                else
    449                  pBuf[index++] = ZERO;
    450              }
    451              else
    452              {
    453                pBuf[index++] = ZERO;
   \                     ??modbus_insert_msg_30:
   \   00023F   12....       LCALL   ?Subroutine19 & 0xFFFF
    454                pBuf[index++] = ZERO;
    455              }
   \                     ??CrossCallReturnLabel_37:
   \   000242   12....       LCALL   ?Subroutine20 & 0xFFFF
    456            }
   \                     ??CrossCallReturnLabel_68:
   \   000245   E4           CLR     A
   \   000246   02....       LJMP    ??modbus_insert_msg_6 & 0xFFFF
    457            
    458            for( uint8 i=0; i<len-2; i++)
   \                     ??modbus_insert_msg_7:
   \   000249   75..00       MOV     ?V0 + 5,#0x0
   \   00024C   800A         SJMP    ??modbus_insert_msg_36
    459              CRC16_byte(pBuf[i]);
   \                     ??modbus_insert_msg_37:
   \   00024E                ; Setup parameters for call to function CRC16_byte
   \   00024E   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F9           MOV     R1,A
   \   000253   12....       LCALL   ??CRC16_byte?relay
   \   000256   05..         INC     ?V0 + 5
   \                     ??modbus_insert_msg_36:
   \   000258   85....       MOV     ?V0 + 0,?V0 + 5
   \   00025B   85....       MOV     ?V0 + 2,?V0 + 4
   \   00025E   E5..         MOV     A,?V0 + 2
   \   000260   24FE         ADD     A,#-0x2
   \   000262   F8           MOV     R0,A
   \   000263   E4           CLR     A
   \   000264   34FF         ADDC    A,#-0x1
   \   000266   F9           MOV     R1,A
   \   000267   C3           CLR     C
   \   000268   E5..         MOV     A,?V0 + 0
   \   00026A   98           SUBB    A,R0
   \   00026B   E4           CLR     A
   \   00026C   99           SUBB    A,R1
   \   00026D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00026F   65D0         XRL     A,PSW
   \   000271   33           RLC     A
   \   000272   40DA         JC      ??modbus_insert_msg_37
   \   000274   85....       MOV     ?V0 + 0,?V0 + 4
   \   000277   EE           MOV     A,R6
   \   000278   25..         ADD     A,?V0 + 0
   \   00027A   F8           MOV     R0,A
   \   00027B   EF           MOV     A,R7
   \   00027C   3400         ADDC    A,#0x0
   \   00027E   F9           MOV     R1,A
   \   00027F   90....       MOV     DPTR,#CRChi
   \   000282   E0           MOVX    A,@DPTR
   \   000283   C0E0         PUSH    A
   \   000285   E8           MOV     A,R0
   \   000286   24FE         ADD     A,#-0x2
   \   000288   F582         MOV     DPL,A
   \   00028A   E9           MOV     A,R1
   \   00028B   34FF         ADDC    A,#-0x1
   \   00028D   F583         MOV     DPH,A
   \   00028F   D0E0         POP     A
   \   000291   F0           MOVX    @DPTR,A
    460            
    461            pBuf[len-2] = CRChi;
    462            pBuf[len-1] = CRClo;
   \   000292   90....       MOV     DPTR,#CRClo
   \   000295   E0           MOVX    A,@DPTR
   \   000296   C0E0         PUSH    A
   \   000298   E8           MOV     A,R0
   \   000299   24FF         ADD     A,#-0x1
   \   00029B   F582         MOV     DPL,A
   \   00029D   E9           MOV     A,R1
   \   00029E   34FF         ADDC    A,#-0x1
   \   0002A0   F583         MOV     DPH,A
   \   0002A2   D0E0         POP     A
   \   0002A4   F0           MOVX    @DPTR,A
    463            
    464            AF_DataRequest( &destAddr, &temco_epDesc,
    465                               TEMCO_CLUSTERID,
    466                               len,
    467                               pBuf,
    468                               &temcoApp_TransID,
    469                               AF_DISCV_ROUTE,
    470                               AF_DEFAULT_RADIUS );
   \   0002A5                ; Setup parameters for call to function AF_DataRequest
   \   0002A5   75..1E       MOV     ?V0 + 0,#0x1e
   \   0002A8   78..         MOV     R0,#?V0 + 0
   \   0002AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002AD   75....       MOV     ?V0 + 0,#temcoApp_TransID & 0xff
   \   0002B0   75....       MOV     ?V0 + 1,#(temcoApp_TransID >> 8) & 0xff
   \   0002B3   78..         MOV     R0,#?V0 + 0
   \   0002B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B8   8E..         MOV     ?V0 + 0,R6
   \   0002BA   8F..         MOV     ?V0 + 1,R7
   \   0002BC   78..         MOV     R0,#?V0 + 0
   \   0002BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C1   85....       MOV     ?V0 + 0,?V0 + 4
   \   0002C4   75..00       MOV     ?V0 + 1,#0x0
   \   0002C7   78..         MOV     R0,#?V0 + 0
   \   0002C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CC   75..02       MOV     ?V0 + 0,#0x2
   \   0002CF   78..         MOV     R0,#?V0 + 0
   \   0002D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D4   7920         MOV     R1,#0x20
   \   0002D6   7C..         MOV     R4,#temco_epDesc & 0xff
   \   0002D8   7D..         MOV     R5,#(temco_epDesc >> 8) & 0xff
   \   0002DA   7409         MOV     A,#0x9
   \   0002DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DF   AA82         MOV     R2,DPL
   \   0002E1   AB83         MOV     R3,DPH
   \   0002E3   12....       LCALL   ??AF_DataRequest?relay
   \   0002E6   7409         MOV     A,#0x9
   \   0002E8   12....       LCALL   ?DEALLOC_XSTACK8
    471            
    472            modbusStartAddr = 0;
   \   0002EB   90....       MOV     DPTR,#modbusStartAddr
   \   0002EE   E4           CLR     A
   \   0002EF   F0           MOVX    @DPTR,A
    473            modbusDataLength = 0;
   \   0002F0   90....       MOV     DPTR,#modbusDataLength
   \   0002F3   F0           MOVX    @DPTR,A
    474          }
   \   0002F4                REQUIRE ?Subroutine2
   \   0002F4                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   740C         MOV     A,#0xc
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine29_0
   \   000005                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   24CC         ADD     A,#-0x34
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   C3           CLR     C
   \   00000D   E5..         MOV     A,?V0 + 2
   \   00000F   95..         SUBB    A,?V0 + 0
   \   000011   E4           CLR     A
   \   000012   95..         SUBB    A,?V0 + 1
   \   000014   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000016   65D0         XRL     A,PSW
   \   000018   33           RLC     A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   89..         MOV     ?V0 + 0,R1
   \   000002   EE           MOV     A,R6
   \   000003   25..         ADD     A,?V0 + 0
   \   000005   F582         MOV     DPL,A
   \   000007   EF           MOV     A,R7
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   09           INC     R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   EC           MOV     A,R4
   \   000004   4D           ORL     A,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine30_0
   \   000004                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   88..         MOV     ?V0 + 2,R0
   \   000002   8A..         MOV     ?V0 + 0,R2
   \   000004   90....       MOV     DPTR,#modbusStartAddr
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V0 + 6,A
   \   00000A   E5..         MOV     A,?V0 + 0
   \   00000C   25..         ADD     A,?V0 + 6
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   E4           CLR     A
   \   000011   3400         ADDC    A,#0x0
   \   000013   F5..         MOV     ?V0 + 1,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   2C           ADD     A,R4
   \   000005   FC           MOV     R4,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#modbusStartAddr
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 0
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   F5..         MOV     ?V0 + 0,A
   \   00000C   E4           CLR     A
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   EC           MOV     A,R4
   \   000012   95..         SUBB    A,?V0 + 0
   \   000014   ED           MOV     A,R5
   \   000015   95..         SUBB    A,?V0 + 1
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000005   90....       MOV     DPTR,#numSignalStren
   \   000008   E0           MOVX    A,@DPTR
   \   000009   2434         ADD     A,#0x34
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   E4           CLR     A
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F5..         MOV     ?V0 + 1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   90....       MOV     DPTR,#modbusStartAddr
   \   000008   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   2C           ADD     A,R4
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   22           RET
    475          
    476          /******************************************************************************
    477           * @fn      modbus_process_msg
    478           * 
    479           * @brief   Process modbus message
    480           * 
    481           * @param   uint8 - the pointer the buffer
    482           *          uint8 - length 
    483           * 
    484           * @return  none
    485           */
    486          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    487          static void modbus_process_msg( uint8 *data_buffer, uint8 len)
   \                     modbus_process_msg:
    488          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   89..         MOV     ?V0 + 4,R1
    489            uint8 num, tempByte;
    490            uint8 zero = 0;
    491            uint16 i;
    492            uint16 address;
    493            signalStrength_t* pSigStren;
    494            
    495            afAddrType_t destAddr;
    496            destAddr.addrMode = afAddrBroadcast;
   \   000010   7408         MOV     A,#0x8
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine4 & 0xFFFF
    497            destAddr.addr.shortAddr = 0xffff;                
    498            destAddr.endPoint = 10;
   \                     ??CrossCallReturnLabel_3:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   740A         MOV     A,#0xa
   \   00001D   F0           MOVX    @DPTR,A
    499            
    500            address = BUILD_UINT16( data_buffer[3], data_buffer[2]);
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   EA           MOV     A,R2
   \   000031   2400         ADD     A,#0x0
   \   000033   FE           MOV     R6,A
   \   000034   E4           CLR     A
   \   000035   39           ADDC    A,R1
   \   000036   FF           MOV     R7,A
    501            
    502            if( data_buffer[0] == modbus_id)
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   90....       MOV     DPTR,#modbus_id
   \   000041   E0           MOVX    A,@DPTR
   \   000042   68           XRL     A,R0
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??modbus_process_msg_0 & 0xFFFF
    503            {
    504              if(data_buffer[1] == MODBUS_SINGLE_WRITE)
   \   000048   85..82       MOV     DPL,?V0 + 0
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6406         XRL     A,#0x6
   \   000051   7063         JNZ     ??modbus_process_msg_1
    505              {
    506                HalUARTWrite( 0, data_buffer, len);
   \   000053                ; Setup parameters for call to function HalUARTWrite
   \   000053   85....       MOV     ?V0 + 2,?V0 + 4
   \   000056   AC..         MOV     R4,?V0 + 2
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   AA..         MOV     R2,?V0 + 0
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   12....       LCALL   ??HalUARTWrite?relay
    507                if (address == MODBUS_DEVICE_TYPE)
   \   000061   7416         MOV     A,#0x16
   \   000063   6E           XRL     A,R6
   \   000064   7001         JNZ     ??modbus_process_msg_2
   \   000066   EF           MOV     A,R7
   \                     ??modbus_process_msg_2:
   \   000067   702D         JNZ     ??modbus_process_msg_3
    508                {
    509                  zgDeviceLogicalType = data_buffer[5];
   \   000069   85..82       MOV     DPL,?V0 + 0
   \   00006C   85..83       MOV     DPH,?V0 + 1
   \   00006F   12....       LCALL   ?Subroutine5 & 0xFFFF
    510                  osal_nv_write( ZCD_NV_LOGICAL_TYPE, 0, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType);
   \                     ??CrossCallReturnLabel_5:
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   75..01       MOV     ?V0 + 0,#0x1
   \   000078   75..00       MOV     ?V0 + 1,#0x0
   \   00007B   78..         MOV     R0,#?V0 + 0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   7C00         MOV     R4,#0x0
   \   000082   7D00         MOV     R5,#0x0
   \   000084   7A87         MOV     R2,#-0x79
   \   000086   7B00         MOV     R3,#0x0
   \   000088   12....       LCALL   ??osal_nv_write?relay
   \   00008B   7404         MOV     A,#0x4
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
    511                  restore_factory_setting();
   \   000090                ; Setup parameters for call to function restore_factory_setting
   \                     ??modbus_process_msg_4:
   \   000090   12....       LCALL   ??restore_factory_setting?relay
   \   000093   02....       LJMP    ??modbus_process_msg_5 & 0xFFFF
    512                }
    513                else if( address == MODBUS_FACTORY_RESTORE)
   \                     ??modbus_process_msg_3:
   \   000096   7422         MOV     A,#0x22
   \   000098   6E           XRL     A,R6
   \   000099   7001         JNZ     ??modbus_process_msg_6
   \   00009B   EF           MOV     A,R7
   \                     ??modbus_process_msg_6:
   \   00009C   6003         JZ      $+5
   \   00009E   02....       LJMP    ??modbus_process_msg_5 & 0xFFFF
    514                {
    515                  if( address == MODBUS_FACTORY_RESTORE)
    516                  {
    517                    if(data_buffer[5] == 1)
   \   0000A1   85..82       MOV     DPL,?V0 + 0
   \   0000A4   85..83       MOV     DPH,?V0 + 1
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6401         XRL     A,#0x1
   \   0000AF   6003         JZ      $+5
   \   0000B1   02....       LJMP    ??modbus_process_msg_5 & 0xFFFF
    518                    {
    519                      restore_factory_setting();
   \   0000B4                ; Setup parameters for call to function restore_factory_setting
   \   0000B4   80DA         SJMP    ??modbus_process_msg_4
    520                    }
    521                  }
    522                }
    523              }
    524              else if(data_buffer[1] == MODBUS_MULTI_WRITE)
   \                     ??modbus_process_msg_1:
   \   0000B6   85..82       MOV     DPL,?V0 + 0
   \   0000B9   8B83         MOV     DPH,R3
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   6410         XRL     A,#0x10
   \   0000BF   7003         JNZ     $+5
   \   0000C1   02....       LJMP    ??modbus_process_msg_5 & 0xFFFF
    525              {
    526                
    527              }
    528              else if( data_buffer[1] == MODBUS_SINGLE_READ)
   \   0000C4   85..82       MOV     DPL,?V0 + 0
   \   0000C7   8B83         MOV     DPH,R3
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   6403         XRL     A,#0x3
   \   0000CD   6003         JZ      $+5
   \   0000CF   02....       LJMP    ??modbus_process_msg_5 & 0xFFFF
    529              {
    530                num = data_buffer[5];
   \   0000D2   85..82       MOV     DPL,?V0 + 0
   \   0000D5   8B83         MOV     DPH,R3
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F5..         MOV     ?V0 + 5,A
    531                modbus_send_byte( data_buffer[0], CRC_NO);
   \   0000DF                ; Setup parameters for call to function modbus_send_byte
   \   0000DF   7A00         MOV     R2,#0x0
   \   0000E1   85..82       MOV     DPL,?V0 + 0
   \   0000E4   8B83         MOV     DPH,R3
   \   0000E6   12....       LCALL   ?Subroutine13 & 0xFFFF
    532                modbus_send_byte( data_buffer[1], CRC_NO);
   \                     ??CrossCallReturnLabel_21:
   \   0000E9   85..82       MOV     DPL,?V0 + 0
   \   0000EC   85..83       MOV     DPH,?V0 + 1
   \   0000EF   A3           INC     DPTR
   \   0000F0   12....       LCALL   ?Subroutine13 & 0xFFFF
    533                modbus_send_byte( num*2, CRC_NO);
   \                     ??CrossCallReturnLabel_22:
   \   0000F3   E5..         MOV     A,?V0 + 5
   \   0000F5   C3           CLR     C
   \   0000F6   33           RLC     A
   \   0000F7   F9           MOV     R1,A
   \   0000F8   12....       LCALL   ??modbus_send_byte?relay
    534                
    535                for( i = 0; i < num; i++)
   \   0000FB   75..00       MOV     ?V0 + 0,#0x0
   \   0000FE   75..00       MOV     ?V0 + 1,#0x0
   \   000101   8014         SJMP    ??modbus_process_msg_7
    536                {
    537                  if( i + address == MODBUS_PANID)
    538                  {
    539                    tempByte = HI_UINT16( _NIB.nwkPanId);
    540                    modbus_send_byte( tempByte, CRC_NO);
    541                    tempByte = LO_UINT16( _NIB.nwkPanId);
    542                    modbus_send_byte( tempByte, CRC_NO);
    543                  }
    544                  else if( i + address == MODBUS_DEVICE_TYPE)
    545                  {
    546                    modbus_send_byte( zero, CRC_NO);
    547                    modbus_send_byte( zgDeviceLogicalType, CRC_NO);
    548                  }
    549                  else if( i + address == MODBUS_CHANNEL_LIST_HI)
    550                  {
    551                    tempByte = HI_UINT16(zgConfigPANID);
    552                    modbus_send_byte( zero, CRC_NO);
    553                    tempByte = LO_UINT16(zgConfigPANID);
    554                    modbus_send_byte( zero, CRC_NO);
    555                  }
    556                  else if( i + address == MODBUS_CHANNEL_LIST_LO)
    557                  {
    558                    tempByte = HI_UINT16(zgConfigPANID);
    559                    modbus_send_byte( zero, CRC_NO);
    560                    tempByte = LO_UINT16(zgConfigPANID);
    561                    modbus_send_byte( zero, CRC_NO);
    562                  }
    563                  else if( i + address == MODBUS_SOFTWARE_REV)
    564                  {
    565                    modbus_send_byte( zero, CRC_NO);
    566                    modbus_send_byte( zSoftwareRev, CRC_NO);
    567                  }
    568                  else if( (i + address >= MODBUS_EXTENDED_ADDR_HI) && (i + address <= MODBUS_EXTENDED_ADDR_LO))
    569                  {
    570                    modbus_send_byte( zero, CRC_NO);
    571                    modbus_send_byte( aExtendedAddress[ i+modbusStartAddr-MODBUS_EXTENDED_ADDR_HI], CRC_NO);
    572                  }
    573                  else if( (i + address >= MODBUS_SECURITY_KEY_START) && (i + address <= MODBUS_SECURITY_KEY_END))
    574                  {
    575                    modbus_send_byte( zero, CRC_NO);
    576                    modbus_send_byte( defaultKey[ i+modbusStartAddr-MODBUS_SECURITY_KEY_START], CRC_NO);
    577                  }
    578                  else if( i + address == MODBUS_TSTAT_NUM)
    579                  {
    580                    modbus_send_byte( zero, CRC_NO);
    581                    modbus_send_byte( numSignalStren, CRC_NO);
    582                  }
    583                  else if( (i + address >= MODBUS_FIRST_TSTAT_ID) && ( i+ address <= MODBUS_LAST_TSTAT_ID))
    584                  {
    585                    if( i + address == MODBUS_FIRST_TSTAT_ID)
    586                    {
    587                      pSigStren = pSignalStren;
    588                    }
    589                    else
    590                    {
    591                      pSigStren = pSignalStren;
    592                      for( uint8 j=0; j<((i+address)-MODBUS_FIRST_TSTAT_ID); j++)
    593                      {
    594                        if(pSigStren)
    595                          pSigStren = pSigStren->next;
    596                      }
    597                    }
    598                    modbus_send_byte( zero, CRC_NO);
    599                    if(pSigStren != NULL)
    600                    {
    601                      modbus_send_byte( pSigStren->modbus_id, CRC_NO);
    602                    }
    603                    else
    604                      modbus_send_byte( zero, CRC_NO);
    605                  }
    606                  else if( (i + address >= MODBUS_FIRST_SIG_STREN) && ( i+ address <= MODBUS_LAST_SIG_STREN))
    607                  {
    608                    if( i + address == MODBUS_FIRST_SIG_STREN)
    609                    {
    610                      pSigStren = pSignalStren;
    611                    }
    612                    else
    613                    {
    614                      pSigStren = pSignalStren;
    615                      for( uint8 j=0; j<((i+address)-MODBUS_FIRST_SIG_STREN); j++)
    616                      {
    617                        if(pSigStren)
    618                          pSigStren = pSigStren->next;
    619                      }
    620                    }
    621                    modbus_send_byte( zero, CRC_NO);
    622                    if(pSigStren != NULL)
    623                    {
    624                      modbus_send_byte( pSigStren->rssi, CRC_NO);
    625                    }
    626                    else
    627                      modbus_send_byte( zero, CRC_NO);
    628                  }
    629                  
    630                  else
    631                  {
    632                    modbus_send_byte( 0, CRC_NO);
   \                     ??modbus_process_msg_8:
   \   000103                ; Setup parameters for call to function modbus_send_byte
   \   000103   12....       LCALL   ?Subroutine23 & 0xFFFF
    633                    modbus_send_byte( 1, CRC_NO);
    634                  }
   \                     ??CrossCallReturnLabel_46:
   \   000106   7901         MOV     R1,#0x1
   \                     ??modbus_process_msg_9:
   \   000108   12....       LCALL   ??modbus_send_byte?relay
   \   00010B   E5..         MOV     A,?V0 + 0
   \   00010D   2401         ADD     A,#0x1
   \   00010F   F5..         MOV     ?V0 + 0,A
   \   000111   E5..         MOV     A,?V0 + 1
   \   000113   3400         ADDC    A,#0x0
   \   000115   F5..         MOV     ?V0 + 1,A
   \                     ??modbus_process_msg_7:
   \   000117   85....       MOV     ?V0 + 2,?V0 + 5
   \   00011A   C3           CLR     C
   \   00011B   E5..         MOV     A,?V0 + 0
   \   00011D   95..         SUBB    A,?V0 + 2
   \   00011F   E5..         MOV     A,?V0 + 1
   \   000121   9400         SUBB    A,#0x0
   \   000123   4003         JC      $+5
   \   000125   02....       LJMP    ??modbus_process_msg_10 & 0xFFFF
   \   000128   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00012B   7415         MOV     A,#0x15
   \   00012D   68           XRL     A,R0
   \   00012E   7001         JNZ     ??modbus_process_msg_11
   \   000130   E9           MOV     A,R1
   \                     ??modbus_process_msg_11:
   \   000131   700F         JNZ     ??modbus_process_msg_12
   \   000133                ; Setup parameters for call to function modbus_send_byte
   \   000133   7A00         MOV     R2,#0x0
   \   000135   90....       MOV     DPTR,#_NIB + 34
   \   000138   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00013B   90....       MOV     DPTR,#_NIB + 33
   \                     ??modbus_process_msg_13:
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F9           MOV     R1,A
   \   000140   80C6         SJMP    ??modbus_process_msg_9
   \                     ??modbus_process_msg_12:
   \   000142   7416         MOV     A,#0x16
   \   000144   68           XRL     A,R0
   \   000145   7001         JNZ     ??modbus_process_msg_14
   \   000147   E9           MOV     A,R1
   \                     ??modbus_process_msg_14:
   \   000148   7008         JNZ     ??modbus_process_msg_15
   \   00014A                ; Setup parameters for call to function modbus_send_byte
   \   00014A   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00014D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000150   80EC         SJMP    ??modbus_process_msg_13
   \                     ??modbus_process_msg_15:
   \   000152   7417         MOV     A,#0x17
   \   000154   68           XRL     A,R0
   \   000155   7001         JNZ     ??modbus_process_msg_16
   \   000157   E9           MOV     A,R1
   \                     ??modbus_process_msg_16:
   \   000158   700D         JNZ     ??modbus_process_msg_17
   \                     ??modbus_process_msg_18:
   \   00015A                ; Setup parameters for call to function modbus_send_byte
   \   00015A   7A00         MOV     R2,#0x0
   \   00015C   7900         MOV     R1,#0x0
   \   00015E   12....       LCALL   ??modbus_send_byte?relay
   \                     ??modbus_process_msg_19:
   \   000161                ; Setup parameters for call to function modbus_send_byte
   \   000161   7A00         MOV     R2,#0x0
   \   000163   7900         MOV     R1,#0x0
   \   000165   80A1         SJMP    ??modbus_process_msg_9
   \                     ??modbus_process_msg_17:
   \   000167   7418         MOV     A,#0x18
   \   000169   68           XRL     A,R0
   \   00016A   7001         JNZ     ??modbus_process_msg_20
   \   00016C   E9           MOV     A,R1
   \                     ??modbus_process_msg_20:
   \   00016D   60EB         JZ      ??modbus_process_msg_18
   \   00016F   7419         MOV     A,#0x19
   \   000171   68           XRL     A,R0
   \   000172   7001         JNZ     ??modbus_process_msg_21
   \   000174   E9           MOV     A,R1
   \                     ??modbus_process_msg_21:
   \   000175   7008         JNZ     ??modbus_process_msg_22
   \   000177                ; Setup parameters for call to function modbus_send_byte
   \   000177   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00017A   90....       MOV     DPTR,#zSoftwareRev
   \   00017D   80BF         SJMP    ??modbus_process_msg_13
   \                     ??modbus_process_msg_22:
   \   00017F   E8           MOV     A,R0
   \   000180   24E6         ADD     A,#-0x1a
   \   000182   F8           MOV     R0,A
   \   000183   E9           MOV     A,R1
   \   000184   34FF         ADDC    A,#-0x1
   \   000186   F9           MOV     R1,A
   \   000187   C3           CLR     C
   \   000188   E8           MOV     A,R0
   \   000189   9408         SUBB    A,#0x8
   \   00018B   E9           MOV     A,R1
   \   00018C   9400         SUBB    A,#0x0
   \   00018E   500F         JNC     ??modbus_process_msg_23
   \   000190                ; Setup parameters for call to function modbus_send_byte
   \   000190   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000193   74..         MOV     A,#(aExtendedAddress + 230) & 0xff
   \   000195   28           ADD     A,R0
   \   000196   F582         MOV     DPL,A
   \   000198   74..         MOV     A,#((aExtendedAddress - 26) >> 8) & 0xff
   \   00019A   39           ADDC    A,R1
   \   00019B   F583         MOV     DPH,A
   \                     ??modbus_process_msg_24:
   \   00019D   809F         SJMP    ??modbus_process_msg_13
   \                     ??modbus_process_msg_23:
   \   00019F   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0001A2   E8           MOV     A,R0
   \   0001A3   24DD         ADD     A,#-0x23
   \   0001A5   F8           MOV     R0,A
   \   0001A6   E9           MOV     A,R1
   \   0001A7   34FF         ADDC    A,#-0x1
   \   0001A9   F9           MOV     R1,A
   \   0001AA   C3           CLR     C
   \   0001AB   E8           MOV     A,R0
   \   0001AC   9410         SUBB    A,#0x10
   \   0001AE   E9           MOV     A,R1
   \   0001AF   9400         SUBB    A,#0x0
   \   0001B1   5010         JNC     ??modbus_process_msg_25
   \   0001B3                ; Setup parameters for call to function modbus_send_byte
   \   0001B3   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0001B6   74..         MOV     A,#(defaultKey + 221) & 0xff
   \   0001B8   28           ADD     A,R0
   \   0001B9   F582         MOV     DPL,A
   \   0001BB   74..         MOV     A,#((defaultKey - 35) >> 8) & 0xff
   \   0001BD   39           ADDC    A,R1
   \   0001BE   F583         MOV     DPH,A
   \   0001C0   02....       LJMP    ??modbus_process_msg_13 & 0xFFFF
   \                     ??modbus_process_msg_25:
   \   0001C3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0001C6   7433         MOV     A,#0x33
   \   0001C8   68           XRL     A,R0
   \   0001C9   7001         JNZ     ??modbus_process_msg_26
   \   0001CB   E9           MOV     A,R1
   \                     ??modbus_process_msg_26:
   \   0001CC   7008         JNZ     ??modbus_process_msg_27
   \   0001CE                ; Setup parameters for call to function modbus_send_byte
   \   0001CE   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0001D1   90....       MOV     DPTR,#numSignalStren
   \   0001D4   80C7         SJMP    ??modbus_process_msg_24
   \                     ??modbus_process_msg_27:
   \   0001D6   C3           CLR     C
   \   0001D7   E8           MOV     A,R0
   \   0001D8   9434         SUBB    A,#0x34
   \   0001DA   E9           MOV     A,R1
   \   0001DB   9400         SUBB    A,#0x0
   \   0001DD   4064         JC      ??modbus_process_msg_28
   \   0001DF   90....       MOV     DPTR,#numSignalStren
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   2433         ADD     A,#0x33
   \   0001E5   FA           MOV     R2,A
   \   0001E6   E4           CLR     A
   \   0001E7   3400         ADDC    A,#0x0
   \   0001E9   FB           MOV     R3,A
   \   0001EA   EA           MOV     A,R2
   \   0001EB   98           SUBB    A,R0
   \   0001EC   EB           MOV     A,R3
   \   0001ED   99           SUBB    A,R1
   \   0001EE   4053         JC      ??modbus_process_msg_28
   \   0001F0   7434         MOV     A,#0x34
   \   0001F2   68           XRL     A,R0
   \   0001F3   7001         JNZ     ??modbus_process_msg_29
   \   0001F5   E9           MOV     A,R1
   \                     ??modbus_process_msg_29:
   \   0001F6   90....       MOV     DPTR,#pSignalStren
   \   0001F9   7005         JNZ     ??modbus_process_msg_30
   \   0001FB   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0001FE   8026         SJMP    ??modbus_process_msg_31
   \                     ??modbus_process_msg_30:
   \   000200   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000203   7A00         MOV     R2,#0x0
   \   000205   800A         SJMP    ??modbus_process_msg_32
   \                     ??modbus_process_msg_33:
   \   000207   E5..         MOV     A,?V0 + 2
   \   000209   45..         ORL     A,?V0 + 3
   \   00020B   6003         JZ      ??CrossCallReturnLabel_79
   \   00020D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000210   0A           INC     R2
   \                     ??modbus_process_msg_32:
   \   000211   8A..         MOV     ?V0 + 6,R2
   \   000213   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000216   E8           MOV     A,R0
   \   000217   24CC         ADD     A,#-0x34
   \   000219   F8           MOV     R0,A
   \   00021A   E9           MOV     A,R1
   \   00021B   34FF         ADDC    A,#-0x1
   \   00021D   F9           MOV     R1,A
   \   00021E   C3           CLR     C
   \   00021F   E5..         MOV     A,?V0 + 6
   \   000221   98           SUBB    A,R0
   \   000222   E4           CLR     A
   \   000223   99           SUBB    A,R1
   \   000224   40E1         JC      ??modbus_process_msg_33
   \                     ??modbus_process_msg_31:
   \   000226                ; Setup parameters for call to function modbus_send_byte
   \   000226   7A00         MOV     R2,#0x0
   \   000228   7900         MOV     R1,#0x0
   \   00022A   12....       LCALL   ??modbus_send_byte?relay
   \   00022D   E5..         MOV     A,?V0 + 2
   \   00022F   45..         ORL     A,?V0 + 3
   \   000231   7003         JNZ     $+5
   \   000233   02....       LJMP    ??modbus_process_msg_19 & 0xFFFF
   \   000236                ; Setup parameters for call to function modbus_send_byte
   \   000236   7A00         MOV     R2,#0x0
   \   000238   85..82       MOV     DPL,?V0 + 2
   \   00023B   85..83       MOV     DPH,?V0 + 3
   \                     ??modbus_process_msg_34:
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   02....       LJMP    ??modbus_process_msg_13 & 0xFFFF
   \                     ??modbus_process_msg_28:
   \   000243   90....       MOV     DPTR,#numSignalStren
   \   000246   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000249   E8           MOV     A,R0
   \   00024A   9A           SUBB    A,R2
   \   00024B   E9           MOV     A,R1
   \   00024C   9B           SUBB    A,R3
   \   00024D   5003         JNC     $+5
   \   00024F   02....       LJMP    ??modbus_process_msg_8 & 0xFFFF
   \   000252   E0           MOVX    A,@DPTR
   \   000253   C3           CLR     C
   \   000254   33           RLC     A
   \   000255   F8           MOV     R0,A
   \   000256   E4           CLR     A
   \   000257   33           RLC     A
   \   000258   F9           MOV     R1,A
   \   000259   E8           MOV     A,R0
   \   00025A   2434         ADD     A,#0x34
   \   00025C   FA           MOV     R2,A
   \   00025D   E9           MOV     A,R1
   \   00025E   3400         ADDC    A,#0x0
   \   000260   FB           MOV     R3,A
   \   000261   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000264   C3           CLR     C
   \   000265   EA           MOV     A,R2
   \   000266   98           SUBB    A,R0
   \   000267   EB           MOV     A,R3
   \   000268   99           SUBB    A,R1
   \   000269   5003         JNC     $+5
   \   00026B   02....       LJMP    ??modbus_process_msg_8 & 0xFFFF
   \   00026E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000271   EA           MOV     A,R2
   \   000272   68           XRL     A,R0
   \   000273   7002         JNZ     ??modbus_process_msg_35
   \   000275   EB           MOV     A,R3
   \   000276   69           XRL     A,R1
   \                     ??modbus_process_msg_35:
   \   000277   90....       MOV     DPTR,#pSignalStren
   \   00027A   7005         JNZ     ??modbus_process_msg_36
   \   00027C   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00027F   802D         SJMP    ??modbus_process_msg_37
   \                     ??modbus_process_msg_36:
   \   000281   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000284   7C00         MOV     R4,#0x0
   \   000286   800A         SJMP    ??modbus_process_msg_38
   \                     ??modbus_process_msg_39:
   \   000288   E5..         MOV     A,?V0 + 2
   \   00028A   45..         ORL     A,?V0 + 3
   \   00028C   6003         JZ      ??CrossCallReturnLabel_80
   \   00028E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000291   0C           INC     R4
   \                     ??modbus_process_msg_38:
   \   000292   8C..         MOV     ?V0 + 6,R4
   \   000294   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000297   90....       MOV     DPTR,#numSignalStren
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   2434         ADD     A,#0x34
   \   00029D   E4           CLR     A
   \   00029E   3400         ADDC    A,#0x0
   \   0002A0   E8           MOV     A,R0
   \   0002A1   9A           SUBB    A,R2
   \   0002A2   F8           MOV     R0,A
   \   0002A3   E9           MOV     A,R1
   \   0002A4   9B           SUBB    A,R3
   \   0002A5   F9           MOV     R1,A
   \   0002A6   C3           CLR     C
   \   0002A7   E5..         MOV     A,?V0 + 6
   \   0002A9   98           SUBB    A,R0
   \   0002AA   E4           CLR     A
   \   0002AB   99           SUBB    A,R1
   \   0002AC   40DA         JC      ??modbus_process_msg_39
   \                     ??modbus_process_msg_37:
   \   0002AE                ; Setup parameters for call to function modbus_send_byte
   \   0002AE   7A00         MOV     R2,#0x0
   \   0002B0   7900         MOV     R1,#0x0
   \   0002B2   12....       LCALL   ??modbus_send_byte?relay
   \   0002B5   E5..         MOV     A,?V0 + 2
   \   0002B7   45..         ORL     A,?V0 + 3
   \   0002B9   7003         JNZ     $+5
   \   0002BB   02....       LJMP    ??modbus_process_msg_19 & 0xFFFF
   \   0002BE                ; Setup parameters for call to function modbus_send_byte
   \   0002BE   7A00         MOV     R2,#0x0
   \   0002C0   85..82       MOV     DPL,?V0 + 2
   \   0002C3   85..83       MOV     DPH,?V0 + 3
   \   0002C6   A3           INC     DPTR
   \   0002C7   02....       LJMP    ??modbus_process_msg_34 & 0xFFFF
    635                }
    636                modbus_send_byte( CRChi, CRC_YES);
   \                     ??modbus_process_msg_10:
   \   0002CA                ; Setup parameters for call to function modbus_send_byte
   \   0002CA   7A01         MOV     R2,#0x1
   \   0002CC   90....       MOV     DPTR,#CRChi
   \   0002CF   12....       LCALL   ?Subroutine25 & 0xFFFF
    637                modbus_send_byte( CRClo, CRC_YES);
   \                     ??CrossCallReturnLabel_53:
   \   0002D2                ; Setup parameters for call to function modbus_send_byte
   \   0002D2   7A01         MOV     R2,#0x1
   \   0002D4   90....       MOV     DPTR,#CRClo
   \   0002D7   12....       LCALL   ?Subroutine25 & 0xFFFF
    638              }
    639            }
   \                     ??CrossCallReturnLabel_54:
   \   0002DA   8042         SJMP    ??modbus_process_msg_5
    640          
    641            else
    642            {
    643              AF_DataRequest( &destAddr, &temco_epDesc,
    644                               TEMCO_CLUSTERID,
    645                               len,
    646                               data_buffer,
    647                               &temcoApp_TransID,
    648                               AF_DISCV_ROUTE,
    649                               AF_DEFAULT_RADIUS );
   \                     ??modbus_process_msg_0:
   \   0002DC                ; Setup parameters for call to function AF_DataRequest
   \   0002DC   75..1E       MOV     ?V0 + 2,#0x1e
   \   0002DF   78..         MOV     R0,#?V0 + 2
   \   0002E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002E4   75....       MOV     ?V0 + 2,#temcoApp_TransID & 0xff
   \   0002E7   75....       MOV     ?V0 + 3,#(temcoApp_TransID >> 8) & 0xff
   \   0002EA   78..         MOV     R0,#?V0 + 2
   \   0002EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002EF   78..         MOV     R0,#?V0 + 0
   \   0002F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002F4   85....       MOV     ?V0 + 0,?V0 + 4
   \   0002F7   75..00       MOV     ?V0 + 1,#0x0
   \   0002FA   78..         MOV     R0,#?V0 + 0
   \   0002FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002FF   75..02       MOV     ?V0 + 0,#0x2
   \   000302   78..         MOV     R0,#?V0 + 0
   \   000304   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000307   7920         MOV     R1,#0x20
   \   000309   7C..         MOV     R4,#temco_epDesc & 0xff
   \   00030B   7D..         MOV     R5,#(temco_epDesc >> 8) & 0xff
   \   00030D   7409         MOV     A,#0x9
   \   00030F   12....       LCALL   ?XSTACK_DISP0_8
   \   000312   AA82         MOV     R2,DPL
   \   000314   AB83         MOV     R3,DPH
   \   000316   12....       LCALL   ??AF_DataRequest?relay
   \   000319   7409         MOV     A,#0x9
   \   00031B   12....       LCALL   ?DEALLOC_XSTACK8
    650            }
    651          }
   \                     ??modbus_process_msg_5:
   \   00031E   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   12....       LCALL   ??modbus_send_byte?relay
   \   000007                ; Setup parameters for call to function modbus_send_byte
   \   000007                ; Setup parameters for call to function modbus_send_byte
   \   000007                ; Setup parameters for call to function modbus_send_byte
   \   000007                ; Setup parameters for call to function modbus_send_byte
   \   000007   7A00         MOV     R2,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2E           ADD     A,R6
   \   000003   F8           MOV     R0,A
   \   000004   E5..         MOV     A,?V0 + 1
   \   000006   3F           ADDC    A,R7
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2434         ADD     A,#0x34
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   12....       LCALL   ??modbus_send_byte?relay
   \   000007                ; Setup parameters for call to function modbus_send_byte
   \   000007                ; Setup parameters for call to function modbus_send_byte
   \   000007   7A00         MOV     R2,#0x0
   \   000009   90....       MOV     DPTR,#modbusStartAddr
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   E5..         MOV     A,?V0 + 0
   \   000010   28           ADD     A,R0
   \   000011   F8           MOV     R0,A
   \   000012   E5..         MOV     A,?V0 + 1
   \   000014   3400         ADDC    A,#0x0
   \   000016   F9           MOV     R1,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003                ; Setup parameters for call to function modbus_send_byte
   \   000003                ; Setup parameters for call to function modbus_send_byte
   \   000003                ; Setup parameters for call to function modbus_send_byte
   \   000003   7A00         MOV     R2,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??modbus_send_byte?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine31_0
   \   000006                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ttt>`:
   \   000000   0B           DB 11
   \   000001   16           DB 22
   \   000002   21           DB 33
   \   000003   2C           DB 44
   \   000004   37           DB 55
   \   000005   42           DB 66

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for modbus_id>`:
   \   000000   17           DB 23

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zSoftwareRev>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initCRC16?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initCRC16

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CRC16_byte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CRC16_byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??modbus_send_byte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    modbus_send_byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??modbus_uart_data_process?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    modbus_uart_data_process

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??modbus_single_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    modbus_single_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??modbus_multi_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    modbus_multi_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??modbus_insert_msg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    modbus_insert_msg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??modbus_process_msg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    modbus_process_msg
    652          
    653          

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     CRC16_byte                       4      0     28
     initCRC16                        2      0      0
     modbus_insert_msg                1      0     37
       -> CRC16_byte                  0      0     56
       -> AF_DataRequest              0      0     74
     modbus_multi_write               1      0      9
       -> zgPreconfigKeyInit          0      0     18
       -> ZDSecMgrInitNVKeyTables     0      0     18
     modbus_process_msg               0      0     59
       -> HalUARTWrite                0      0     56
       -> osal_nv_write               0      0     64
       -> restore_factory_setting     0      0     56
       -> restore_factory_setting     0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> modbus_send_byte            0      0     56
       -> AF_DataRequest              0      0     74
     modbus_send_byte                 1      0     38
       -> HalUARTWrite                0      0     20
       -> CRC16_byte                  0      0     20
     modbus_single_write              0      0     20
       -> osal_nv_write               0      0     40
       -> osal_nv_write               0      0     40
       -> restore_factory_setting     0      0     32
       -> osal_nv_write               0      0     40
       -> restore_factory_setting     0      0     32
     modbus_uart_data_process         0      0     31
       -> AF_DataRequest              0      0     62
       -> modbus_process_msg          0      0     44


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     ttt                                 6
     auchCRCHi                         256
     auchCRCLo                         256
     CRClo                               1
     CRChi                               1
     modbus_id                           1
     zSoftwareRev                        1
     modbusDataLength                    1
     modbusStartAddr                     1
     firstAddr                           1
     restroe_factory_setting             1
     initCRC16                          13
     ?Subroutine0                        8
     CRC16_byte                         59
     ??Subroutine28_0                    5
     modbus_send_byte                   52
     ?Subroutine1                        5
     modbus_uart_data_process          150
     ?Subroutine4                       17
     modbus_single_write               264
     ?Subroutine16                      19
     ?Subroutine15                      20
     ??Subroutine29_0                    5
     ?Subroutine5                       19
     modbus_multi_write                105
     ?Subroutine20                       2
     ??Subroutine27_0                    6
     modbus_insert_msg                 756
     ?Subroutine2                        5
     ?Subroutine21                      26
     ?Subroutine19                       4
     ?Subroutine26                      16
     ?Subroutine18                       6
     ?Subroutine12                       4
     ??Subroutine30_0                    6
     ?Subroutine11                      22
     ?Subroutine10                       7
     ?Subroutine9                       24
     ?Subroutine7                        4
     ?Subroutine6                       19
     ?Subroutine3                       12
     ?Subroutine24                      11
     modbus_process_msg                801
     ?Subroutine23                      10
     ?Subroutine22                       9
     ?Subroutine17                       9
     ?Subroutine14                      24
     ?Subroutine13                       6
     ?Subroutine25                       6
     ?Subroutine8                        6
     ??Subroutine31_0                    8
     ?<Initializer for ttt>              6
     ?<Initializer for modbus_id>        1
     ?<Initializer for zSoftwareRev>     1
     ??initCRC16?relay                   6
     ??CRC16_byte?relay                  6
     ??modbus_send_byte?relay            6
     ??modbus_uart_data_process?relay    6
     ??modbus_single_write?relay         6
     ??modbus_multi_write?relay          6
     ??modbus_insert_msg?relay           6
     ??modbus_process_msg?relay          6

 
 2 550 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     8 bytes in segment XDATA_I
     8 bytes in segment XDATA_ID
   512 bytes in segment XDATA_ROM_C
     6 bytes in segment XDATA_Z
 
 2 606 bytes of CODE  memory
   512 bytes of CONST memory
    14 bytes of XDATA memory

Errors: none
Warnings: 1
